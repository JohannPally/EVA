
exercise_proj_stm32wb55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfa8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  0800e0e8  0800e0e8  0001e0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ec44  0800ec44  0001ec44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ec4c  0800ec4c  0001ec4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ec50  0800ec50  0001ec50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000004  0800ec54  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000378  200001e0  0800ee30  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000558  0800ee30  00020558  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000188b9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034be  00000000  00000000  00038ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001950  00000000  00000000  0003bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017f8  00000000  00000000  0003d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00024fe4  00000000  00000000  0003f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000193bd  00000000  00000000  000640b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000de0f7  00000000  00000000  0007d471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0015b568  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000080cc  00000000  00000000  0015b5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e0d0 	.word	0x0800e0d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800e0d0 	.word	0x0800e0d0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f20 <FusionDegreesToRadians+0x24>
 8000f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f12:	eeb0 0a67 	vmov.f32	s0, s15
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	3c8efa35 	.word	0x3c8efa35

08000f24 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	105a      	asrs	r2, r3, #1
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <FusionFastInverseSqrt+0x54>)
 8000f38:	1a9b      	subs	r3, r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8000f3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f44:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000f7c <FusionFastInverseSqrt+0x58>
 8000f48:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000f80 <FusionFastInverseSqrt+0x5c>
 8000f60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f64:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000f68:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	5f1f1412 	.word	0x5f1f1412
 8000f7c:	3f36d312 	.word	0x3f36d312
 8000f80:	3fd851ff 	.word	0x3fd851ff

08000f84 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	eef0 6a40 	vmov.f32	s13, s0
 8000f8e:	eeb0 7a60 	vmov.f32	s14, s1
 8000f92:	eef0 7a41 	vmov.f32	s15, s2
 8000f96:	edc7 6a01 	vstr	s13, [r7, #4]
 8000f9a:	ed87 7a02 	vstr	s14, [r7, #8]
 8000f9e:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d10f      	bne.n	8000fd0 <FusionVectorIsZero+0x4c>
 8000fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	d108      	bne.n	8000fd0 <FusionVectorIsZero+0x4c>
 8000fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	d101      	bne.n	8000fd0 <FusionVectorIsZero+0x4c>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <FusionVectorIsZero+0x4e>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b091      	sub	sp, #68	; 0x44
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	eeb0 5a40 	vmov.f32	s10, s0
 8000fee:	eef0 5a60 	vmov.f32	s11, s1
 8000ff2:	eeb0 6a41 	vmov.f32	s12, s2
 8000ff6:	eef0 6a61 	vmov.f32	s13, s3
 8000ffa:	eeb0 7a42 	vmov.f32	s14, s4
 8000ffe:	eef0 7a62 	vmov.f32	s15, s5
 8001002:	ed87 5a07 	vstr	s10, [r7, #28]
 8001006:	edc7 5a08 	vstr	s11, [r7, #32]
 800100a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800100e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001012:	ed87 7a05 	vstr	s14, [r7, #20]
 8001016:	edc7 7a06 	vstr	s15, [r7, #24]
    FusionVector result;
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 800101a:	ed97 7a07 	vldr	s14, [r7, #28]
 800101e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 800102a:	ed97 7a08 	vldr	s14, [r7, #32]
 800102e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001036:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 800103a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800103e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001046:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800104a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800104e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001052:	ca07      	ldmia	r2, {r0, r1, r2}
 8001054:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001058:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800105a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800105c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800105e:	ee06 1a90 	vmov	s13, r1
 8001062:	ee07 2a10 	vmov	s14, r2
 8001066:	ee07 3a90 	vmov	s15, r3
}
 800106a:	eeb0 0a66 	vmov.f32	s0, s13
 800106e:	eef0 0a47 	vmov.f32	s1, s14
 8001072:	eeb0 1a67 	vmov.f32	s2, s15
 8001076:	3744      	adds	r7, #68	; 0x44
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	eef0 6a40 	vmov.f32	s13, s0
 800108a:	eeb0 7a60 	vmov.f32	s14, s1
 800108e:	eef0 7a41 	vmov.f32	s15, s2
 8001092:	edc7 6a01 	vstr	s13, [r7, #4]
 8001096:	ed87 7a02 	vstr	s14, [r7, #8]
 800109a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800109e:	ed97 7a01 	vldr	s14, [r7, #4]
 80010a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80010b2:	eeb0 0a67 	vmov.f32	s0, s15
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010c0:	b480      	push	{r7}
 80010c2:	b08f      	sub	sp, #60	; 0x3c
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	eef0 6a40 	vmov.f32	s13, s0
 80010ca:	eeb0 7a60 	vmov.f32	s14, s1
 80010ce:	eef0 7a41 	vmov.f32	s15, s2
 80010d2:	edc7 1a04 	vstr	s3, [r7, #16]
 80010d6:	edc7 6a05 	vstr	s13, [r7, #20]
 80010da:	ed87 7a06 	vstr	s14, [r7, #24]
 80010de:	edc7 7a07 	vstr	s15, [r7, #28]
    FusionVector result;
    result.axis.x = vector.axis.x * scalar;
 80010e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80010e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ee:	edc7 7a08 	vstr	s15, [r7, #32]
    result.axis.y = vector.axis.y * scalar;
 80010f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80010f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.z = vector.axis.z * scalar;
 8001102:	ed97 7a07 	vldr	s14, [r7, #28]
 8001106:	edd7 7a04 	vldr	s15, [r7, #16]
 800110a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8001112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001116:	f107 0220 	add.w	r2, r7, #32
 800111a:	ca07      	ldmia	r2, {r0, r1, r2}
 800111c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001120:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001126:	ee06 1a90 	vmov	s13, r1
 800112a:	ee07 2a10 	vmov	s14, r2
 800112e:	ee07 3a90 	vmov	s15, r3
}
 8001132:	eeb0 0a66 	vmov.f32	s0, s13
 8001136:	eef0 0a47 	vmov.f32	s1, s14
 800113a:	eeb0 1a67 	vmov.f32	s2, s15
 800113e:	373c      	adds	r7, #60	; 0x3c
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001148:	b480      	push	{r7}
 800114a:	b091      	sub	sp, #68	; 0x44
 800114c:	af00      	add	r7, sp, #0
 800114e:	eeb0 5a40 	vmov.f32	s10, s0
 8001152:	eef0 5a60 	vmov.f32	s11, s1
 8001156:	eeb0 6a41 	vmov.f32	s12, s2
 800115a:	eef0 6a61 	vmov.f32	s13, s3
 800115e:	eeb0 7a42 	vmov.f32	s14, s4
 8001162:	eef0 7a62 	vmov.f32	s15, s5
 8001166:	ed87 5a07 	vstr	s10, [r7, #28]
 800116a:	edc7 5a08 	vstr	s11, [r7, #32]
 800116e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001172:	edc7 6a04 	vstr	s13, [r7, #16]
 8001176:	ed87 7a05 	vstr	s14, [r7, #20]
 800117a:	edc7 7a06 	vstr	s15, [r7, #24]
    FusionVector result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800117e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001182:	edd7 7a04 	vldr	s15, [r7, #16]
 8001186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800118e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001192:	edd7 7a05 	vldr	s15, [r7, #20]
 8001196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800119e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80011ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011c2:	ee06 1a90 	vmov	s13, r1
 80011c6:	ee07 2a10 	vmov	s14, r2
 80011ca:	ee07 3a90 	vmov	s15, r3
}
 80011ce:	eeb0 0a66 	vmov.f32	s0, s13
 80011d2:	eef0 0a47 	vmov.f32	s1, s14
 80011d6:	eeb0 1a67 	vmov.f32	s2, s15
 80011da:	3744      	adds	r7, #68	; 0x44
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80011e4:	b480      	push	{r7}
 80011e6:	b091      	sub	sp, #68	; 0x44
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	eeb0 5a40 	vmov.f32	s10, s0
 80011ee:	eef0 5a60 	vmov.f32	s11, s1
 80011f2:	eeb0 6a41 	vmov.f32	s12, s2
 80011f6:	eef0 6a61 	vmov.f32	s13, s3
 80011fa:	eeb0 7a42 	vmov.f32	s14, s4
 80011fe:	eef0 7a62 	vmov.f32	s15, s5
 8001202:	ed87 5a07 	vstr	s10, [r7, #28]
 8001206:	edc7 5a08 	vstr	s11, [r7, #32]
 800120a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800120e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001212:	ed87 7a05 	vstr	s14, [r7, #20]
 8001216:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    FusionVector result;
    result.axis.x = A.y * B.z - A.z * B.y;
 800121a:	ed97 7a08 	vldr	s14, [r7, #32]
 800121e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001226:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800122a:	edd7 7a05 	vldr	s15, [r7, #20]
 800122e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001236:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.y = A.z * B.x - A.x * B.z;
 800123a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800123e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001246:	edd7 6a07 	vldr	s13, [r7, #28]
 800124a:	edd7 7a06 	vldr	s15, [r7, #24]
 800124e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001256:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    result.axis.z = A.x * B.y - A.y * B.x;
 800125a:	ed97 7a07 	vldr	s14, [r7, #28]
 800125e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001266:	edd7 6a08 	vldr	s13, [r7, #32]
 800126a:	edd7 7a04 	vldr	s15, [r7, #16]
 800126e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001276:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800127a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800127e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001282:	ca07      	ldmia	r2, {r0, r1, r2}
 8001284:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001288:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800128a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800128c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800128e:	ee06 1a90 	vmov	s13, r1
 8001292:	ee07 2a10 	vmov	s14, r2
 8001296:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800129a:	eeb0 0a66 	vmov.f32	s0, s13
 800129e:	eef0 0a47 	vmov.f32	s1, s14
 80012a2:	eeb0 1a67 	vmov.f32	s2, s15
 80012a6:	3744      	adds	r7, #68	; 0x44
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	eef0 6a40 	vmov.f32	s13, s0
 80012ba:	eeb0 7a60 	vmov.f32	s14, s1
 80012be:	eef0 7a41 	vmov.f32	s15, s2
 80012c2:	edc7 6a01 	vstr	s13, [r7, #4]
 80012c6:	ed87 7a02 	vstr	s14, [r7, #8]
 80012ca:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80012ce:	ed97 5a01 	vldr	s10, [r7, #4]
 80012d2:	edd7 5a02 	vldr	s11, [r7, #8]
 80012d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80012da:	edd7 6a01 	vldr	s13, [r7, #4]
 80012de:	ed97 7a02 	vldr	s14, [r7, #8]
 80012e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e6:	eef0 1a45 	vmov.f32	s3, s10
 80012ea:	eeb0 2a65 	vmov.f32	s4, s11
 80012ee:	eef0 2a46 	vmov.f32	s5, s12
 80012f2:	eeb0 0a66 	vmov.f32	s0, s13
 80012f6:	eef0 0a47 	vmov.f32	s1, s14
 80012fa:	eeb0 1a67 	vmov.f32	s2, s15
 80012fe:	f7ff ff23 	bl	8001148 <FusionVectorHadamardProduct>
 8001302:	eef0 6a40 	vmov.f32	s13, s0
 8001306:	eeb0 7a60 	vmov.f32	s14, s1
 800130a:	eef0 7a41 	vmov.f32	s15, s2
 800130e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001312:	ed87 7a06 	vstr	s14, [r7, #24]
 8001316:	edc7 7a07 	vstr	s15, [r7, #28]
 800131a:	edd7 6a05 	vldr	s13, [r7, #20]
 800131e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001322:	edd7 7a07 	vldr	s15, [r7, #28]
 8001326:	eeb0 0a66 	vmov.f32	s0, s13
 800132a:	eef0 0a47 	vmov.f32	s1, s14
 800132e:	eeb0 1a67 	vmov.f32	s2, s15
 8001332:	f7ff fea5 	bl	8001080 <FusionVectorSum>
 8001336:	eef0 7a40 	vmov.f32	s15, s0
}
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0
 800134a:	eef0 6a40 	vmov.f32	s13, s0
 800134e:	eeb0 7a60 	vmov.f32	s14, s1
 8001352:	eef0 7a41 	vmov.f32	s15, s2
 8001356:	edc7 6a05 	vstr	s13, [r7, #20]
 800135a:	ed87 7a06 	vstr	s14, [r7, #24]
 800135e:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001362:	edd7 6a05 	vldr	s13, [r7, #20]
 8001366:	ed97 7a06 	vldr	s14, [r7, #24]
 800136a:	edd7 7a07 	vldr	s15, [r7, #28]
 800136e:	eeb0 0a66 	vmov.f32	s0, s13
 8001372:	eef0 0a47 	vmov.f32	s1, s14
 8001376:	eeb0 1a67 	vmov.f32	s2, s15
 800137a:	f7ff ff99 	bl	80012b0 <FusionVectorMagnitudeSquared>
 800137e:	eef0 7a40 	vmov.f32	s15, s0
 8001382:	eeb0 0a67 	vmov.f32	s0, s15
 8001386:	f7ff fdcd 	bl	8000f24 <FusionFastInverseSqrt>
 800138a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800138e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001392:	ed97 7a06 	vldr	s14, [r7, #24]
 8001396:	edd7 7a07 	vldr	s15, [r7, #28]
 800139a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800139e:	eeb0 0a66 	vmov.f32	s0, s13
 80013a2:	eef0 0a47 	vmov.f32	s1, s14
 80013a6:	eeb0 1a67 	vmov.f32	s2, s15
 80013aa:	f7ff fe89 	bl	80010c0 <FusionVectorMultiplyScalar>
 80013ae:	eef0 6a40 	vmov.f32	s13, s0
 80013b2:	eeb0 7a60 	vmov.f32	s14, s1
 80013b6:	eef0 7a41 	vmov.f32	s15, s2
 80013ba:	edc7 6a08 	vstr	s13, [r7, #32]
 80013be:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80013c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80013c6:	6a39      	ldr	r1, [r7, #32]
 80013c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013cc:	ee06 1a90 	vmov	s13, r1
 80013d0:	ee07 2a10 	vmov	s14, r2
 80013d4:	ee07 3a90 	vmov	s15, r3
}
 80013d8:	eeb0 0a66 	vmov.f32	s0, s13
 80013dc:	eef0 0a47 	vmov.f32	s1, s14
 80013e0:	eeb0 1a67 	vmov.f32	s2, s15
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 80013ea:	b490      	push	{r4, r7}
 80013ec:	b094      	sub	sp, #80	; 0x50
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	eeb0 4a40 	vmov.f32	s8, s0
 80013f4:	eef0 4a60 	vmov.f32	s9, s1
 80013f8:	eeb0 5a41 	vmov.f32	s10, s2
 80013fc:	eef0 5a61 	vmov.f32	s11, s3
 8001400:	eeb0 6a42 	vmov.f32	s12, s4
 8001404:	eef0 6a62 	vmov.f32	s13, s5
 8001408:	eeb0 7a43 	vmov.f32	s14, s6
 800140c:	eef0 7a63 	vmov.f32	s15, s7
 8001410:	ed87 4a08 	vstr	s8, [r7, #32]
 8001414:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001418:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800141c:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001420:	ed87 6a04 	vstr	s12, [r7, #16]
 8001424:	edc7 6a05 	vstr	s13, [r7, #20]
 8001428:	ed87 7a06 	vstr	s14, [r7, #24]
 800142c:	edc7 7a07 	vstr	s15, [r7, #28]
    FusionQuaternion result;
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001430:	ed97 7a08 	vldr	s14, [r7, #32]
 8001434:	edd7 7a04 	vldr	s15, [r7, #16]
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001440:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001444:	edd7 7a05 	vldr	s15, [r7, #20]
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001450:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001454:	edd7 7a06 	vldr	s15, [r7, #24]
 8001458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001460:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001464:	edd7 7a07 	vldr	s15, [r7, #28]
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001470:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800147e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001480:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001486:	ee06 0a10 	vmov	s12, r0
 800148a:	ee06 1a90 	vmov	s13, r1
 800148e:	ee07 2a10 	vmov	s14, r2
 8001492:	ee07 3a90 	vmov	s15, r3
}
 8001496:	eeb0 0a46 	vmov.f32	s0, s12
 800149a:	eef0 0a66 	vmov.f32	s1, s13
 800149e:	eeb0 1a47 	vmov.f32	s2, s14
 80014a2:	eef0 1a67 	vmov.f32	s3, s15
 80014a6:	3750      	adds	r7, #80	; 0x50
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc90      	pop	{r4, r7}
 80014ac:	4770      	bx	lr

080014ae <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 80014ae:	b490      	push	{r4, r7}
 80014b0:	b094      	sub	sp, #80	; 0x50
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	eeb0 4a40 	vmov.f32	s8, s0
 80014b8:	eef0 4a60 	vmov.f32	s9, s1
 80014bc:	eeb0 5a41 	vmov.f32	s10, s2
 80014c0:	eef0 5a61 	vmov.f32	s11, s3
 80014c4:	eeb0 6a42 	vmov.f32	s12, s4
 80014c8:	eef0 6a62 	vmov.f32	s13, s5
 80014cc:	eeb0 7a43 	vmov.f32	s14, s6
 80014d0:	eef0 7a63 	vmov.f32	s15, s7
 80014d4:	ed87 4a08 	vstr	s8, [r7, #32]
 80014d8:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 80014dc:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 80014e0:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 80014e4:	ed87 6a04 	vstr	s12, [r7, #16]
 80014e8:	edc7 6a05 	vstr	s13, [r7, #20]
 80014ec:	ed87 7a06 	vstr	s14, [r7, #24]
 80014f0:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    FusionQuaternion result;
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 80014f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80014f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80014fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001500:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001504:	edd7 7a05 	vldr	s15, [r7, #20]
 8001508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001510:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001514:	edd7 7a06 	vldr	s15, [r7, #24]
 8001518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001520:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001524:	edd7 7a07 	vldr	s15, [r7, #28]
 8001528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001530:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 8001534:	ed97 7a08 	vldr	s14, [r7, #32]
 8001538:	edd7 7a05 	vldr	s15, [r7, #20]
 800153c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001540:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001544:	edd7 7a04 	vldr	s15, [r7, #16]
 8001548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001550:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001554:	edd7 7a07 	vldr	s15, [r7, #28]
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001560:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001564:	edd7 7a06 	vldr	s15, [r7, #24]
 8001568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 8001574:	ed97 7a08 	vldr	s14, [r7, #32]
 8001578:	edd7 7a06 	vldr	s15, [r7, #24]
 800157c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001580:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001584:	edd7 7a07 	vldr	s15, [r7, #28]
 8001588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001590:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001594:	edd7 7a04 	vldr	s15, [r7, #16]
 8001598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80015a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 80015b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80015b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80015bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80015d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80015e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 80015f4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80015f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001602:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001604:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800160a:	ee06 0a10 	vmov	s12, r0
 800160e:	ee06 1a90 	vmov	s13, r1
 8001612:	ee07 2a10 	vmov	s14, r2
 8001616:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800161a:	eeb0 0a46 	vmov.f32	s0, s12
 800161e:	eef0 0a66 	vmov.f32	s1, s13
 8001622:	eeb0 1a47 	vmov.f32	s2, s14
 8001626:	eef0 1a67 	vmov.f32	s3, s15
 800162a:	3750      	adds	r7, #80	; 0x50
 800162c:	46bd      	mov	sp, r7
 800162e:	bc90      	pop	{r4, r7}
 8001630:	4770      	bx	lr

08001632 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001632:	b490      	push	{r4, r7}
 8001634:	b094      	sub	sp, #80	; 0x50
 8001636:	af00      	add	r7, sp, #0
 8001638:	eef0 4a40 	vmov.f32	s9, s0
 800163c:	eeb0 5a60 	vmov.f32	s10, s1
 8001640:	eef0 5a41 	vmov.f32	s11, s2
 8001644:	eeb0 6a61 	vmov.f32	s12, s3
 8001648:	eef0 6a42 	vmov.f32	s13, s4
 800164c:	eeb0 7a62 	vmov.f32	s14, s5
 8001650:	eef0 7a43 	vmov.f32	s15, s6
 8001654:	edc7 4a08 	vstr	s9, [r7, #32]
 8001658:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800165c:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8001660:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8001664:	edc7 6a05 	vstr	s13, [r7, #20]
 8001668:	ed87 7a06 	vstr	s14, [r7, #24]
 800166c:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001670:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001674:	eeb1 7a67 	vneg.f32	s14, s15
 8001678:	edd7 7a05 	vldr	s15, [r7, #20]
 800167c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001680:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001684:	edd7 7a06 	vldr	s15, [r7, #24]
 8001688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001690:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001694:	edd7 7a07 	vldr	s15, [r7, #28]
 8001698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 80016a4:	ed97 7a08 	vldr	s14, [r7, #32]
 80016a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80016b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80016c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 80016d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80016d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80016e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80016f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001700:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001704:	ed97 7a08 	vldr	s14, [r7, #32]
 8001708:	edd7 7a07 	vldr	s15, [r7, #28]
 800170c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001710:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001714:	edd7 7a06 	vldr	s15, [r7, #24]
 8001718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001720:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001724:	edd7 7a05 	vldr	s15, [r7, #20]
 8001728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001730:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001734:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001738:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800173c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800173e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001742:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001744:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800174a:	ee06 0a10 	vmov	s12, r0
 800174e:	ee06 1a90 	vmov	s13, r1
 8001752:	ee07 2a10 	vmov	s14, r2
 8001756:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800175a:	eeb0 0a46 	vmov.f32	s0, s12
 800175e:	eef0 0a66 	vmov.f32	s1, s13
 8001762:	eeb0 1a47 	vmov.f32	s2, s14
 8001766:	eef0 1a67 	vmov.f32	s3, s15
 800176a:	3750      	adds	r7, #80	; 0x50
 800176c:	46bd      	mov	sp, r7
 800176e:	bc90      	pop	{r4, r7}
 8001770:	4770      	bx	lr

08001772 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8001772:	b590      	push	{r4, r7, lr}
 8001774:	b093      	sub	sp, #76	; 0x4c
 8001776:	af00      	add	r7, sp, #0
 8001778:	eeb0 6a40 	vmov.f32	s12, s0
 800177c:	eef0 6a60 	vmov.f32	s13, s1
 8001780:	eeb0 7a41 	vmov.f32	s14, s2
 8001784:	eef0 7a61 	vmov.f32	s15, s3
 8001788:	ed87 6a04 	vstr	s12, [r7, #16]
 800178c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001790:	ed87 7a06 	vstr	s14, [r7, #24]
 8001794:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001798:	ed97 7a04 	vldr	s14, [r7, #16]
 800179c:	edd7 7a04 	vldr	s15, [r7, #16]
 80017a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a4:	edd7 6a05 	vldr	s13, [r7, #20]
 80017a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80017b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80017c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80017cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d4:	eeb0 0a67 	vmov.f32	s0, s15
 80017d8:	f7ff fba4 	bl	8000f24 <FusionFastInverseSqrt>
 80017dc:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 80017e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80017e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 80017f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80017f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8001800:	ed97 7a06 	vldr	s14, [r7, #24]
 8001804:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8001810:	ed97 7a07 	vldr	s14, [r7, #28]
 8001814:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return normalisedQuaternion;
 8001820:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800182a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800182e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001830:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001836:	ee06 0a10 	vmov	s12, r0
 800183a:	ee06 1a90 	vmov	s13, r1
 800183e:	ee07 2a10 	vmov	s14, r2
 8001842:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001846:	eeb0 0a46 	vmov.f32	s0, s12
 800184a:	eef0 0a66 	vmov.f32	s1, s13
 800184e:	eeb0 1a47 	vmov.f32	s2, s14
 8001852:	eef0 1a67 	vmov.f32	s3, s15
 8001856:	374c      	adds	r7, #76	; 0x4c
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}

0800185c <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <FusionAhrsInitialise+0x30>)
 8001866:	f107 0408 	add.w	r4, r7, #8
 800186a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4619      	mov	r1, r3
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f868 	bl	800194c <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f807 	bl	8001890 <FusionAhrsReset>
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	bf00      	nop
 800188c:	0800e0e8 	.word	0x0800e0e8

08001890 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8001890:	b480      	push	{r7}
 8001892:	b091      	sub	sp, #68	; 0x44
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	61da      	str	r2, [r3, #28]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
    ahrs->initialising = true;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    ahrs->rampedGain = INITIAL_GAIN;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <FusionAhrsReset+0xb8>)
 80018dc:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	649a      	str	r2, [r3, #72]	; 0x48
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->accelerometerIgnored = false;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ahrs->accelerationRejectionTimer = 0;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimeout = false;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    ahrs->magnetometerIgnored = false;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    ahrs->magneticRejectionTimer = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	65da      	str	r2, [r3, #92]	; 0x5c
    ahrs->magneticRejectionTimeout = false;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800193a:	bf00      	nop
 800193c:	3744      	adds	r7, #68	; 0x44
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	41200000 	.word	0x41200000

0800194c <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
    ahrs->settings.gain = settings->gain;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	601a      	str	r2, [r3, #0]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	edd3 7a01 	vldr	s15, [r3, #4]
 8001964:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	d003      	beq.n	8001976 <FusionAhrsSetSettings+0x2a>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d103      	bne.n	800197e <FusionAhrsSetSettings+0x32>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a38      	ldr	r2, [pc, #224]	; (8001a5c <FusionAhrsSetSettings+0x110>)
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	e01d      	b.n	80019ba <FusionAhrsSetSettings+0x6e>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	edd3 7a01 	vldr	s15, [r3, #4]
 8001984:	eeb0 0a67 	vmov.f32	s0, s15
 8001988:	f7ff fab8 	bl	8000efc <FusionDegreesToRadians>
 800198c:	eef0 7a40 	vmov.f32	s15, s0
 8001990:	eeb0 0a67 	vmov.f32	s0, s15
 8001994:	f00b f85a 	bl	800ca4c <sinf>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
 800199c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019a8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ac:	f00b f8c2 	bl	800cb34 <powf>
 80019b0:	eef0 7a40 	vmov.f32	s15, s0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	edc3 7a01 	vstr	s15, [r3, #4]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80019c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d003      	beq.n	80019d2 <FusionAhrsSetSettings+0x86>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <FusionAhrsSetSettings+0x8e>
        ahrs->settings.magneticRejection = FLT_MAX;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <FusionAhrsSetSettings+0x110>)
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	e01d      	b.n	8001a16 <FusionAhrsSetSettings+0xca>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80019e0:	eeb0 0a67 	vmov.f32	s0, s15
 80019e4:	f7ff fa8a 	bl	8000efc <FusionDegreesToRadians>
 80019e8:	eef0 7a40 	vmov.f32	s15, s0
 80019ec:	eeb0 0a67 	vmov.f32	s0, s15
 80019f0:	f00b f82c 	bl	800ca4c <sinf>
 80019f4:	eef0 7a40 	vmov.f32	s15, s0
 80019f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a00:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a04:	eeb0 0a67 	vmov.f32	s0, s15
 8001a08:	f00b f894 	bl	800cb34 <powf>
 8001a0c:	eef0 7a40 	vmov.f32	s15, s0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60da      	str	r2, [r3, #12]
    if (ahrs->initialising == false) {
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <FusionAhrsSetSettings+0xea>
        ahrs->rampedGain = ahrs->settings.gain;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a44:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	7f7fffff 	.word	0x7f7fffff

08001a60 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b0bf      	sub	sp, #252	; 0xfc
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001a68:	eeb0 5a61 	vmov.f32	s10, s3
 8001a6c:	eef0 5a42 	vmov.f32	s11, s4
 8001a70:	eeb0 6a62 	vmov.f32	s12, s5
 8001a74:	eef0 6a43 	vmov.f32	s13, s6
 8001a78:	eeb0 7a63 	vmov.f32	s14, s7
 8001a7c:	eef0 7a44 	vmov.f32	s15, s8
 8001a80:	edc7 4a01 	vstr	s9, [r7, #4]
 8001a84:	ed87 0a08 	vstr	s0, [r7, #32]
 8001a88:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8001a8c:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8001a90:	ed87 5a05 	vstr	s10, [r7, #20]
 8001a94:	edc7 5a06 	vstr	s11, [r7, #24]
 8001a98:	ed87 6a07 	vstr	s12, [r7, #28]
 8001a9c:	edc7 6a02 	vstr	s13, [r7, #8]
 8001aa0:	ed87 7a03 	vstr	s14, [r7, #12]
 8001aa4:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	3320      	adds	r3, #32
 8001aac:	f107 0214 	add.w	r2, r7, #20
 8001ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d025      	beq.n	8001b0c <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8001ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001acc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ada:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        if (ahrs->rampedGain < ahrs->settings.gain) {
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	d50b      	bpl.n	8001b0c <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
            ahrs->initialising = false;
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            ahrs->accelerationRejectionTimeout = false;
 8001b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector halfGravity = {
 8001b30:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            .axis.y = Q.y * Q.z + Q.w * Q.x,
 8001b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b36:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b46:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b54:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector halfGravity = {
 8001b58:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b70:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	edd3 6a07 	vldr	s13, [r3, #28]
 8001b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector halfGravity = {
 8001b88:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    }; // third column of transposed rotation matrix scaled by 0.5

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    if (FusionVectorIsZero(accelerometer) == false) {
 8001bac:	edd7 6a05 	vldr	s13, [r7, #20]
 8001bb0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bb8:	eeb0 0a66 	vmov.f32	s0, s13
 8001bbc:	eef0 0a47 	vmov.f32	s1, s14
 8001bc0:	eeb0 1a67 	vmov.f32	s2, s15
 8001bc4:	f7ff f9de 	bl	8000f84 <FusionVectorIsZero>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f083 0301 	eor.w	r3, r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 809b 	beq.w	8001d0c <FusionAhrsUpdate+0x2ac>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d918      	bls.n	8001c14 <FusionAhrsUpdate+0x1b4>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001be8:	3310      	adds	r3, #16
 8001bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8001bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bf2:	f7ff fe4d 	bl	8001890 <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	f103 0410 	add.w	r4, r3, #16
 8001bfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	2200      	movs	r2, #0
 8001c0a:	655a      	str	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimeout = true;
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8001c14:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c18:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c20:	eeb0 0a66 	vmov.f32	s0, s13
 8001c24:	eef0 0a47 	vmov.f32	s1, s14
 8001c28:	eeb0 1a67 	vmov.f32	s2, s15
 8001c2c:	f7ff fb8a 	bl	8001344 <FusionVectorNormalise>
 8001c30:	eef0 6a40 	vmov.f32	s13, s0
 8001c34:	eeb0 7a60 	vmov.f32	s14, s1
 8001c38:	eef0 7a41 	vmov.f32	s15, s2
 8001c3c:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8001c40:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8001c44:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8001c48:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001c4a:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8001c4e:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8001c52:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8001c56:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8001c5a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8001c5e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001c62:	eef0 1a45 	vmov.f32	s3, s10
 8001c66:	eeb0 2a65 	vmov.f32	s4, s11
 8001c6a:	eef0 2a46 	vmov.f32	s5, s12
 8001c6e:	eeb0 0a66 	vmov.f32	s0, s13
 8001c72:	eef0 0a47 	vmov.f32	s1, s14
 8001c76:	eeb0 1a67 	vmov.f32	s2, s15
 8001c7a:	f7ff fab3 	bl	80011e4 <FusionVectorCrossProduct>
 8001c7e:	eef0 6a40 	vmov.f32	s13, s0
 8001c82:	eeb0 7a60 	vmov.f32	s14, s1
 8001c86:	eef0 7a41 	vmov.f32	s15, s2
 8001c8a:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
 8001c8e:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
 8001c92:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d118      	bne.n	8001cd2 <FusionAhrsUpdate+0x272>
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001ca6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001caa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001cae:	eeb0 0a66 	vmov.f32	s0, s13
 8001cb2:	eef0 0a47 	vmov.f32	s1, s14
 8001cb6:	eeb0 1a67 	vmov.f32	s2, s15
 8001cba:	f7ff faf9 	bl	80012b0 <FusionVectorMagnitudeSquared>
 8001cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	d817      	bhi.n	8001d02 <FusionAhrsUpdate+0x2a2>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8001cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cd8:	3238      	adds	r2, #56	; 0x38
 8001cda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d901      	bls.n	8001cf8 <FusionAhrsUpdate+0x298>
 8001cf4:	230a      	movs	r3, #10
 8001cf6:	e000      	b.n	8001cfa <FusionAhrsUpdate+0x29a>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54
 8001d00:	e004      	b.n	8001d0c <FusionAhrsUpdate+0x2ac>
        } else {
            ahrs->accelerationRejectionTimer++;
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	673b      	str	r3, [r7, #112]	; 0x70
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	677b      	str	r3, [r7, #116]	; 0x74
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8001d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    if (FusionVectorIsZero(magnetometer) == false) {
 8001d26:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d32:	eeb0 0a66 	vmov.f32	s0, s13
 8001d36:	eef0 0a47 	vmov.f32	s1, s14
 8001d3a:	eeb0 1a67 	vmov.f32	s2, s15
 8001d3e:	f7ff f921 	bl	8000f84 <FusionVectorIsZero>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8114 	beq.w	8001f78 <FusionAhrsUpdate+0x518>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d927      	bls.n	8001db4 <FusionAhrsUpdate+0x354>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 8001d64:	ed97 5a02 	vldr	s10, [r7, #8]
 8001d68:	edd7 5a03 	vldr	s11, [r7, #12]
 8001d6c:	ed97 6a04 	vldr	s12, [r7, #16]
 8001d70:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8001d74:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001d78:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001d7c:	eef0 1a45 	vmov.f32	s3, s10
 8001d80:	eeb0 2a65 	vmov.f32	s4, s11
 8001d84:	eef0 2a46 	vmov.f32	s5, s12
 8001d88:	eeb0 0a66 	vmov.f32	s0, s13
 8001d8c:	eef0 0a47 	vmov.f32	s1, s14
 8001d90:	eeb0 1a67 	vmov.f32	s2, s15
 8001d94:	f000 fdd9 	bl	800294a <FusionCompassCalculateHeading>
 8001d98:	eef0 7a40 	vmov.f32	s15, s0
 8001d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001da0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001da2:	f000 fb42 	bl	800242a <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	2200      	movs	r2, #0
 8001daa:	65da      	str	r2, [r3, #92]	; 0x5c
            ahrs->magneticRejectionTimeout = true;
 8001dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        }

        // Compute direction of west indicated by algorithm
        const FusionVector halfWest = {
                .axis.x = Q.x * Q.y + Q.w * Q.z,
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	edd3 6a04 	vldr	s13, [r3, #16]
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector halfWest = {
 8001dd8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	ed93 7a04 	vldr	s14, [r3, #16]
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001df0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	edd3 6a06 	vldr	s13, [r3, #24]
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e04:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector halfWest = {
 8001e08:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                .axis.z = Q.y * Q.z - Q.w * Q.x
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e14:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector halfWest = {
 8001e30:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        }; // second column of transposed rotation matrix scaled by 0.5

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfWest);
 8001e34:	ed97 5a02 	vldr	s10, [r7, #8]
 8001e38:	edd7 5a03 	vldr	s11, [r7, #12]
 8001e3c:	ed97 6a04 	vldr	s12, [r7, #16]
 8001e40:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8001e44:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001e48:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001e4c:	eef0 1a45 	vmov.f32	s3, s10
 8001e50:	eeb0 2a65 	vmov.f32	s4, s11
 8001e54:	eef0 2a46 	vmov.f32	s5, s12
 8001e58:	eeb0 0a66 	vmov.f32	s0, s13
 8001e5c:	eef0 0a47 	vmov.f32	s1, s14
 8001e60:	eeb0 1a67 	vmov.f32	s2, s15
 8001e64:	f7ff f9be 	bl	80011e4 <FusionVectorCrossProduct>
 8001e68:	eef0 6a40 	vmov.f32	s13, s0
 8001e6c:	eeb0 7a60 	vmov.f32	s14, s1
 8001e70:	eef0 7a41 	vmov.f32	s15, s2
 8001e74:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 8001e78:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8001e7c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8001e80:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001e84:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001e88:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001e8c:	eeb0 0a66 	vmov.f32	s0, s13
 8001e90:	eef0 0a47 	vmov.f32	s1, s14
 8001e94:	eeb0 1a67 	vmov.f32	s2, s15
 8001e98:	f7ff fa54 	bl	8001344 <FusionVectorNormalise>
 8001e9c:	eef0 6a40 	vmov.f32	s13, s0
 8001ea0:	eeb0 7a60 	vmov.f32	s14, s1
 8001ea4:	eef0 7a41 	vmov.f32	s15, s2
 8001ea8:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8001eac:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8001eb0:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8001eb4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001eb6:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8001eba:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8001ebe:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8001ec2:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8001ec6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8001eca:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001ece:	eef0 1a45 	vmov.f32	s3, s10
 8001ed2:	eeb0 2a65 	vmov.f32	s4, s11
 8001ed6:	eef0 2a46 	vmov.f32	s5, s12
 8001eda:	eeb0 0a66 	vmov.f32	s0, s13
 8001ede:	eef0 0a47 	vmov.f32	s1, s14
 8001ee2:	eeb0 1a67 	vmov.f32	s2, s15
 8001ee6:	f7ff f97d 	bl	80011e4 <FusionVectorCrossProduct>
 8001eea:	eef0 6a40 	vmov.f32	s13, s0
 8001eee:	eeb0 7a60 	vmov.f32	s14, s1
 8001ef2:	eef0 7a41 	vmov.f32	s15, s2
 8001ef6:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 8001efa:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 8001efe:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8001f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d118      	bne.n	8001f3e <FusionAhrsUpdate+0x4de>
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001f12:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001f16:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001f1a:	eeb0 0a66 	vmov.f32	s0, s13
 8001f1e:	eef0 0a47 	vmov.f32	s1, s14
 8001f22:	eeb0 1a67 	vmov.f32	s2, s15
 8001f26:	f7ff f9c3 	bl	80012b0 <FusionVectorMagnitudeSquared>
 8001f2a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	d817      	bhi.n	8001f6e <FusionAhrsUpdate+0x50e>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8001f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f44:	3244      	adds	r2, #68	; 0x44
 8001f46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 8001f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5c:	2b09      	cmp	r3, #9
 8001f5e:	d901      	bls.n	8001f64 <FusionAhrsUpdate+0x504>
 8001f60:	230a      	movs	r3, #10
 8001f62:	e000      	b.n	8001f66 <FusionAhrsUpdate+0x506>
 8001f64:	2300      	movs	r3, #0
 8001f66:	1ad2      	subs	r2, r2, r3
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f6c:	e004      	b.n	8001f78 <FusionAhrsUpdate+0x518>
        } else {
            ahrs->magneticRejectionTimer++;
 8001f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	65da      	str	r2, [r3, #92]	; 0x5c
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 8001f78:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001f7c:	f7fe ffbe 	bl	8000efc <FusionDegreesToRadians>
 8001f80:	eeb0 6a40 	vmov.f32	s12, s0
 8001f84:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f88:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f90:	eef0 1a46 	vmov.f32	s3, s12
 8001f94:	eeb0 0a66 	vmov.f32	s0, s13
 8001f98:	eef0 0a47 	vmov.f32	s1, s14
 8001f9c:	eeb0 1a67 	vmov.f32	s2, s15
 8001fa0:	f7ff f88e 	bl	80010c0 <FusionVectorMultiplyScalar>
 8001fa4:	eef0 6a40 	vmov.f32	s13, s0
 8001fa8:	eeb0 7a60 	vmov.f32	s14, s1
 8001fac:	eef0 7a41 	vmov.f32	s15, s2
 8001fb0:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 8001fb4:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 8001fb8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8001fbc:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8001fc0:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001fc4:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8001fc8:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001fcc:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001fd0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001fd4:	eef0 1a45 	vmov.f32	s3, s10
 8001fd8:	eeb0 2a65 	vmov.f32	s4, s11
 8001fdc:	eef0 2a46 	vmov.f32	s5, s12
 8001fe0:	eeb0 0a66 	vmov.f32	s0, s13
 8001fe4:	eef0 0a47 	vmov.f32	s1, s14
 8001fe8:	eeb0 1a67 	vmov.f32	s2, s15
 8001fec:	f7fe fffa 	bl	8000fe4 <FusionVectorAdd>
 8001ff0:	eef0 6a40 	vmov.f32	s13, s0
 8001ff4:	eeb0 7a60 	vmov.f32	s14, s1
 8001ff8:	eef0 7a41 	vmov.f32	s15, s2
 8001ffc:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002000:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 8002004:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 800200e:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002012:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002016:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800201a:	eef0 1a46 	vmov.f32	s3, s12
 800201e:	eeb0 0a66 	vmov.f32	s0, s13
 8002022:	eef0 0a47 	vmov.f32	s1, s14
 8002026:	eeb0 1a67 	vmov.f32	s2, s15
 800202a:	f7ff f849 	bl	80010c0 <FusionVectorMultiplyScalar>
 800202e:	eef0 6a40 	vmov.f32	s13, s0
 8002032:	eeb0 7a60 	vmov.f32	s14, s1
 8002036:	eef0 7a41 	vmov.f32	s15, s2
 800203a:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800203e:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002042:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8002046:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800204a:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800204e:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002052:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002056:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800205a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800205e:	eef0 1a45 	vmov.f32	s3, s10
 8002062:	eeb0 2a65 	vmov.f32	s4, s11
 8002066:	eef0 2a46 	vmov.f32	s5, s12
 800206a:	eeb0 0a66 	vmov.f32	s0, s13
 800206e:	eef0 0a47 	vmov.f32	s1, s14
 8002072:	eeb0 1a67 	vmov.f32	s2, s15
 8002076:	f7fe ffb5 	bl	8000fe4 <FusionVectorAdd>
 800207a:	eef0 6a40 	vmov.f32	s13, s0
 800207e:	eeb0 7a60 	vmov.f32	s14, s1
 8002082:	eef0 7a41 	vmov.f32	s15, s2
 8002086:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800208a:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800208e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002092:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002096:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800209a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800209e:	edd7 1a01 	vldr	s3, [r7, #4]
 80020a2:	eeb0 0a66 	vmov.f32	s0, s13
 80020a6:	eef0 0a47 	vmov.f32	s1, s14
 80020aa:	eeb0 1a67 	vmov.f32	s2, s15
 80020ae:	f7ff f807 	bl	80010c0 <FusionVectorMultiplyScalar>
 80020b2:	eef0 6a40 	vmov.f32	s13, s0
 80020b6:	eeb0 7a60 	vmov.f32	s14, s1
 80020ba:	eef0 7a41 	vmov.f32	s15, s2
 80020be:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 80020c2:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80020c6:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80020ca:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80020ce:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80020d2:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	ed93 6a04 	vldr	s12, [r3, #16]
 80020dc:	edd3 6a05 	vldr	s13, [r3, #20]
 80020e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80020e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80020e8:	eeb0 2a64 	vmov.f32	s4, s9
 80020ec:	eef0 2a45 	vmov.f32	s5, s10
 80020f0:	eeb0 3a65 	vmov.f32	s6, s11
 80020f4:	eeb0 0a46 	vmov.f32	s0, s12
 80020f8:	eef0 0a66 	vmov.f32	s1, s13
 80020fc:	eeb0 1a47 	vmov.f32	s2, s14
 8002100:	eef0 1a67 	vmov.f32	s3, s15
 8002104:	f7ff fa95 	bl	8001632 <FusionQuaternionMultiplyVector>
 8002108:	eeb0 6a40 	vmov.f32	s12, s0
 800210c:	eef0 6a60 	vmov.f32	s13, s1
 8002110:	eeb0 7a41 	vmov.f32	s14, s2
 8002114:	eef0 7a61 	vmov.f32	s15, s3
 8002118:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800211c:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002120:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8002124:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8002128:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800212a:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800212e:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002132:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8002136:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	ed93 6a04 	vldr	s12, [r3, #16]
 8002140:	edd3 6a05 	vldr	s13, [r3, #20]
 8002144:	ed93 7a06 	vldr	s14, [r3, #24]
 8002148:	edd3 7a07 	vldr	s15, [r3, #28]
 800214c:	eeb0 2a44 	vmov.f32	s4, s8
 8002150:	eef0 2a64 	vmov.f32	s5, s9
 8002154:	eeb0 3a45 	vmov.f32	s6, s10
 8002158:	eef0 3a65 	vmov.f32	s7, s11
 800215c:	eeb0 0a46 	vmov.f32	s0, s12
 8002160:	eef0 0a66 	vmov.f32	s1, s13
 8002164:	eeb0 1a47 	vmov.f32	s2, s14
 8002168:	eef0 1a67 	vmov.f32	s3, s15
 800216c:	f7ff f93d 	bl	80013ea <FusionQuaternionAdd>
 8002170:	eeb0 6a40 	vmov.f32	s12, s0
 8002174:	eef0 6a60 	vmov.f32	s13, s1
 8002178:	eeb0 7a41 	vmov.f32	s14, s2
 800217c:	eef0 7a61 	vmov.f32	s15, s3
 8002180:	ed84 6a04 	vstr	s12, [r4, #16]
 8002184:	edc4 6a05 	vstr	s13, [r4, #20]
 8002188:	ed84 7a06 	vstr	s14, [r4, #24]
 800218c:	edc4 7a07 	vstr	s15, [r4, #28]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002190:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	ed93 6a04 	vldr	s12, [r3, #16]
 8002198:	edd3 6a05 	vldr	s13, [r3, #20]
 800219c:	ed93 7a06 	vldr	s14, [r3, #24]
 80021a0:	edd3 7a07 	vldr	s15, [r3, #28]
 80021a4:	eeb0 0a46 	vmov.f32	s0, s12
 80021a8:	eef0 0a66 	vmov.f32	s1, s13
 80021ac:	eeb0 1a47 	vmov.f32	s2, s14
 80021b0:	eef0 1a67 	vmov.f32	s3, s15
 80021b4:	f7ff fadd 	bl	8001772 <FusionQuaternionNormalise>
 80021b8:	eeb0 6a40 	vmov.f32	s12, s0
 80021bc:	eef0 6a60 	vmov.f32	s13, s1
 80021c0:	eeb0 7a41 	vmov.f32	s14, s2
 80021c4:	eef0 7a61 	vmov.f32	s15, s3
 80021c8:	ed84 6a04 	vstr	s12, [r4, #16]
 80021cc:	edc4 6a05 	vstr	s13, [r4, #20]
 80021d0:	ed84 7a06 	vstr	s14, [r4, #24]
 80021d4:	edc4 7a07 	vstr	s15, [r4, #28]
#undef Q
}
 80021d8:	bf00      	nop
 80021da:	37fc      	adds	r7, #252	; 0xfc
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}

080021e0 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f107 0418 	add.w	r4, r7, #24
 80021ee:	3310      	adds	r3, #16
 80021f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021f6:	69b8      	ldr	r0, [r7, #24]
 80021f8:	69f9      	ldr	r1, [r7, #28]
 80021fa:	6a3a      	ldr	r2, [r7, #32]
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	ee06 0a10 	vmov	s12, r0
 8002202:	ee06 1a90 	vmov	s13, r1
 8002206:	ee07 2a10 	vmov	s14, r2
 800220a:	ee07 3a90 	vmov	s15, r3
}
 800220e:	eeb0 0a46 	vmov.f32	s0, s12
 8002212:	eef0 0a66 	vmov.f32	s1, s13
 8002216:	eeb0 1a47 	vmov.f32	s2, s14
 800221a:	eef0 1a67 	vmov.f32	s3, s15
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bc90      	pop	{r4, r7}
 8002224:	4770      	bx	lr

08002226 <FusionAhrsGetEarthAcceleration>:
 * @brief Returns the Earth acceleration measurement equal to accelerometer
 * measurement in the Earth coordinate frame with the 1 g of gravity removed.
 * @param ahrs AHRS algorithm structure.
 * @return Earth acceleration measurement in g.
 */
FusionVector FusionAhrsGetEarthAcceleration(const FusionAhrs *const ahrs) {
 8002226:	b480      	push	{r7}
 8002228:	b095      	sub	sp, #84	; 0x54
 800222a:	af00      	add	r7, sp, #0
 800222c:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
#define A ahrs->accelerometer.axis
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	ed93 7a04 	vldr	s14, [r3, #16]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	edd3 7a04 	vldr	s15, [r3, #16]
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqx = Q.w * Q.x;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	ed93 7a04 	vldr	s14, [r3, #16]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	edd3 7a05 	vldr	s15, [r3, #20]
 800224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002252:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qwqy = Q.w * Q.y;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	ed93 7a04 	vldr	s14, [r3, #16]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qwqz = Q.w * Q.z;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	edd3 7a07 	vldr	s15, [r3, #28]
 8002276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qxqy = Q.x * Q.y;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	ed93 7a05 	vldr	s14, [r3, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	edd3 7a06 	vldr	s15, [r3, #24]
 800228a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const float qxqz = Q.x * Q.z;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	ed93 7a05 	vldr	s14, [r3, #20]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	edd3 7a07 	vldr	s15, [r3, #28]
 800229e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    const float qyqz = Q.y * Q.z;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	ed93 7a06 	vldr	s14, [r3, #24]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	edd3 7a07 	vldr	s15, [r3, #28]
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    const FusionVector earthAcceleration = {
            .axis.x = 2.0f * ((qwqw - 0.5f + Q.x * Q.x) * A.x + (qxqy - qwqz) * A.y + (qxqz + qwqy) * A.z),
 80022ba:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80022be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	edd3 6a05 	vldr	s13, [r3, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80022d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80022e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80022e8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80022ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022fe:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002302:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002306:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002318:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector earthAcceleration = {
 800231c:	edc7 7a07 	vstr	s15, [r7, #28]
            .axis.y = 2.0f * ((qxqy + qwqz) * A.x + (qwqw - 0.5f + Q.y * Q.y) * A.y + (qyqz - qwqx) * A.z),
 8002320:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002324:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002336:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800233a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800233e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	ed93 6a06 	vldr	s12, [r3, #24]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	edd3 7a06 	vldr	s15, [r3, #24]
 800234e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002352:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800235c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002364:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002368:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800236c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector earthAcceleration = {
 8002382:	edc7 7a08 	vstr	s15, [r7, #32]
            .axis.z = (2.0f * ((qxqz - qwqy) * A.x + (qyqz + qwqx) * A.y + (qwqw - 0.5f + Q.z * Q.z) * A.z)) - 1.0f,
 8002386:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800238a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800238e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	edd3 7a08 	vldr	s15, [r3, #32]
 8002398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80023a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80023a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80023ba:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80023be:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	ed93 6a07 	vldr	s12, [r3, #28]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80023ce:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80023dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
    const FusionVector earthAcceleration = {
 80023f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }; // rotation matrix multiplied with the accelerometer, with 1 g subtracted
    return earthAcceleration;
 80023f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f8:	f107 021c 	add.w	r2, r7, #28
 80023fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80023fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	ee06 1a90 	vmov	s13, r1
 800240c:	ee07 2a10 	vmov	s14, r2
 8002410:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef A
}
 8002414:	eeb0 0a66 	vmov.f32	s0, s13
 8002418:	eef0 0a47 	vmov.f32	s1, s14
 800241c:	eeb0 1a67 	vmov.f32	s2, s15
 8002420:	3754      	adds	r7, #84	; 0x54
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 800242a:	b590      	push	{r4, r7, lr}
 800242c:	b089      	sub	sp, #36	; 0x24
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	ed93 7a04 	vldr	s14, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	edd3 6a05 	vldr	s13, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002456:	ee37 6a27 	vadd.f32	s12, s14, s15
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	edd3 7a06 	vldr	s15, [r3, #24]
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800246e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	edd3 6a07 	vldr	s13, [r3, #28]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	edd3 7a07 	vldr	s15, [r3, #28]
 800247e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002486:	eef0 0a67 	vmov.f32	s1, s15
 800248a:	eeb0 0a46 	vmov.f32	s0, s12
 800248e:	f00a fb4f 	bl	800cb30 <atan2f>
 8002492:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002496:	ed97 0a00 	vldr	s0, [r7]
 800249a:	f7fe fd2f 	bl	8000efc <FusionDegreesToRadians>
 800249e:	eeb0 7a40 	vmov.f32	s14, s0
 80024a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80024a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b2:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {
            .element.w = cosf(halfYawMinusHeading),
 80024b6:	ed97 0a06 	vldr	s0, [r7, #24]
 80024ba:	f00a fa83 	bl	800c9c4 <cosf>
 80024be:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {
 80024c2:	edc7 7a02 	vstr	s15, [r7, #8]
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
            .element.x = 0.0f,
            .element.y = 0.0f,
            .element.z = -1.0f * sinf(halfYawMinusHeading),
 80024d2:	ed97 0a06 	vldr	s0, [r7, #24]
 80024d6:	f00a fab9 	bl	800ca4c <sinf>
 80024da:	eef0 7a40 	vmov.f32	s15, s0
 80024de:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {
 80024e2:	edc7 7a05 	vstr	s15, [r7, #20]
    };
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 80024e6:	687c      	ldr	r4, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	ed93 4a04 	vldr	s8, [r3, #16]
 80024ee:	edd3 4a05 	vldr	s9, [r3, #20]
 80024f2:	ed93 5a06 	vldr	s10, [r3, #24]
 80024f6:	edd3 5a07 	vldr	s11, [r3, #28]
 80024fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fe:	edd7 6a03 	vldr	s13, [r7, #12]
 8002502:	ed97 7a04 	vldr	s14, [r7, #16]
 8002506:	edd7 7a05 	vldr	s15, [r7, #20]
 800250a:	eeb0 2a44 	vmov.f32	s4, s8
 800250e:	eef0 2a64 	vmov.f32	s5, s9
 8002512:	eeb0 3a45 	vmov.f32	s6, s10
 8002516:	eef0 3a65 	vmov.f32	s7, s11
 800251a:	eeb0 0a46 	vmov.f32	s0, s12
 800251e:	eef0 0a66 	vmov.f32	s1, s13
 8002522:	eeb0 1a47 	vmov.f32	s2, s14
 8002526:	eef0 1a67 	vmov.f32	s3, s15
 800252a:	f7fe ffc0 	bl	80014ae <FusionQuaternionMultiply>
 800252e:	eeb0 6a40 	vmov.f32	s12, s0
 8002532:	eef0 6a60 	vmov.f32	s13, s1
 8002536:	eeb0 7a41 	vmov.f32	s14, s2
 800253a:	eef0 7a61 	vmov.f32	s15, s3
 800253e:	ed84 6a04 	vstr	s12, [r4, #16]
 8002542:	edc4 6a05 	vstr	s13, [r4, #20]
 8002546:	ed84 7a06 	vstr	s14, [r4, #24]
 800254a:	edc4 7a07 	vstr	s15, [r4, #28]
#undef Q
}
 800254e:	bf00      	nop
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd90      	pop	{r4, r7, pc}
	...

08002558 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002562:	edd7 7a01 	vldr	s15, [r7, #4]
 8002566:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800257c <FusionRadiansToDegrees+0x24>
 800256a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800256e:	eeb0 0a67 	vmov.f32	s0, s15
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	42652ee0 	.word	0x42652ee0

08002580 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	105a      	asrs	r2, r3, #1
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <FusionFastInverseSqrt+0x54>)
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8002598:	ed97 7a03 	vldr	s14, [r7, #12]
 800259c:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80025d8 <FusionFastInverseSqrt+0x58>
 80025a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	eddf 6a08 	vldr	s13, [pc, #32]	; 80025dc <FusionFastInverseSqrt+0x5c>
 80025bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025c0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80025c4:	eeb0 0a67 	vmov.f32	s0, s15
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	5f1f1412 	.word	0x5f1f1412
 80025d8:	3f36d312 	.word	0x3f36d312
 80025dc:	3fd851ff 	.word	0x3fd851ff

080025e0 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	eef0 6a40 	vmov.f32	s13, s0
 80025ea:	eeb0 7a60 	vmov.f32	s14, s1
 80025ee:	eef0 7a41 	vmov.f32	s15, s2
 80025f2:	edc7 6a01 	vstr	s13, [r7, #4]
 80025f6:	ed87 7a02 	vstr	s14, [r7, #8]
 80025fa:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 80025fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002602:	edd7 7a02 	vldr	s15, [r7, #8]
 8002606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260a:	edd7 7a03 	vldr	s15, [r7, #12]
 800260e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002612:	eeb0 0a67 	vmov.f32	s0, s15
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8002620:	b480      	push	{r7}
 8002622:	b08f      	sub	sp, #60	; 0x3c
 8002624:	af00      	add	r7, sp, #0
 8002626:	eef0 6a40 	vmov.f32	s13, s0
 800262a:	eeb0 7a60 	vmov.f32	s14, s1
 800262e:	eef0 7a41 	vmov.f32	s15, s2
 8002632:	edc7 1a04 	vstr	s3, [r7, #16]
 8002636:	edc7 6a05 	vstr	s13, [r7, #20]
 800263a:	ed87 7a06 	vstr	s14, [r7, #24]
 800263e:	edc7 7a07 	vstr	s15, [r7, #28]
    result.axis.x = vector.axis.x * scalar;
 8002642:	ed97 7a05 	vldr	s14, [r7, #20]
 8002646:	edd7 7a04 	vldr	s15, [r7, #16]
 800264a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264e:	edc7 7a08 	vstr	s15, [r7, #32]
    result.axis.y = vector.axis.y * scalar;
 8002652:	ed97 7a06 	vldr	s14, [r7, #24]
 8002656:	edd7 7a04 	vldr	s15, [r7, #16]
 800265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.z = vector.axis.z * scalar;
 8002662:	ed97 7a07 	vldr	s14, [r7, #28]
 8002666:	edd7 7a04 	vldr	s15, [r7, #16]
 800266a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8002672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002676:	f107 0220 	add.w	r2, r7, #32
 800267a:	ca07      	ldmia	r2, {r0, r1, r2}
 800267c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	ee06 1a90 	vmov	s13, r1
 800268a:	ee07 2a10 	vmov	s14, r2
 800268e:	ee07 3a90 	vmov	s15, r3
}
 8002692:	eeb0 0a66 	vmov.f32	s0, s13
 8002696:	eef0 0a47 	vmov.f32	s1, s14
 800269a:	eeb0 1a67 	vmov.f32	s2, s15
 800269e:	373c      	adds	r7, #60	; 0x3c
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80026a8:	b480      	push	{r7}
 80026aa:	b091      	sub	sp, #68	; 0x44
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	eeb0 5a40 	vmov.f32	s10, s0
 80026b2:	eef0 5a60 	vmov.f32	s11, s1
 80026b6:	eeb0 6a41 	vmov.f32	s12, s2
 80026ba:	eef0 6a61 	vmov.f32	s13, s3
 80026be:	eeb0 7a42 	vmov.f32	s14, s4
 80026c2:	eef0 7a62 	vmov.f32	s15, s5
 80026c6:	ed87 5a07 	vstr	s10, [r7, #28]
 80026ca:	edc7 5a08 	vstr	s11, [r7, #32]
 80026ce:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80026d2:	edc7 6a04 	vstr	s13, [r7, #16]
 80026d6:	ed87 7a05 	vstr	s14, [r7, #20]
 80026da:	edc7 7a06 	vstr	s15, [r7, #24]
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 80026de:	ed97 7a07 	vldr	s14, [r7, #28]
 80026e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80026e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 80026ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80026f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 80026fe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002702:	edd7 7a06 	vldr	s15, [r7, #24]
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800270e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002712:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002716:	ca07      	ldmia	r2, {r0, r1, r2}
 8002718:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800271c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800271e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002722:	ee06 1a90 	vmov	s13, r1
 8002726:	ee07 2a10 	vmov	s14, r2
 800272a:	ee07 3a90 	vmov	s15, r3
}
 800272e:	eeb0 0a66 	vmov.f32	s0, s13
 8002732:	eef0 0a47 	vmov.f32	s1, s14
 8002736:	eeb0 1a67 	vmov.f32	s2, s15
 800273a:	3744      	adds	r7, #68	; 0x44
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002744:	b480      	push	{r7}
 8002746:	b091      	sub	sp, #68	; 0x44
 8002748:	af00      	add	r7, sp, #0
 800274a:	eeb0 5a40 	vmov.f32	s10, s0
 800274e:	eef0 5a60 	vmov.f32	s11, s1
 8002752:	eeb0 6a41 	vmov.f32	s12, s2
 8002756:	eef0 6a61 	vmov.f32	s13, s3
 800275a:	eeb0 7a42 	vmov.f32	s14, s4
 800275e:	eef0 7a62 	vmov.f32	s15, s5
 8002762:	ed87 5a07 	vstr	s10, [r7, #28]
 8002766:	edc7 5a08 	vstr	s11, [r7, #32]
 800276a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800276e:	edc7 6a04 	vstr	s13, [r7, #16]
 8002772:	ed87 7a05 	vstr	s14, [r7, #20]
 8002776:	edc7 7a06 	vstr	s15, [r7, #24]
    result.axis.x = A.y * B.z - A.z * B.y;
 800277a:	ed97 7a08 	vldr	s14, [r7, #32]
 800277e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002782:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002786:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800278a:	edd7 7a05 	vldr	s15, [r7, #20]
 800278e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.y = A.z * B.x - A.x * B.z;
 800279a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800279e:	edd7 7a04 	vldr	s15, [r7, #16]
 80027a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80027aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80027ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    result.axis.z = A.x * B.y - A.y * B.x;
 80027ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80027be:	edd7 7a05 	vldr	s15, [r7, #20]
 80027c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c6:	edd7 6a08 	vldr	s13, [r7, #32]
 80027ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80027da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80027e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ee:	ee06 1a90 	vmov	s13, r1
 80027f2:	ee07 2a10 	vmov	s14, r2
 80027f6:	ee07 3a90 	vmov	s15, r3
}
 80027fa:	eeb0 0a66 	vmov.f32	s0, s13
 80027fe:	eef0 0a47 	vmov.f32	s1, s14
 8002802:	eeb0 1a67 	vmov.f32	s2, s15
 8002806:	3744      	adds	r7, #68	; 0x44
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	eef0 6a40 	vmov.f32	s13, s0
 800281a:	eeb0 7a60 	vmov.f32	s14, s1
 800281e:	eef0 7a41 	vmov.f32	s15, s2
 8002822:	edc7 6a01 	vstr	s13, [r7, #4]
 8002826:	ed87 7a02 	vstr	s14, [r7, #8]
 800282a:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800282e:	ed97 5a01 	vldr	s10, [r7, #4]
 8002832:	edd7 5a02 	vldr	s11, [r7, #8]
 8002836:	ed97 6a03 	vldr	s12, [r7, #12]
 800283a:	edd7 6a01 	vldr	s13, [r7, #4]
 800283e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002842:	edd7 7a03 	vldr	s15, [r7, #12]
 8002846:	eef0 1a45 	vmov.f32	s3, s10
 800284a:	eeb0 2a65 	vmov.f32	s4, s11
 800284e:	eef0 2a46 	vmov.f32	s5, s12
 8002852:	eeb0 0a66 	vmov.f32	s0, s13
 8002856:	eef0 0a47 	vmov.f32	s1, s14
 800285a:	eeb0 1a67 	vmov.f32	s2, s15
 800285e:	f7ff ff23 	bl	80026a8 <FusionVectorHadamardProduct>
 8002862:	eef0 6a40 	vmov.f32	s13, s0
 8002866:	eeb0 7a60 	vmov.f32	s14, s1
 800286a:	eef0 7a41 	vmov.f32	s15, s2
 800286e:	edc7 6a05 	vstr	s13, [r7, #20]
 8002872:	ed87 7a06 	vstr	s14, [r7, #24]
 8002876:	edc7 7a07 	vstr	s15, [r7, #28]
 800287a:	edd7 6a05 	vldr	s13, [r7, #20]
 800287e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002882:	edd7 7a07 	vldr	s15, [r7, #28]
 8002886:	eeb0 0a66 	vmov.f32	s0, s13
 800288a:	eef0 0a47 	vmov.f32	s1, s14
 800288e:	eeb0 1a67 	vmov.f32	s2, s15
 8002892:	f7ff fea5 	bl	80025e0 <FusionVectorSum>
 8002896:	eef0 7a40 	vmov.f32	s15, s0
}
 800289a:	eeb0 0a67 	vmov.f32	s0, s15
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	; 0x30
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	eef0 6a40 	vmov.f32	s13, s0
 80028ae:	eeb0 7a60 	vmov.f32	s14, s1
 80028b2:	eef0 7a41 	vmov.f32	s15, s2
 80028b6:	edc7 6a05 	vstr	s13, [r7, #20]
 80028ba:	ed87 7a06 	vstr	s14, [r7, #24]
 80028be:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80028c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80028c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80028ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ce:	eeb0 0a66 	vmov.f32	s0, s13
 80028d2:	eef0 0a47 	vmov.f32	s1, s14
 80028d6:	eeb0 1a67 	vmov.f32	s2, s15
 80028da:	f7ff ff99 	bl	8002810 <FusionVectorMagnitudeSquared>
 80028de:	eef0 7a40 	vmov.f32	s15, s0
 80028e2:	eeb0 0a67 	vmov.f32	s0, s15
 80028e6:	f7ff fe4b 	bl	8002580 <FusionFastInverseSqrt>
 80028ea:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80028ee:	edd7 6a05 	vldr	s13, [r7, #20]
 80028f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80028f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80028fa:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 80028fe:	eeb0 0a66 	vmov.f32	s0, s13
 8002902:	eef0 0a47 	vmov.f32	s1, s14
 8002906:	eeb0 1a67 	vmov.f32	s2, s15
 800290a:	f7ff fe89 	bl	8002620 <FusionVectorMultiplyScalar>
 800290e:	eef0 6a40 	vmov.f32	s13, s0
 8002912:	eeb0 7a60 	vmov.f32	s14, s1
 8002916:	eef0 7a41 	vmov.f32	s15, s2
 800291a:	edc7 6a08 	vstr	s13, [r7, #32]
 800291e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8002922:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8002926:	6a39      	ldr	r1, [r7, #32]
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	ee06 1a90 	vmov	s13, r1
 8002930:	ee07 2a10 	vmov	s14, r2
 8002934:	ee07 3a90 	vmov	s15, r3
}
 8002938:	eeb0 0a66 	vmov.f32	s0, s13
 800293c:	eef0 0a47 	vmov.f32	s1, s14
 8002940:	eeb0 1a67 	vmov.f32	s2, s15
 8002944:	3730      	adds	r7, #48	; 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <FusionCompassCalculateHeading>:
 * @brief Calculates the heading relative to magnetic north.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionVector accelerometer, const FusionVector magnetometer) {
 800294a:	b580      	push	{r7, lr}
 800294c:	b092      	sub	sp, #72	; 0x48
 800294e:	af00      	add	r7, sp, #0
 8002950:	eeb0 5a40 	vmov.f32	s10, s0
 8002954:	eef0 5a60 	vmov.f32	s11, s1
 8002958:	eeb0 6a41 	vmov.f32	s12, s2
 800295c:	eef0 6a61 	vmov.f32	s13, s3
 8002960:	eeb0 7a42 	vmov.f32	s14, s4
 8002964:	eef0 7a62 	vmov.f32	s15, s5
 8002968:	ed87 5a03 	vstr	s10, [r7, #12]
 800296c:	edc7 5a04 	vstr	s11, [r7, #16]
 8002970:	ed87 6a05 	vstr	s12, [r7, #20]
 8002974:	edc7 6a00 	vstr	s13, [r7]
 8002978:	ed87 7a01 	vstr	s14, [r7, #4]
 800297c:	edc7 7a02 	vstr	s15, [r7, #8]

    // Compute direction of magnetic west (Earth's y axis)
    const FusionVector magneticWest = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8002980:	ed97 5a00 	vldr	s10, [r7]
 8002984:	edd7 5a01 	vldr	s11, [r7, #4]
 8002988:	ed97 6a02 	vldr	s12, [r7, #8]
 800298c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002990:	ed97 7a04 	vldr	s14, [r7, #16]
 8002994:	edd7 7a05 	vldr	s15, [r7, #20]
 8002998:	eef0 1a45 	vmov.f32	s3, s10
 800299c:	eeb0 2a65 	vmov.f32	s4, s11
 80029a0:	eef0 2a46 	vmov.f32	s5, s12
 80029a4:	eeb0 0a66 	vmov.f32	s0, s13
 80029a8:	eef0 0a47 	vmov.f32	s1, s14
 80029ac:	eeb0 1a67 	vmov.f32	s2, s15
 80029b0:	f7ff fec8 	bl	8002744 <FusionVectorCrossProduct>
 80029b4:	eef0 6a40 	vmov.f32	s13, s0
 80029b8:	eeb0 7a60 	vmov.f32	s14, s1
 80029bc:	eef0 7a41 	vmov.f32	s15, s2
 80029c0:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 80029c4:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 80029c8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80029cc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80029d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80029d4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029d8:	eeb0 0a66 	vmov.f32	s0, s13
 80029dc:	eef0 0a47 	vmov.f32	s1, s14
 80029e0:	eeb0 1a67 	vmov.f32	s2, s15
 80029e4:	f7ff ff5e 	bl	80028a4 <FusionVectorNormalise>
 80029e8:	eef0 6a40 	vmov.f32	s13, s0
 80029ec:	eeb0 7a60 	vmov.f32	s14, s1
 80029f0:	eef0 7a41 	vmov.f32	s15, s2
 80029f4:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 80029f8:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80029fc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    // Compute direction of magnetic north (Earth's x axis)
    const FusionVector magneticNorth = FusionVectorNormalise(FusionVectorCrossProduct(magneticWest, accelerometer));
 8002a00:	ed97 5a03 	vldr	s10, [r7, #12]
 8002a04:	edd7 5a04 	vldr	s11, [r7, #16]
 8002a08:	ed97 6a05 	vldr	s12, [r7, #20]
 8002a0c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a14:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a18:	eef0 1a45 	vmov.f32	s3, s10
 8002a1c:	eeb0 2a65 	vmov.f32	s4, s11
 8002a20:	eef0 2a46 	vmov.f32	s5, s12
 8002a24:	eeb0 0a66 	vmov.f32	s0, s13
 8002a28:	eef0 0a47 	vmov.f32	s1, s14
 8002a2c:	eeb0 1a67 	vmov.f32	s2, s15
 8002a30:	f7ff fe88 	bl	8002744 <FusionVectorCrossProduct>
 8002a34:	eef0 6a40 	vmov.f32	s13, s0
 8002a38:	eeb0 7a60 	vmov.f32	s14, s1
 8002a3c:	eef0 7a41 	vmov.f32	s15, s2
 8002a40:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 8002a44:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8002a48:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8002a4c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002a50:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002a54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a58:	eeb0 0a66 	vmov.f32	s0, s13
 8002a5c:	eef0 0a47 	vmov.f32	s1, s14
 8002a60:	eeb0 1a67 	vmov.f32	s2, s15
 8002a64:	f7ff ff1e 	bl	80028a4 <FusionVectorNormalise>
 8002a68:	eef0 6a40 	vmov.f32	s13, s0
 8002a6c:	eeb0 7a60 	vmov.f32	s14, s1
 8002a70:	eef0 7a41 	vmov.f32	s15, s2
 8002a74:	edc7 6a06 	vstr	s13, [r7, #24]
 8002a78:	ed87 7a07 	vstr	s14, [r7, #28]
 8002a7c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Calculate angular heading relative to magnetic north
    return FusionRadiansToDegrees(atan2f(magneticWest.axis.x, magneticNorth.axis.x));
 8002a80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a84:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a88:	eef0 0a47 	vmov.f32	s1, s14
 8002a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a90:	f00a f84e 	bl	800cb30 <atan2f>
 8002a94:	eef0 7a40 	vmov.f32	s15, s0
 8002a98:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9c:	f7ff fd5c 	bl	8002558 <FusionRadiansToDegrees>
 8002aa0:	eef0 7a40 	vmov.f32	s15, s0
}
 8002aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa8:	3748      	adds	r7, #72	; 0x48
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8002aae:	b480      	push	{r7}
 8002ab0:	b091      	sub	sp, #68	; 0x44
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	eeb0 5a40 	vmov.f32	s10, s0
 8002ab8:	eef0 5a60 	vmov.f32	s11, s1
 8002abc:	eeb0 6a41 	vmov.f32	s12, s2
 8002ac0:	eef0 6a61 	vmov.f32	s13, s3
 8002ac4:	eeb0 7a42 	vmov.f32	s14, s4
 8002ac8:	eef0 7a62 	vmov.f32	s15, s5
 8002acc:	ed87 5a07 	vstr	s10, [r7, #28]
 8002ad0:	edc7 5a08 	vstr	s11, [r7, #32]
 8002ad4:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002ad8:	edc7 6a04 	vstr	s13, [r7, #16]
 8002adc:	ed87 7a05 	vstr	s14, [r7, #20]
 8002ae0:	edc7 7a06 	vstr	s15, [r7, #24]
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002ae4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ae8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002af4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b00:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002b04:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b10:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8002b14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b28:	ee06 1a90 	vmov	s13, r1
 8002b2c:	ee07 2a10 	vmov	s14, r2
 8002b30:	ee07 3a90 	vmov	s15, r3
}
 8002b34:	eeb0 0a66 	vmov.f32	s0, s13
 8002b38:	eef0 0a47 	vmov.f32	s1, s14
 8002b3c:	eeb0 1a67 	vmov.f32	s2, s15
 8002b40:	3744      	adds	r7, #68	; 0x44
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8002b4a:	b480      	push	{r7}
 8002b4c:	b091      	sub	sp, #68	; 0x44
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	eeb0 5a40 	vmov.f32	s10, s0
 8002b54:	eef0 5a60 	vmov.f32	s11, s1
 8002b58:	eeb0 6a41 	vmov.f32	s12, s2
 8002b5c:	eef0 6a61 	vmov.f32	s13, s3
 8002b60:	eeb0 7a42 	vmov.f32	s14, s4
 8002b64:	eef0 7a62 	vmov.f32	s15, s5
 8002b68:	ed87 5a07 	vstr	s10, [r7, #28]
 8002b6c:	edc7 5a08 	vstr	s11, [r7, #32]
 8002b70:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002b74:	edc7 6a04 	vstr	s13, [r7, #16]
 8002b78:	ed87 7a05 	vstr	s14, [r7, #20]
 8002b7c:	edc7 7a06 	vstr	s15, [r7, #24]
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002b80:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b84:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002b90:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b94:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002ba0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ba4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8002bb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc4:	ee06 1a90 	vmov	s13, r1
 8002bc8:	ee07 2a10 	vmov	s14, r2
 8002bcc:	ee07 3a90 	vmov	s15, r3
}
 8002bd0:	eeb0 0a66 	vmov.f32	s0, s13
 8002bd4:	eef0 0a47 	vmov.f32	s1, s14
 8002bd8:	eeb0 1a67 	vmov.f32	s2, s15
 8002bdc:	3744      	adds	r7, #68	; 0x44
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8002be6:	b480      	push	{r7}
 8002be8:	b08f      	sub	sp, #60	; 0x3c
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	eef0 6a40 	vmov.f32	s13, s0
 8002bf0:	eeb0 7a60 	vmov.f32	s14, s1
 8002bf4:	eef0 7a41 	vmov.f32	s15, s2
 8002bf8:	edc7 1a04 	vstr	s3, [r7, #16]
 8002bfc:	edc7 6a05 	vstr	s13, [r7, #20]
 8002c00:	ed87 7a06 	vstr	s14, [r7, #24]
 8002c04:	edc7 7a07 	vstr	s15, [r7, #28]
    result.axis.x = vector.axis.x * scalar;
 8002c08:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	edc7 7a08 	vstr	s15, [r7, #32]
    result.axis.y = vector.axis.y * scalar;
 8002c18:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.z = vector.axis.z * scalar;
 8002c28:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c34:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8002c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c3c:	f107 0220 	add.w	r2, r7, #32
 8002c40:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	ee06 1a90 	vmov	s13, r1
 8002c50:	ee07 2a10 	vmov	s14, r2
 8002c54:	ee07 3a90 	vmov	s15, r3
}
 8002c58:	eeb0 0a66 	vmov.f32	s0, s13
 8002c5c:	eef0 0a47 	vmov.f32	s1, s14
 8002c60:	eeb0 1a67 	vmov.f32	s2, s15
 8002c64:	373c      	adds	r7, #60	; 0x3c
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8002c6e:	b590      	push	{r4, r7, lr}
 8002c70:	b08f      	sub	sp, #60	; 0x3c
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	61f8      	str	r0, [r7, #28]
 8002c76:	eef0 6a40 	vmov.f32	s13, s0
 8002c7a:	eeb0 7a60 	vmov.f32	s14, s1
 8002c7e:	eef0 7a41 	vmov.f32	s15, s2
 8002c82:	edc7 6a04 	vstr	s13, [r7, #16]
 8002c86:	ed87 7a05 	vstr	s14, [r7, #20]
 8002c8a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	ed93 5a03 	vldr	s10, [r3, #12]
 8002c94:	edd3 5a04 	vldr	s11, [r3, #16]
 8002c98:	ed93 6a05 	vldr	s12, [r3, #20]
 8002c9c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002ca0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ca4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ca8:	eef0 1a45 	vmov.f32	s3, s10
 8002cac:	eeb0 2a65 	vmov.f32	s4, s11
 8002cb0:	eef0 2a46 	vmov.f32	s5, s12
 8002cb4:	eeb0 0a66 	vmov.f32	s0, s13
 8002cb8:	eef0 0a47 	vmov.f32	s1, s14
 8002cbc:	eeb0 1a67 	vmov.f32	s2, s15
 8002cc0:	f7ff ff43 	bl	8002b4a <FusionVectorSubtract>
 8002cc4:	eef0 6a40 	vmov.f32	s13, s0
 8002cc8:	eeb0 7a60 	vmov.f32	s14, s1
 8002ccc:	eef0 7a41 	vmov.f32	s15, s2
 8002cd0:	edc7 6a04 	vstr	s13, [r7, #16]
 8002cd4:	ed87 7a05 	vstr	s14, [r7, #20]
 8002cd8:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8002cdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce0:	eef0 7ae7 	vabs.f32	s15, s15
 8002ce4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	dc15      	bgt.n	8002d1e <FusionOffsetUpdate+0xb0>
 8002cf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf6:	eef0 7ae7 	vabs.f32	s15, s15
 8002cfa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	dc0a      	bgt.n	8002d1e <FusionOffsetUpdate+0xb0>
 8002d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d0c:	eef0 7ae7 	vabs.f32	s15, s15
 8002d10:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1c:	dd0a      	ble.n	8002d34 <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8002d24:	f107 0320 	add.w	r3, r7, #32
 8002d28:	f107 0210 	add.w	r2, r7, #16
 8002d2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d32:	e060      	b.n	8002df6 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d20c      	bcs.n	8002d5a <FusionOffsetUpdate+0xec>
        offset->timer++;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8002d4a:	f107 0320 	add.w	r3, r7, #32
 8002d4e:	f107 0210 	add.w	r2, r7, #16
 8002d52:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d58:	e04d      	b.n	8002df6 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	ed93 6a00 	vldr	s12, [r3]
 8002d60:	edd7 6a04 	vldr	s13, [r7, #16]
 8002d64:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d68:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d6c:	eef0 1a46 	vmov.f32	s3, s12
 8002d70:	eeb0 0a66 	vmov.f32	s0, s13
 8002d74:	eef0 0a47 	vmov.f32	s1, s14
 8002d78:	eeb0 1a67 	vmov.f32	s2, s15
 8002d7c:	f7ff ff33 	bl	8002be6 <FusionVectorMultiplyScalar>
 8002d80:	eef0 6a40 	vmov.f32	s13, s0
 8002d84:	eeb0 7a60 	vmov.f32	s14, s1
 8002d88:	eef0 7a41 	vmov.f32	s15, s2
 8002d8c:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8002d90:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8002d94:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8002d98:	69fc      	ldr	r4, [r7, #28]
 8002d9a:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8002d9e:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8002da2:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	edd3 6a03 	vldr	s13, [r3, #12]
 8002dac:	ed93 7a04 	vldr	s14, [r3, #16]
 8002db0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002db4:	eef0 1a45 	vmov.f32	s3, s10
 8002db8:	eeb0 2a65 	vmov.f32	s4, s11
 8002dbc:	eef0 2a46 	vmov.f32	s5, s12
 8002dc0:	eeb0 0a66 	vmov.f32	s0, s13
 8002dc4:	eef0 0a47 	vmov.f32	s1, s14
 8002dc8:	eeb0 1a67 	vmov.f32	s2, s15
 8002dcc:	f7ff fe6f 	bl	8002aae <FusionVectorAdd>
 8002dd0:	eef0 6a40 	vmov.f32	s13, s0
 8002dd4:	eeb0 7a60 	vmov.f32	s14, s1
 8002dd8:	eef0 7a41 	vmov.f32	s15, s2
 8002ddc:	edc4 6a03 	vstr	s13, [r4, #12]
 8002de0:	ed84 7a04 	vstr	s14, [r4, #16]
 8002de4:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8002de8:	f107 0320 	add.w	r3, r7, #32
 8002dec:	f107 0210 	add.w	r2, r7, #16
 8002df0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8002df6:	6a39      	ldr	r1, [r7, #32]
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	ee06 1a90 	vmov	s13, r1
 8002e00:	ee07 2a10 	vmov	s14, r2
 8002e04:	ee07 3a90 	vmov	s15, r3
 8002e08:	eeb0 0a66 	vmov.f32	s0, s13
 8002e0c:	eef0 0a47 	vmov.f32	s1, s14
 8002e10:	eeb0 1a67 	vmov.f32	s2, s15
 8002e14:	373c      	adds	r7, #60	; 0x3c
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd90      	pop	{r4, r7, pc}

08002e1a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e5a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002e70 <FusionRadiansToDegrees+0x24>
 8002e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e62:	eeb0 0a67 	vmov.f32	s0, s15
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	42652ee0 	.word	0x42652ee0

08002e74 <FusionAsin>:
static inline float FusionAsin(const float value) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8002e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8e:	d802      	bhi.n	8002e96 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8002e90:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002ec4 <FusionAsin+0x50>
 8002e94:	e011      	b.n	8002eba <FusionAsin+0x46>
    if (value >= 1.0f) {
 8002e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	db02      	blt.n	8002eae <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8002ea8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002ec8 <FusionAsin+0x54>
 8002eac:	e005      	b.n	8002eba <FusionAsin+0x46>
    return asinf(value);
 8002eae:	ed97 0a01 	vldr	s0, [r7, #4]
 8002eb2:	f009 fe11 	bl	800cad8 <asinf>
 8002eb6:	eef0 7a40 	vmov.f32	s15, s0
}
 8002eba:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	bfc90fdb 	.word	0xbfc90fdb
 8002ec8:	3fc90fdb 	.word	0x3fc90fdb

08002ecc <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8002ecc:	b480      	push	{r7}
 8002ece:	b091      	sub	sp, #68	; 0x44
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	eeb0 5a40 	vmov.f32	s10, s0
 8002ed6:	eef0 5a60 	vmov.f32	s11, s1
 8002eda:	eeb0 6a41 	vmov.f32	s12, s2
 8002ede:	eef0 6a61 	vmov.f32	s13, s3
 8002ee2:	eeb0 7a42 	vmov.f32	s14, s4
 8002ee6:	eef0 7a62 	vmov.f32	s15, s5
 8002eea:	ed87 5a07 	vstr	s10, [r7, #28]
 8002eee:	edc7 5a08 	vstr	s11, [r7, #32]
 8002ef2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002ef6:	edc7 6a04 	vstr	s13, [r7, #16]
 8002efa:	ed87 7a05 	vstr	s14, [r7, #20]
 8002efe:	edc7 7a06 	vstr	s15, [r7, #24]
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002f02:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f06:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f0e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002f12:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f1e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002f22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f26:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8002f32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f46:	ee06 1a90 	vmov	s13, r1
 8002f4a:	ee07 2a10 	vmov	s14, r2
 8002f4e:	ee07 3a90 	vmov	s15, r3
}
 8002f52:	eeb0 0a66 	vmov.f32	s0, s13
 8002f56:	eef0 0a47 	vmov.f32	s1, s14
 8002f5a:	eeb0 1a67 	vmov.f32	s2, s15
 8002f5e:	3744      	adds	r7, #68	; 0x44
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b091      	sub	sp, #68	; 0x44
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	eeb0 5a40 	vmov.f32	s10, s0
 8002f72:	eef0 5a60 	vmov.f32	s11, s1
 8002f76:	eeb0 6a41 	vmov.f32	s12, s2
 8002f7a:	eef0 6a61 	vmov.f32	s13, s3
 8002f7e:	eeb0 7a42 	vmov.f32	s14, s4
 8002f82:	eef0 7a62 	vmov.f32	s15, s5
 8002f86:	ed87 5a07 	vstr	s10, [r7, #28]
 8002f8a:	edc7 5a08 	vstr	s11, [r7, #32]
 8002f8e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002f92:	edc7 6a04 	vstr	s13, [r7, #16]
 8002f96:	ed87 7a05 	vstr	s14, [r7, #20]
 8002f9a:	edc7 7a06 	vstr	s15, [r7, #24]
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8002f9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002faa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8002fae:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8002fbe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002fc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8002fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002fdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe2:	ee06 1a90 	vmov	s13, r1
 8002fe6:	ee07 2a10 	vmov	s14, r2
 8002fea:	ee07 3a90 	vmov	s15, r3
}
 8002fee:	eeb0 0a66 	vmov.f32	s0, s13
 8002ff2:	eef0 0a47 	vmov.f32	s1, s14
 8002ff6:	eeb0 1a67 	vmov.f32	s2, s15
 8002ffa:	3744      	adds	r7, #68	; 0x44
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8003004:	b084      	sub	sp, #16
 8003006:	b480      	push	{r7}
 8003008:	b08f      	sub	sp, #60	; 0x3c
 800300a:	af00      	add	r7, sp, #0
 800300c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8003010:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8003014:	eef0 6a40 	vmov.f32	s13, s0
 8003018:	eeb0 7a60 	vmov.f32	s14, s1
 800301c:	eef0 7a41 	vmov.f32	s15, s2
 8003020:	edc7 6a05 	vstr	s13, [r7, #20]
 8003024:	ed87 7a06 	vstr	s14, [r7, #24]
 8003028:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    FusionVector result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800302c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003030:	edd7 7a05 	vldr	s15, [r7, #20]
 8003034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003038:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800303c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003048:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800304c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003058:	edc7 7a08 	vstr	s15, [r7, #32]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800305c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003060:	edd7 7a05 	vldr	s15, [r7, #20]
 8003064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003068:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800306c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003078:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800307c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003088:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800308c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003090:	edd7 7a05 	vldr	s15, [r7, #20]
 8003094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003098:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800309c:	edd7 7a06 	vldr	s15, [r7, #24]
 80030a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80030ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80030b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80030bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030c0:	f107 0220 	add.w	r2, r7, #32
 80030c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80030c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d0:	ee06 1a90 	vmov	s13, r1
 80030d4:	ee07 2a10 	vmov	s14, r2
 80030d8:	ee07 3a90 	vmov	s15, r3
#undef R
}
 80030dc:	eeb0 0a66 	vmov.f32	s0, s13
 80030e0:	eef0 0a47 	vmov.f32	s1, s14
 80030e4:	eeb0 1a67 	vmov.f32	s2, s15
 80030e8:	373c      	adds	r7, #60	; 0x3c
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	b004      	add	sp, #16
 80030f2:	4770      	bx	lr

080030f4 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b090      	sub	sp, #64	; 0x40
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	eeb0 6a40 	vmov.f32	s12, s0
 80030fe:	eef0 6a60 	vmov.f32	s13, s1
 8003102:	eeb0 7a41 	vmov.f32	s14, s2
 8003106:	eef0 7a61 	vmov.f32	s15, s3
 800310a:	ed87 6a04 	vstr	s12, [r7, #16]
 800310e:	edc7 6a05 	vstr	s13, [r7, #20]
 8003112:	ed87 7a06 	vstr	s14, [r7, #24]
 8003116:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 800311a:	ed97 7a06 	vldr	s14, [r7, #24]
 800311e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003126:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800312a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    FusionEuler euler;
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
 8003132:	ed97 7a04 	vldr	s14, [r7, #16]
 8003136:	edd7 7a05 	vldr	s15, [r7, #20]
 800313a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003142:	edd7 7a07 	vldr	s15, [r7, #28]
 8003146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800314e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003152:	edd7 7a05 	vldr	s15, [r7, #20]
 8003156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800315e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003162:	eef0 0a67 	vmov.f32	s1, s15
 8003166:	eeb0 0a66 	vmov.f32	s0, s13
 800316a:	f009 fce1 	bl	800cb30 <atan2f>
 800316e:	eef0 7a40 	vmov.f32	s15, s0
 8003172:	eeb0 0a67 	vmov.f32	s0, s15
 8003176:	f7ff fe69 	bl	8002e4c <FusionRadiansToDegrees>
 800317a:	eef0 7a40 	vmov.f32	s15, s0
 800317e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 8003182:	ed97 7a04 	vldr	s14, [r7, #16]
 8003186:	edd7 7a06 	vldr	s15, [r7, #24]
 800318a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800318e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003192:	edd7 7a05 	vldr	s15, [r7, #20]
 8003196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031a2:	eeb0 0a67 	vmov.f32	s0, s15
 80031a6:	f7ff fe65 	bl	8002e74 <FusionAsin>
 80031aa:	eef0 7a40 	vmov.f32	s15, s0
 80031ae:	eeb0 0a67 	vmov.f32	s0, s15
 80031b2:	f7ff fe4b 	bl	8002e4c <FusionRadiansToDegrees>
 80031b6:	eef0 7a40 	vmov.f32	s15, s0
 80031ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z));
 80031be:	ed97 7a04 	vldr	s14, [r7, #16]
 80031c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80031c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80031ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80031d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031d6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80031da:	ed97 7a07 	vldr	s14, [r7, #28]
 80031de:	edd7 7a07 	vldr	s15, [r7, #28]
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80031ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ee:	eef0 0a67 	vmov.f32	s1, s15
 80031f2:	eeb0 0a66 	vmov.f32	s0, s13
 80031f6:	f009 fc9b 	bl	800cb30 <atan2f>
 80031fa:	eef0 7a40 	vmov.f32	s15, s0
 80031fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003202:	f7ff fe23 	bl	8002e4c <FusionRadiansToDegrees>
 8003206:	eef0 7a40 	vmov.f32	s15, s0
 800320a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return euler;
 800320e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003212:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003216:	ca07      	ldmia	r2, {r0, r1, r2}
 8003218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800321c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800321e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003222:	ee06 1a90 	vmov	s13, r1
 8003226:	ee07 2a10 	vmov	s14, r2
 800322a:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800322e:	eeb0 0a66 	vmov.f32	s0, s13
 8003232:	eef0 0a47 	vmov.f32	s1, s14
 8003236:	eeb0 1a67 	vmov.f32	s2, s15
 800323a:	3740      	adds	r7, #64	; 0x40
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 8003240:	b084      	sub	sp, #16
 8003242:	b5b0      	push	{r4, r5, r7, lr}
 8003244:	b09e      	sub	sp, #120	; 0x78
 8003246:	af06      	add	r7, sp, #24
 8003248:	eef0 4a41 	vmov.f32	s9, s2
 800324c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003254:	eeb0 5a61 	vmov.f32	s10, s3
 8003258:	eef0 5a42 	vmov.f32	s11, s4
 800325c:	eeb0 6a62 	vmov.f32	s12, s5
 8003260:	eef0 6a43 	vmov.f32	s13, s6
 8003264:	eeb0 7a63 	vmov.f32	s14, s7
 8003268:	eef0 7a44 	vmov.f32	s15, s8
 800326c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8003270:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8003274:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8003278:	ed87 5a08 	vstr	s10, [r7, #32]
 800327c:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8003280:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8003284:	edc7 6a05 	vstr	s13, [r7, #20]
 8003288:	ed87 7a06 	vstr	s14, [r7, #24]
 800328c:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8003290:	ed97 5a05 	vldr	s10, [r7, #20]
 8003294:	edd7 5a06 	vldr	s11, [r7, #24]
 8003298:	ed97 6a07 	vldr	s12, [r7, #28]
 800329c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80032a0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80032a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80032a8:	eef0 1a45 	vmov.f32	s3, s10
 80032ac:	eeb0 2a65 	vmov.f32	s4, s11
 80032b0:	eef0 2a46 	vmov.f32	s5, s12
 80032b4:	eeb0 0a66 	vmov.f32	s0, s13
 80032b8:	eef0 0a47 	vmov.f32	s1, s14
 80032bc:	eeb0 1a67 	vmov.f32	s2, s15
 80032c0:	f7ff fe04 	bl	8002ecc <FusionVectorSubtract>
 80032c4:	eef0 6a40 	vmov.f32	s13, s0
 80032c8:	eeb0 7a60 	vmov.f32	s14, s1
 80032cc:	eef0 7a41 	vmov.f32	s15, s2
 80032d0:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 80032d4:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 80032d8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80032dc:	ed97 5a08 	vldr	s10, [r7, #32]
 80032e0:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 80032e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80032e8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80032ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80032f0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80032f4:	eef0 1a45 	vmov.f32	s3, s10
 80032f8:	eeb0 2a65 	vmov.f32	s4, s11
 80032fc:	eef0 2a46 	vmov.f32	s5, s12
 8003300:	eeb0 0a66 	vmov.f32	s0, s13
 8003304:	eef0 0a47 	vmov.f32	s1, s14
 8003308:	eeb0 1a67 	vmov.f32	s2, s15
 800330c:	f7ff fe2c 	bl	8002f68 <FusionVectorHadamardProduct>
 8003310:	eef0 6a40 	vmov.f32	s13, s0
 8003314:	eeb0 7a60 	vmov.f32	s14, s1
 8003318:	eef0 7a41 	vmov.f32	s15, s2
 800331c:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 8003320:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 8003324:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8003328:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800332c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003330:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003334:	466d      	mov	r5, sp
 8003336:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800333a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800333c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	602b      	str	r3, [r5, #0]
 8003342:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003348:	eeb0 0a66 	vmov.f32	s0, s13
 800334c:	eef0 0a47 	vmov.f32	s1, s14
 8003350:	eeb0 1a67 	vmov.f32	s2, s15
 8003354:	f7ff fe56 	bl	8003004 <FusionMatrixMultiplyVector>
 8003358:	eef0 6a40 	vmov.f32	s13, s0
 800335c:	eeb0 7a60 	vmov.f32	s14, s1
 8003360:	eef0 7a41 	vmov.f32	s15, s2
 8003364:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 8003368:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800336c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8003370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003376:	ee06 1a90 	vmov	s13, r1
 800337a:	ee07 2a10 	vmov	s14, r2
 800337e:	ee07 3a90 	vmov	s15, r3
}
 8003382:	eeb0 0a66 	vmov.f32	s0, s13
 8003386:	eef0 0a47 	vmov.f32	s1, s14
 800338a:	eeb0 1a67 	vmov.f32	s2, s15
 800338e:	3760      	adds	r7, #96	; 0x60
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003396:	b004      	add	sp, #16
 8003398:	4770      	bx	lr

0800339a <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 800339a:	b084      	sub	sp, #16
 800339c:	b5b0      	push	{r4, r5, r7, lr}
 800339e:	b096      	sub	sp, #88	; 0x58
 80033a0:	af06      	add	r7, sp, #24
 80033a2:	eeb0 5a40 	vmov.f32	s10, s0
 80033a6:	eef0 5a60 	vmov.f32	s11, s1
 80033aa:	eeb0 6a41 	vmov.f32	s12, s2
 80033ae:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80033b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033b6:	eef0 6a61 	vmov.f32	s13, s3
 80033ba:	eeb0 7a42 	vmov.f32	s14, s4
 80033be:	eef0 7a62 	vmov.f32	s15, s5
 80033c2:	ed87 5a07 	vstr	s10, [r7, #28]
 80033c6:	edc7 5a08 	vstr	s11, [r7, #32]
 80033ca:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80033ce:	edc7 6a04 	vstr	s13, [r7, #16]
 80033d2:	ed87 7a05 	vstr	s14, [r7, #20]
 80033d6:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionVectorSubtract(FusionMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronOffset);
 80033da:	edd7 6a07 	vldr	s13, [r7, #28]
 80033de:	ed97 7a08 	vldr	s14, [r7, #32]
 80033e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033e6:	466d      	mov	r5, sp
 80033e8:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80033ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	602b      	str	r3, [r5, #0]
 80033f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033fa:	eeb0 0a66 	vmov.f32	s0, s13
 80033fe:	eef0 0a47 	vmov.f32	s1, s14
 8003402:	eeb0 1a67 	vmov.f32	s2, s15
 8003406:	f7ff fdfd 	bl	8003004 <FusionMatrixMultiplyVector>
 800340a:	eef0 6a40 	vmov.f32	s13, s0
 800340e:	eeb0 7a60 	vmov.f32	s14, s1
 8003412:	eef0 7a41 	vmov.f32	s15, s2
 8003416:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800341a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800341e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8003422:	ed97 5a04 	vldr	s10, [r7, #16]
 8003426:	edd7 5a05 	vldr	s11, [r7, #20]
 800342a:	ed97 6a06 	vldr	s12, [r7, #24]
 800342e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003432:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003436:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800343a:	eef0 1a45 	vmov.f32	s3, s10
 800343e:	eeb0 2a65 	vmov.f32	s4, s11
 8003442:	eef0 2a46 	vmov.f32	s5, s12
 8003446:	eeb0 0a66 	vmov.f32	s0, s13
 800344a:	eef0 0a47 	vmov.f32	s1, s14
 800344e:	eeb0 1a67 	vmov.f32	s2, s15
 8003452:	f7ff fd3b 	bl	8002ecc <FusionVectorSubtract>
 8003456:	eef0 6a40 	vmov.f32	s13, s0
 800345a:	eeb0 7a60 	vmov.f32	s14, s1
 800345e:	eef0 7a41 	vmov.f32	s15, s2
 8003462:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8003466:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800346a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800346e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	ee06 1a90 	vmov	s13, r1
 8003478:	ee07 2a10 	vmov	s14, r2
 800347c:	ee07 3a90 	vmov	s15, r3
}
 8003480:	eeb0 0a66 	vmov.f32	s0, s13
 8003484:	eef0 0a47 	vmov.f32	s1, s14
 8003488:	eeb0 1a67 	vmov.f32	s2, s15
 800348c:	3740      	adds	r7, #64	; 0x40
 800348e:	46bd      	mov	sp, r7
 8003490:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003494:	b004      	add	sp, #16
 8003496:	4770      	bx	lr

08003498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349a:	b0af      	sub	sp, #188	; 0xbc
 800349c:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800349e:	f001 fa15 	bl	80048cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034a2:	f000 faf5 	bl	8003a90 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80034a6:	f000 fb49 	bl	8003b3c <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034aa:	f000 fc17 	bl	8003cdc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80034ae:	f000 fbc9 	bl	8003c44 <MX_USART1_UART_Init>
  MX_CRC_Init();
 80034b2:	f000 fb61 	bl	8003b78 <MX_CRC_Init>
  MX_I2C1_Init();
 80034b6:	f000 fb81 	bl	8003bbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  Sensor_Unit_Init(&slave_xl, XL_SENSOR);
 80034ba:	2100      	movs	r1, #0
 80034bc:	48d0      	ldr	r0, [pc, #832]	; (8003800 <main+0x368>)
 80034be:	f000 fc7d 	bl	8003dbc <Sensor_Unit_Init>
  Sensor_Unit_Init(&slave_gr, GR_SENSOR);
 80034c2:	2101      	movs	r1, #1
 80034c4:	48cf      	ldr	r0, [pc, #828]	; (8003804 <main+0x36c>)
 80034c6:	f000 fc79 	bl	8003dbc <Sensor_Unit_Init>
  Sensor_Unit_Init(&slave_mg, MG_SENSOR);
 80034ca:	2102      	movs	r1, #2
 80034cc:	48ce      	ldr	r0, [pc, #824]	; (8003808 <main+0x370>)
 80034ce:	f000 fc75 	bl	8003dbc <Sensor_Unit_Init>

//  check the status of sensors first
  ret  = Sensor_Check_Ready(&slave_xl, hi2c1);
 80034d2:	4cce      	ldr	r4, [pc, #824]	; (800380c <main+0x374>)
 80034d4:	4668      	mov	r0, sp
 80034d6:	f104 030c 	add.w	r3, r4, #12
 80034da:	2248      	movs	r2, #72	; 0x48
 80034dc:	4619      	mov	r1, r3
 80034de:	f006 fb87 	bl	8009bf0 <memcpy>
 80034e2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80034e6:	48c6      	ldr	r0, [pc, #792]	; (8003800 <main+0x368>)
 80034e8:	f000 fd00 	bl	8003eec <Sensor_Check_Ready>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	4bc7      	ldr	r3, [pc, #796]	; (8003810 <main+0x378>)
 80034f2:	701a      	strb	r2, [r3, #0]
  ret  = Sensor_Check_Ready(&slave_gr, hi2c1);
 80034f4:	4cc5      	ldr	r4, [pc, #788]	; (800380c <main+0x374>)
 80034f6:	4668      	mov	r0, sp
 80034f8:	f104 030c 	add.w	r3, r4, #12
 80034fc:	2248      	movs	r2, #72	; 0x48
 80034fe:	4619      	mov	r1, r3
 8003500:	f006 fb76 	bl	8009bf0 <memcpy>
 8003504:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003508:	48be      	ldr	r0, [pc, #760]	; (8003804 <main+0x36c>)
 800350a:	f000 fcef 	bl	8003eec <Sensor_Check_Ready>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	4bbf      	ldr	r3, [pc, #764]	; (8003810 <main+0x378>)
 8003514:	701a      	strb	r2, [r3, #0]
  ret = Sensor_Check_Ready(&slave_mg, hi2c1);
 8003516:	4cbd      	ldr	r4, [pc, #756]	; (800380c <main+0x374>)
 8003518:	4668      	mov	r0, sp
 800351a:	f104 030c 	add.w	r3, r4, #12
 800351e:	2248      	movs	r2, #72	; 0x48
 8003520:	4619      	mov	r1, r3
 8003522:	f006 fb65 	bl	8009bf0 <memcpy>
 8003526:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800352a:	48b7      	ldr	r0, [pc, #732]	; (8003808 <main+0x370>)
 800352c:	f000 fcde 	bl	8003eec <Sensor_Check_Ready>
 8003530:	4603      	mov	r3, r0
 8003532:	461a      	mov	r2, r3
 8003534:	4bb6      	ldr	r3, [pc, #728]	; (8003810 <main+0x378>)
 8003536:	701a      	strb	r2, [r3, #0]


//  set configuration for the accelerometer
  ret = Sensor_Set_Config(&slave_xl, hi2c1, LSM6DSOX_CTRL1_XL_REG, 0b01110010);
 8003538:	4cb4      	ldr	r4, [pc, #720]	; (800380c <main+0x374>)
 800353a:	2372      	movs	r3, #114	; 0x72
 800353c:	9313      	str	r3, [sp, #76]	; 0x4c
 800353e:	2310      	movs	r3, #16
 8003540:	9312      	str	r3, [sp, #72]	; 0x48
 8003542:	4668      	mov	r0, sp
 8003544:	f104 030c 	add.w	r3, r4, #12
 8003548:	2248      	movs	r2, #72	; 0x48
 800354a:	4619      	mov	r1, r3
 800354c:	f006 fb50 	bl	8009bf0 <memcpy>
 8003550:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003554:	48aa      	ldr	r0, [pc, #680]	; (8003800 <main+0x368>)
 8003556:	f000 fce7 	bl	8003f28 <Sensor_Set_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	461a      	mov	r2, r3
 800355e:	4bac      	ldr	r3, [pc, #688]	; (8003810 <main+0x378>)
 8003560:	701a      	strb	r2, [r3, #0]
//  set configuration for the gyroscope
  ret = Sensor_Set_Config(&slave_gr, hi2c1, LSM6DSOX_CTRL2_GR_REG, 0b01110010);
 8003562:	4caa      	ldr	r4, [pc, #680]	; (800380c <main+0x374>)
 8003564:	2372      	movs	r3, #114	; 0x72
 8003566:	9313      	str	r3, [sp, #76]	; 0x4c
 8003568:	2311      	movs	r3, #17
 800356a:	9312      	str	r3, [sp, #72]	; 0x48
 800356c:	4668      	mov	r0, sp
 800356e:	f104 030c 	add.w	r3, r4, #12
 8003572:	2248      	movs	r2, #72	; 0x48
 8003574:	4619      	mov	r1, r3
 8003576:	f006 fb3b 	bl	8009bf0 <memcpy>
 800357a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800357e:	48a1      	ldr	r0, [pc, #644]	; (8003804 <main+0x36c>)
 8003580:	f000 fcd2 	bl	8003f28 <Sensor_Set_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	461a      	mov	r2, r3
 8003588:	4ba1      	ldr	r3, [pc, #644]	; (8003810 <main+0x378>)
 800358a:	701a      	strb	r2, [r3, #0]
//  set configuration for the magnetic field sensor
  ret = Sensor_Set_Config(&slave_mg, hi2c1, LIS3MDL_CTRL_REG1, 0b00111110);
 800358c:	4c9f      	ldr	r4, [pc, #636]	; (800380c <main+0x374>)
 800358e:	233e      	movs	r3, #62	; 0x3e
 8003590:	9313      	str	r3, [sp, #76]	; 0x4c
 8003592:	2320      	movs	r3, #32
 8003594:	9312      	str	r3, [sp, #72]	; 0x48
 8003596:	4668      	mov	r0, sp
 8003598:	f104 030c 	add.w	r3, r4, #12
 800359c:	2248      	movs	r2, #72	; 0x48
 800359e:	4619      	mov	r1, r3
 80035a0:	f006 fb26 	bl	8009bf0 <memcpy>
 80035a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80035a8:	4897      	ldr	r0, [pc, #604]	; (8003808 <main+0x370>)
 80035aa:	f000 fcbd 	bl	8003f28 <Sensor_Set_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b97      	ldr	r3, [pc, #604]	; (8003810 <main+0x378>)
 80035b4:	701a      	strb	r2, [r3, #0]
  ret = Sensor_Set_Config(&slave_mg, hi2c1, LIS3MDL_CTRL_REG2, 0b00001100);
 80035b6:	4c95      	ldr	r4, [pc, #596]	; (800380c <main+0x374>)
 80035b8:	230c      	movs	r3, #12
 80035ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80035bc:	2321      	movs	r3, #33	; 0x21
 80035be:	9312      	str	r3, [sp, #72]	; 0x48
 80035c0:	4668      	mov	r0, sp
 80035c2:	f104 030c 	add.w	r3, r4, #12
 80035c6:	2248      	movs	r2, #72	; 0x48
 80035c8:	4619      	mov	r1, r3
 80035ca:	f006 fb11 	bl	8009bf0 <memcpy>
 80035ce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80035d2:	488d      	ldr	r0, [pc, #564]	; (8003808 <main+0x370>)
 80035d4:	f000 fca8 	bl	8003f28 <Sensor_Set_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	4b8c      	ldr	r3, [pc, #560]	; (8003810 <main+0x378>)
 80035de:	701a      	strb	r2, [r3, #0]
  ret = Sensor_Set_Config(&slave_mg, hi2c1, LIS3MDL_CTRL_REG3, 0b00000000);
 80035e0:	4c8a      	ldr	r4, [pc, #552]	; (800380c <main+0x374>)
 80035e2:	2300      	movs	r3, #0
 80035e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80035e6:	2322      	movs	r3, #34	; 0x22
 80035e8:	9312      	str	r3, [sp, #72]	; 0x48
 80035ea:	4668      	mov	r0, sp
 80035ec:	f104 030c 	add.w	r3, r4, #12
 80035f0:	2248      	movs	r2, #72	; 0x48
 80035f2:	4619      	mov	r1, r3
 80035f4:	f006 fafc 	bl	8009bf0 <memcpy>
 80035f8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80035fc:	4882      	ldr	r0, [pc, #520]	; (8003808 <main+0x370>)
 80035fe:	f000 fc93 	bl	8003f28 <Sensor_Set_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	4b82      	ldr	r3, [pc, #520]	; (8003810 <main+0x378>)
 8003608:	701a      	strb	r2, [r3, #0]
  ret = Sensor_Set_Config(&slave_mg, hi2c1, LIS3MDL_CTRL_REG4, 0b00000100);
 800360a:	4c80      	ldr	r4, [pc, #512]	; (800380c <main+0x374>)
 800360c:	2304      	movs	r3, #4
 800360e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003610:	2323      	movs	r3, #35	; 0x23
 8003612:	9312      	str	r3, [sp, #72]	; 0x48
 8003614:	4668      	mov	r0, sp
 8003616:	f104 030c 	add.w	r3, r4, #12
 800361a:	2248      	movs	r2, #72	; 0x48
 800361c:	4619      	mov	r1, r3
 800361e:	f006 fae7 	bl	8009bf0 <memcpy>
 8003622:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003626:	4878      	ldr	r0, [pc, #480]	; (8003808 <main+0x370>)
 8003628:	f000 fc7e 	bl	8003f28 <Sensor_Set_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	4b77      	ldr	r3, [pc, #476]	; (8003810 <main+0x378>)
 8003632:	701a      	strb	r2, [r3, #0]
//
//  initialize objects for FusionAlgorithm usages
//  FusionOffsetInitialise(&offset, SAMPLE_FREQ);
  FusionAhrsInitialise(&ahrs);
 8003634:	4877      	ldr	r0, [pc, #476]	; (8003814 <main+0x37c>)
 8003636:	f7fe f911 	bl	800185c <FusionAhrsInitialise>

  const FusionAhrsSettings settings = {
 800363a:	4b77      	ldr	r3, [pc, #476]	; (8003818 <main+0x380>)
 800363c:	f107 040c 	add.w	r4, r7, #12
 8003640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  .gain = 0.5f,
	  .accelerationRejection = 10.0f,
	  .magneticRejection = 20.0f,
	  .rejectionTimeout = 5 * SAMPLE_FREQ, /* 5 seconds */
  };
  FusionAhrsSetSettings(&ahrs, &settings);
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	4619      	mov	r1, r3
 800364c:	4871      	ldr	r0, [pc, #452]	; (8003814 <main+0x37c>)
 800364e:	f7fe f97d 	bl	800194c <FusionAhrsSetSettings>


  uart_Rx_busy_flag = HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_Rx_buff, sizeof(uart_Rx_buff));
 8003652:	2201      	movs	r2, #1
 8003654:	4971      	ldr	r1, [pc, #452]	; (800381c <main+0x384>)
 8003656:	4872      	ldr	r0, [pc, #456]	; (8003820 <main+0x388>)
 8003658:	f004 fbe6 	bl	8007e28 <HAL_UART_Receive_IT>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	4b70      	ldr	r3, [pc, #448]	; (8003824 <main+0x38c>)
 8003662:	701a      	strb	r2, [r3, #0]

//  call HAL_GetTick  to get a current time according to system clk
  prev_time_stamp = HAL_GetTick();
 8003664:	f001 f9a0 	bl	80049a8 <HAL_GetTick>
 8003668:	4603      	mov	r3, r0
 800366a:	4a6f      	ldr	r2, [pc, #444]	; (8003828 <main+0x390>)
 800366c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//		load value from the xl/gr/mg all 3 axes {LOW, HIGH} into data buffers
		ret =   Sensor_Read_Data(&slave_xl, hi2c1);
 800366e:	4c67      	ldr	r4, [pc, #412]	; (800380c <main+0x374>)
 8003670:	4668      	mov	r0, sp
 8003672:	f104 030c 	add.w	r3, r4, #12
 8003676:	2248      	movs	r2, #72	; 0x48
 8003678:	4619      	mov	r1, r3
 800367a:	f006 fab9 	bl	8009bf0 <memcpy>
 800367e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003682:	485f      	ldr	r0, [pc, #380]	; (8003800 <main+0x368>)
 8003684:	f000 fc77 	bl	8003f76 <Sensor_Read_Data>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	4b60      	ldr	r3, [pc, #384]	; (8003810 <main+0x378>)
 800368e:	701a      	strb	r2, [r3, #0]
		ret =   Sensor_Read_Data(&slave_gr, hi2c1);
 8003690:	4c5e      	ldr	r4, [pc, #376]	; (800380c <main+0x374>)
 8003692:	4668      	mov	r0, sp
 8003694:	f104 030c 	add.w	r3, r4, #12
 8003698:	2248      	movs	r2, #72	; 0x48
 800369a:	4619      	mov	r1, r3
 800369c:	f006 faa8 	bl	8009bf0 <memcpy>
 80036a0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80036a4:	4857      	ldr	r0, [pc, #348]	; (8003804 <main+0x36c>)
 80036a6:	f000 fc66 	bl	8003f76 <Sensor_Read_Data>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b58      	ldr	r3, [pc, #352]	; (8003810 <main+0x378>)
 80036b0:	701a      	strb	r2, [r3, #0]
		ret =   Sensor_Read_Data(&slave_mg, hi2c1);
 80036b2:	4c56      	ldr	r4, [pc, #344]	; (800380c <main+0x374>)
 80036b4:	4668      	mov	r0, sp
 80036b6:	f104 030c 	add.w	r3, r4, #12
 80036ba:	2248      	movs	r2, #72	; 0x48
 80036bc:	4619      	mov	r1, r3
 80036be:	f006 fa97 	bl	8009bf0 <memcpy>
 80036c2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80036c6:	4850      	ldr	r0, [pc, #320]	; (8003808 <main+0x370>)
 80036c8:	f000 fc55 	bl	8003f76 <Sensor_Read_Data>
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b4f      	ldr	r3, [pc, #316]	; (8003810 <main+0x378>)
 80036d2:	701a      	strb	r2, [r3, #0]

//		concatenate two 8-bit into one 16-bit 2's complement word
		Sensor_Data_Process(&slave_xl, LSM6DSOX_XL_2G_COEFF);
 80036d4:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800382c <main+0x394>
 80036d8:	4849      	ldr	r0, [pc, #292]	; (8003800 <main+0x368>)
 80036da:	f000 fd29 	bl	8004130 <Sensor_Data_Process>
		Sensor_Data_Process(&slave_gr, LSM6DSOX_GR_125_COEFF);
 80036de:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8003830 <main+0x398>
 80036e2:	4848      	ldr	r0, [pc, #288]	; (8003804 <main+0x36c>)
 80036e4:	f000 fd24 	bl	8004130 <Sensor_Data_Process>
		Sensor_Data_Process(&slave_mg, LIS3MDL_MG_4_COEFF);
 80036e8:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8003834 <main+0x39c>
 80036ec:	4846      	ldr	r0, [pc, #280]	; (8003808 <main+0x370>)
 80036ee:	f000 fd1f 	bl	8004130 <Sensor_Data_Process>

//		advanced calibration methodologies including sensitivities, mis-alignment, and manual offsets
		slave_xl.reading_float =    FusionCalibrationInertial(slave_xl.reading_float, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 80036f2:	4e43      	ldr	r6, [pc, #268]	; (8003800 <main+0x368>)
 80036f4:	4b50      	ldr	r3, [pc, #320]	; (8003838 <main+0x3a0>)
 80036f6:	edd3 3a00 	vldr	s7, [r3]
 80036fa:	ed93 4a01 	vldr	s8, [r3, #4]
 80036fe:	edd3 4a02 	vldr	s9, [r3, #8]
 8003702:	4b4e      	ldr	r3, [pc, #312]	; (800383c <main+0x3a4>)
 8003704:	ed93 5a00 	vldr	s10, [r3]
 8003708:	edd3 5a01 	vldr	s11, [r3, #4]
 800370c:	ed93 6a02 	vldr	s12, [r3, #8]
 8003710:	4a4b      	ldr	r2, [pc, #300]	; (8003840 <main+0x3a8>)
 8003712:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <main+0x368>)
 8003714:	edd3 6a05 	vldr	s13, [r3, #20]
 8003718:	ed93 7a06 	vldr	s14, [r3, #24]
 800371c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003720:	466d      	mov	r5, sp
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	f102 0410 	add.w	r4, r2, #16
 8003728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800372a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8003734:	eeb0 3a63 	vmov.f32	s6, s7
 8003738:	eef0 3a44 	vmov.f32	s7, s8
 800373c:	eeb0 4a64 	vmov.f32	s8, s9
 8003740:	eef0 1a45 	vmov.f32	s3, s10
 8003744:	eeb0 2a65 	vmov.f32	s4, s11
 8003748:	eef0 2a46 	vmov.f32	s5, s12
 800374c:	eeb0 0a66 	vmov.f32	s0, s13
 8003750:	eef0 0a47 	vmov.f32	s1, s14
 8003754:	eeb0 1a67 	vmov.f32	s2, s15
 8003758:	f7ff fd72 	bl	8003240 <FusionCalibrationInertial>
 800375c:	eef0 6a40 	vmov.f32	s13, s0
 8003760:	eeb0 7a60 	vmov.f32	s14, s1
 8003764:	eef0 7a41 	vmov.f32	s15, s2
 8003768:	edc6 6a05 	vstr	s13, [r6, #20]
 800376c:	ed86 7a06 	vstr	s14, [r6, #24]
 8003770:	edc6 7a07 	vstr	s15, [r6, #28]
		slave_gr.reading_float =   FusionCalibrationInertial(slave_gr.reading_float, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 8003774:	4e23      	ldr	r6, [pc, #140]	; (8003804 <main+0x36c>)
 8003776:	4b33      	ldr	r3, [pc, #204]	; (8003844 <main+0x3ac>)
 8003778:	edd3 3a00 	vldr	s7, [r3]
 800377c:	ed93 4a01 	vldr	s8, [r3, #4]
 8003780:	edd3 4a02 	vldr	s9, [r3, #8]
 8003784:	4b30      	ldr	r3, [pc, #192]	; (8003848 <main+0x3b0>)
 8003786:	ed93 5a00 	vldr	s10, [r3]
 800378a:	edd3 5a01 	vldr	s11, [r3, #4]
 800378e:	ed93 6a02 	vldr	s12, [r3, #8]
 8003792:	4a2e      	ldr	r2, [pc, #184]	; (800384c <main+0x3b4>)
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <main+0x36c>)
 8003796:	edd3 6a05 	vldr	s13, [r3, #20]
 800379a:	ed93 7a06 	vldr	s14, [r3, #24]
 800379e:	edd3 7a07 	vldr	s15, [r3, #28]
 80037a2:	466d      	mov	r5, sp
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	f102 0410 	add.w	r4, r2, #16
 80037aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	602b      	str	r3, [r5, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80037b6:	eeb0 3a63 	vmov.f32	s6, s7
 80037ba:	eef0 3a44 	vmov.f32	s7, s8
 80037be:	eeb0 4a64 	vmov.f32	s8, s9
 80037c2:	eef0 1a45 	vmov.f32	s3, s10
 80037c6:	eeb0 2a65 	vmov.f32	s4, s11
 80037ca:	eef0 2a46 	vmov.f32	s5, s12
 80037ce:	eeb0 0a66 	vmov.f32	s0, s13
 80037d2:	eef0 0a47 	vmov.f32	s1, s14
 80037d6:	eeb0 1a67 	vmov.f32	s2, s15
 80037da:	f7ff fd31 	bl	8003240 <FusionCalibrationInertial>
 80037de:	eef0 6a40 	vmov.f32	s13, s0
 80037e2:	eeb0 7a60 	vmov.f32	s14, s1
 80037e6:	eef0 7a41 	vmov.f32	s15, s2
 80037ea:	edc6 6a05 	vstr	s13, [r6, #20]
 80037ee:	ed86 7a06 	vstr	s14, [r6, #24]
 80037f2:	edc6 7a07 	vstr	s15, [r6, #28]
		slave_mg.reading_float = FusionCalibrationMagnetic(slave_mg.reading_float, softIronMatrix, hardIronOffset);
 80037f6:	4e04      	ldr	r6, [pc, #16]	; (8003808 <main+0x370>)
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <main+0x3b8>)
 80037fa:	ed93 5a00 	vldr	s10, [r3]
 80037fe:	e029      	b.n	8003854 <main+0x3bc>
 8003800:	200004d4 	.word	0x200004d4
 8003804:	200004f8 	.word	0x200004f8
 8003808:	2000051c 	.word	0x2000051c
 800380c:	20000220 	.word	0x20000220
 8003810:	20000384 	.word	0x20000384
 8003814:	20000320 	.word	0x20000320
 8003818:	0800e0f8 	.word	0x0800e0f8
 800381c:	20000304 	.word	0x20000304
 8003820:	20000274 	.word	0x20000274
 8003824:	20000305 	.word	0x20000305
 8003828:	20000388 	.word	0x20000388
 800382c:	387fda40 	.word	0x387fda40
 8003830:	3b8f5c29 	.word	0x3b8f5c29
 8003834:	3919417a 	.word	0x3919417a
 8003838:	0800e344 	.word	0x0800e344
 800383c:	0800e338 	.word	0x0800e338
 8003840:	0800e314 	.word	0x0800e314
 8003844:	0800e308 	.word	0x0800e308
 8003848:	0800e2fc 	.word	0x0800e2fc
 800384c:	0800e2d8 	.word	0x0800e2d8
 8003850:	0800e374 	.word	0x0800e374
 8003854:	edd3 5a01 	vldr	s11, [r3, #4]
 8003858:	ed93 6a02 	vldr	s12, [r3, #8]
 800385c:	4a7e      	ldr	r2, [pc, #504]	; (8003a58 <main+0x5c0>)
 800385e:	4b7f      	ldr	r3, [pc, #508]	; (8003a5c <main+0x5c4>)
 8003860:	edd3 6a05 	vldr	s13, [r3, #20]
 8003864:	ed93 7a06 	vldr	s14, [r3, #24]
 8003868:	edd3 7a07 	vldr	s15, [r3, #28]
 800386c:	466d      	mov	r5, sp
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	f102 0410 	add.w	r4, r2, #16
 8003874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	602b      	str	r3, [r5, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8003880:	eef0 1a45 	vmov.f32	s3, s10
 8003884:	eeb0 2a65 	vmov.f32	s4, s11
 8003888:	eef0 2a46 	vmov.f32	s5, s12
 800388c:	eeb0 0a66 	vmov.f32	s0, s13
 8003890:	eef0 0a47 	vmov.f32	s1, s14
 8003894:	eeb0 1a67 	vmov.f32	s2, s15
 8003898:	f7ff fd7f 	bl	800339a <FusionCalibrationMagnetic>
 800389c:	eef0 6a40 	vmov.f32	s13, s0
 80038a0:	eeb0 7a60 	vmov.f32	s14, s1
 80038a4:	eef0 7a41 	vmov.f32	s15, s2
 80038a8:	edc6 6a05 	vstr	s13, [r6, #20]
 80038ac:	ed86 7a06 	vstr	s14, [r6, #24]
 80038b0:	edc6 7a07 	vstr	s15, [r6, #28]


//		 Update gyroscope offset correction algorithm
		slave_gr.reading_float = FusionOffsetUpdate(&offset, slave_gr.reading_float);
 80038b4:	4c6a      	ldr	r4, [pc, #424]	; (8003a60 <main+0x5c8>)
 80038b6:	4b6a      	ldr	r3, [pc, #424]	; (8003a60 <main+0x5c8>)
 80038b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80038bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80038c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80038c4:	eeb0 0a66 	vmov.f32	s0, s13
 80038c8:	eef0 0a47 	vmov.f32	s1, s14
 80038cc:	eeb0 1a67 	vmov.f32	s2, s15
 80038d0:	4864      	ldr	r0, [pc, #400]	; (8003a64 <main+0x5cc>)
 80038d2:	f7ff f9cc 	bl	8002c6e <FusionOffsetUpdate>
 80038d6:	eef0 6a40 	vmov.f32	s13, s0
 80038da:	eeb0 7a60 	vmov.f32	s14, s1
 80038de:	eef0 7a41 	vmov.f32	s15, s2
 80038e2:	edc4 6a05 	vstr	s13, [r4, #20]
 80038e6:	ed84 7a06 	vstr	s14, [r4, #24]
 80038ea:	edc4 7a07 	vstr	s15, [r4, #28]

//		get a timer tag for the current moment {to approx gyro error for next round}
//		return of HAL_GetTick is unsigned integer 32 bit, already in mili-sec
//		0xffff'ffff / (1000 * 60 * 60 * 24) = 49.7 which means sysclk will not overflow until 49 days running
		uint32_t cur_time_stamp = HAL_GetTick();
 80038ee:	f001 f85b 	bl	80049a8 <HAL_GetTick>
 80038f2:	62f8      	str	r0, [r7, #44]	; 0x2c
		delta_time = (float) (cur_time_stamp - prev_time_stamp) * MILISEC_TO_SEC;
 80038f4:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <main+0x5d0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003904:	ee17 0a90 	vmov	r0, s15
 8003908:	f7fc fdf6 	bl	80004f8 <__aeabi_f2d>
 800390c:	a350      	add	r3, pc, #320	; (adr r3, 8003a50 <main+0x5b8>)
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	f7fc fe49 	bl	80005a8 <__aeabi_dmul>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	f7fd f91b 	bl	8000b58 <__aeabi_d2f>
 8003922:	4603      	mov	r3, r0
 8003924:	4a51      	ldr	r2, [pc, #324]	; (8003a6c <main+0x5d4>)
 8003926:	6013      	str	r3, [r2, #0]
		prev_time_stamp = cur_time_stamp;
 8003928:	4a4f      	ldr	r2, [pc, #316]	; (8003a68 <main+0x5d0>)
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	6013      	str	r3, [r2, #0]

//		 Update gyroscope AHRS algorithm
		FusionAhrsUpdate(&ahrs, slave_gr.reading_float, slave_xl.reading_float, slave_mg.reading_float, delta_time);
 800392e:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <main+0x5d4>)
 8003930:	edd3 4a00 	vldr	s9, [r3]
 8003934:	4b49      	ldr	r3, [pc, #292]	; (8003a5c <main+0x5c4>)
 8003936:	ed93 3a05 	vldr	s6, [r3, #20]
 800393a:	edd3 3a06 	vldr	s7, [r3, #24]
 800393e:	ed93 4a07 	vldr	s8, [r3, #28]
 8003942:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <main+0x5d8>)
 8003944:	ed93 5a05 	vldr	s10, [r3, #20]
 8003948:	edd3 5a06 	vldr	s11, [r3, #24]
 800394c:	ed93 6a07 	vldr	s12, [r3, #28]
 8003950:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <main+0x5c8>)
 8003952:	edd3 6a05 	vldr	s13, [r3, #20]
 8003956:	ed93 7a06 	vldr	s14, [r3, #24]
 800395a:	edd3 7a07 	vldr	s15, [r3, #28]
 800395e:	eef0 1a45 	vmov.f32	s3, s10
 8003962:	eeb0 2a65 	vmov.f32	s4, s11
 8003966:	eef0 2a46 	vmov.f32	s5, s12
 800396a:	eeb0 0a66 	vmov.f32	s0, s13
 800396e:	eef0 0a47 	vmov.f32	s1, s14
 8003972:	eeb0 1a67 	vmov.f32	s2, s15
 8003976:	483f      	ldr	r0, [pc, #252]	; (8003a74 <main+0x5dc>)
 8003978:	f7fe f872 	bl	8001a60 <FusionAhrsUpdate>

//		retrieve the orientation in Euler Angles and position relative to Earth
		euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 800397c:	483d      	ldr	r0, [pc, #244]	; (8003a74 <main+0x5dc>)
 800397e:	f7fe fc2f 	bl	80021e0 <FusionAhrsGetQuaternion>
 8003982:	eeb0 6a40 	vmov.f32	s12, s0
 8003986:	eef0 6a60 	vmov.f32	s13, s1
 800398a:	eeb0 7a41 	vmov.f32	s14, s2
 800398e:	eef0 7a61 	vmov.f32	s15, s3
 8003992:	ed87 6a07 	vstr	s12, [r7, #28]
 8003996:	edc7 6a08 	vstr	s13, [r7, #32]
 800399a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800399e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80039a2:	ed97 6a07 	vldr	s12, [r7, #28]
 80039a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80039aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80039ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039b2:	eeb0 0a46 	vmov.f32	s0, s12
 80039b6:	eef0 0a66 	vmov.f32	s1, s13
 80039ba:	eeb0 1a47 	vmov.f32	s2, s14
 80039be:	eef0 1a67 	vmov.f32	s3, s15
 80039c2:	f7ff fb97 	bl	80030f4 <FusionQuaternionToEuler>
 80039c6:	eef0 6a40 	vmov.f32	s13, s0
 80039ca:	eeb0 7a60 	vmov.f32	s14, s1
 80039ce:	eef0 7a41 	vmov.f32	s15, s2
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <main+0x5e0>)
 80039d4:	edc3 6a00 	vstr	s13, [r3]
 80039d8:	ed83 7a01 	vstr	s14, [r3, #4]
 80039dc:	edc3 7a02 	vstr	s15, [r3, #8]
		earth = FusionAhrsGetEarthAcceleration(&ahrs);
 80039e0:	4824      	ldr	r0, [pc, #144]	; (8003a74 <main+0x5dc>)
 80039e2:	f7fe fc20 	bl	8002226 <FusionAhrsGetEarthAcceleration>
 80039e6:	eef0 6a40 	vmov.f32	s13, s0
 80039ea:	eeb0 7a60 	vmov.f32	s14, s1
 80039ee:	eef0 7a41 	vmov.f32	s15, s2
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <main+0x5e4>)
 80039f4:	edc3 6a00 	vstr	s13, [r3]
 80039f8:	ed83 7a01 	vstr	s14, [r3, #4]
 80039fc:	edc3 7a02 	vstr	s15, [r3, #8]

//		load all info into the word buffer, ready to transmit
//		uart to mac to monitor the output from MCU
	  experiment_log(word_buffer, &euler, &earth, &slave_xl, &slave_gr, &slave_mg);
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <main+0x5c4>)
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <main+0x5c8>)
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <main+0x5d8>)
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <main+0x5e4>)
 8003a0c:	491a      	ldr	r1, [pc, #104]	; (8003a78 <main+0x5e0>)
 8003a0e:	481c      	ldr	r0, [pc, #112]	; (8003a80 <main+0x5e8>)
 8003a10:	f000 fbf2 	bl	80041f8 <experiment_log>

//	  reset a on-duty interrupt receiving request
	  	if (uart_Rx_busy_flag == HAL_OK)
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <main+0x5ec>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f47f ae28 	bne.w	800366e <main+0x1d6>
	  	{
	  		//transmit data
			Sensor_Uart(word_buffer, huart1);
 8003a1e:	4c1a      	ldr	r4, [pc, #104]	; (8003a88 <main+0x5f0>)
 8003a20:	4668      	mov	r0, sp
 8003a22:	f104 030c 	add.w	r3, r4, #12
 8003a26:	2284      	movs	r2, #132	; 0x84
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f006 f8e1 	bl	8009bf0 <memcpy>
 8003a2e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003a32:	4813      	ldr	r0, [pc, #76]	; (8003a80 <main+0x5e8>)
 8003a34:	f000 fc94 	bl	8004360 <Sensor_Uart>
			//restart listening on com port for further data reading commands
	  		uart_Rx_busy_flag = HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_Rx_buff, sizeof(uart_Rx_buff));
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4914      	ldr	r1, [pc, #80]	; (8003a8c <main+0x5f4>)
 8003a3c:	4812      	ldr	r0, [pc, #72]	; (8003a88 <main+0x5f0>)
 8003a3e:	f004 f9f3 	bl	8007e28 <HAL_UART_Receive_IT>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <main+0x5ec>)
 8003a48:	701a      	strb	r2, [r3, #0]
  {
 8003a4a:	e610      	b.n	800366e <main+0x1d6>
 8003a4c:	f3af 8000 	nop.w
 8003a50:	d2f1a9fc 	.word	0xd2f1a9fc
 8003a54:	3f50624d 	.word	0x3f50624d
 8003a58:	0800e350 	.word	0x0800e350
 8003a5c:	2000051c 	.word	0x2000051c
 8003a60:	200004f8 	.word	0x200004f8
 8003a64:	20000308 	.word	0x20000308
 8003a68:	20000388 	.word	0x20000388
 8003a6c:	2000038c 	.word	0x2000038c
 8003a70:	200004d4 	.word	0x200004d4
 8003a74:	20000320 	.word	0x20000320
 8003a78:	20000390 	.word	0x20000390
 8003a7c:	2000039c 	.word	0x2000039c
 8003a80:	200003a8 	.word	0x200003a8
 8003a84:	20000305 	.word	0x20000305
 8003a88:	20000274 	.word	0x20000274
 8003a8c:	20000304 	.word	0x20000304

08003a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b09a      	sub	sp, #104	; 0x68
 8003a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a96:	f107 0320 	add.w	r3, r7, #32
 8003a9a:	2248      	movs	r2, #72	; 0x48
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f006 f8b4 	bl	8009c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	615a      	str	r2, [r3, #20]
 8003ab4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <SystemClock_Config+0xa8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003abe:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <SystemClock_Config+0xa8>)
 8003ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <SystemClock_Config+0xa8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ae2:	2340      	movs	r3, #64	; 0x40
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aea:	f107 0320 	add.w	r3, r7, #32
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fe5c 	bl	80067ac <HAL_RCC_OscConfig>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003afa:	f000 f959 	bl	8003db0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003afe:	236f      	movs	r3, #111	; 0x6f
 8003b00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003b02:	2302      	movs	r3, #2
 8003b04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f003 f9b8 	bl	8006e94 <HAL_RCC_ClockConfig>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003b2a:	f000 f941 	bl	8003db0 <Error_Handler>
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3768      	adds	r7, #104	; 0x68
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	58000400 	.word	0x58000400

08003b3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b094      	sub	sp, #80	; 0x50
 8003b40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b42:	463b      	mov	r3, r7
 8003b44:	2250      	movs	r2, #80	; 0x50
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f006 f85f 	bl	8009c0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8003b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b52:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003b54:	2300      	movs	r3, #0
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f003 fdd5 	bl	800770e <HAL_RCCEx_PeriphCLKConfig>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8003b6a:	f000 f921 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003b6e:	bf00      	nop
 8003b70:	3750      	adds	r7, #80	; 0x50
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <MX_CRC_Init+0x3c>)
 8003b7e:	4a0e      	ldr	r2, [pc, #56]	; (8003bb8 <MX_CRC_Init+0x40>)
 8003b80:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <MX_CRC_Init+0x3c>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <MX_CRC_Init+0x3c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_CRC_Init+0x3c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003b94:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <MX_CRC_Init+0x3c>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <MX_CRC_Init+0x3c>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003ba0:	4804      	ldr	r0, [pc, #16]	; (8003bb4 <MX_CRC_Init+0x3c>)
 8003ba2:	f001 f829 	bl	8004bf8 <HAL_CRC_Init>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003bac:	f000 f900 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200001fc 	.word	0x200001fc
 8003bb8:	40023000 	.word	0x40023000

08003bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003bc2:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <MX_I2C1_Init+0x80>)
 8003bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100413;
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <MX_I2C1_Init+0x84>)
 8003bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bd2:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bd8:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003bde:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bf6:	4810      	ldr	r0, [pc, #64]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003bf8:	f001 fb2e 	bl	8005258 <HAL_I2C_Init>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c02:	f000 f8d5 	bl	8003db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c06:	2100      	movs	r1, #0
 8003c08:	480b      	ldr	r0, [pc, #44]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003c0a:	f002 f991 	bl	8005f30 <HAL_I2CEx_ConfigAnalogFilter>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003c14:	f000 f8cc 	bl	8003db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4807      	ldr	r0, [pc, #28]	; (8003c38 <MX_I2C1_Init+0x7c>)
 8003c1c:	f002 f9d3 	bl	8005fc6 <HAL_I2CEx_ConfigDigitalFilter>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003c26:	f000 f8c3 	bl	8003db0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003c2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c2e:	f002 fa17 	bl	8006060 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000220 	.word	0x20000220
 8003c3c:	40005400 	.word	0x40005400
 8003c40:	00100413 	.word	0x00100413

08003c44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c4a:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <MX_USART1_UART_Init+0x94>)
 8003c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c4e:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c6a:	220c      	movs	r2, #12
 8003c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c80:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c86:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c8c:	4811      	ldr	r0, [pc, #68]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003c8e:	f003 ffe5 	bl	8007c5c <HAL_UART_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c98:	f000 f88a 	bl	8003db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	480d      	ldr	r0, [pc, #52]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003ca0:	f005 feb1 	bl	8009a06 <HAL_UARTEx_SetTxFifoThreshold>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003caa:	f000 f881 	bl	8003db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4808      	ldr	r0, [pc, #32]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003cb2:	f005 fee6 	bl	8009a82 <HAL_UARTEx_SetRxFifoThreshold>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003cbc:	f000 f878 	bl	8003db0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003cc0:	4804      	ldr	r0, [pc, #16]	; (8003cd4 <MX_USART1_UART_Init+0x90>)
 8003cc2:	f005 fe67 	bl	8009994 <HAL_UARTEx_DisableFifoMode>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003ccc:	f000 f870 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000274 	.word	0x20000274
 8003cd8:	40013800 	.word	0x40013800

08003cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	60da      	str	r2, [r3, #12]
 8003cee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cf0:	2004      	movs	r0, #4
 8003cf2:	f7ff f892 	bl	8002e1a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf6:	2002      	movs	r0, #2
 8003cf8:	f7ff f88f 	bl	8002e1a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f7ff f88c 	bl	8002e1a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d02:	2008      	movs	r0, #8
 8003d04:	f7ff f889 	bl	8002e1a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2123      	movs	r1, #35	; 0x23
 8003d0c:	481d      	ldr	r0, [pc, #116]	; (8003d84 <MX_GPIO_Init+0xa8>)
 8003d0e:	f001 fa8b 	bl	8005228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d12:	2310      	movs	r3, #16
 8003d14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4819      	ldr	r0, [pc, #100]	; (8003d88 <MX_GPIO_Init+0xac>)
 8003d24:	f001 f910 	bl	8004f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8003d28:	2323      	movs	r3, #35	; 0x23
 8003d2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4811      	ldr	r0, [pc, #68]	; (8003d84 <MX_GPIO_Init+0xa8>)
 8003d3e:	f001 f903 	bl	8004f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003d42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003d46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003d54:	230a      	movs	r3, #10
 8003d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d58:	1d3b      	adds	r3, r7, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d60:	f001 f8f2 	bl	8004f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8003d64:	2303      	movs	r3, #3
 8003d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	4805      	ldr	r0, [pc, #20]	; (8003d8c <MX_GPIO_Init+0xb0>)
 8003d76:	f001 f8e7 	bl	8004f48 <HAL_GPIO_Init>

}
 8003d7a:	bf00      	nop
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	48000400 	.word	0x48000400
 8003d88:	48000800 	.word	0x48000800
 8003d8c:	48000c00 	.word	0x48000c00

08003d90 <HAL_UART_RxCpltCallback>:
//}



void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	/**
	 * TODO former interrupt handle finished, allowed to go to the next one
	 */
	uart_Rx_busy_flag = HAL_OK;
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_UART_RxCpltCallback+0x1c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000305 	.word	0x20000305

08003db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003db4:	b672      	cpsid	i
}
 8003db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  __NOP();
 8003db8:	bf00      	nop
 8003dba:	e7fd      	b.n	8003db8 <Error_Handler+0x8>

08003dbc <Sensor_Unit_Init>:
#include "sensor_driver.h"



extern void Sensor_Unit_Init(struct SENSOR_Driver *target_to_init, uint8_t which_sensor) {
 8003dbc:	b480      	push	{r7}
 8003dbe:	b09f      	sub	sp, #124	; 0x7c
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
	switch(which_sensor) {
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d059      	beq.n	8003e82 <Sensor_Unit_Init+0xc6>
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	f300 8081 	bgt.w	8003ed6 <Sensor_Unit_Init+0x11a>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <Sensor_Unit_Init+0x22>
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d029      	beq.n	8003e30 <Sensor_Unit_Init+0x74>
			target_to_init->reading_float 			= FUSION_VECTOR_ZERO;
			target_to_init->slave_addr 				= LIS3MDL_I2C_SLAVE_ADDR;
			break;

		default:
			return;
 8003ddc:	e07b      	b.n	8003ed6 <Sensor_Unit_Init+0x11a>
			target_to_init->sensor_type 			= XL_SENSOR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
			target_to_init->reg_addr_ls 			= REG_ADDR_LS_XL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <Sensor_Unit_Init+0x128>)
 8003de8:	3301      	adds	r3, #1
 8003dea:	6810      	ldr	r0, [r2, #0]
 8003dec:	6018      	str	r0, [r3, #0]
 8003dee:	8892      	ldrh	r2, [r2, #4]
 8003df0:	809a      	strh	r2, [r3, #4]
			target_to_init->raw_data_buffer 	= RAW_DATA_BUFF_ZERO;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3307      	adds	r3, #7
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	809a      	strh	r2, [r3, #4]
			target_to_init->combined_word 	= COMBINED_WORD_BUFF_ZERO;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	81da      	strh	r2, [r3, #14]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	821a      	strh	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	825a      	strh	r2, [r3, #18]
			target_to_init->reading_float 			= FUSION_VECTOR_ZERO;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	615a      	str	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	619a      	str	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	61da      	str	r2, [r3, #28]
			target_to_init->slave_addr 				= LSM6DSOX_I2C_SLAVE_ADDR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	22d4      	movs	r2, #212	; 0xd4
 8003e2a:	f883 2020 	strb.w	r2, [r3, #32]
			break;
 8003e2e:	e051      	b.n	8003ed4 <Sensor_Unit_Init+0x118>
			target_to_init->sensor_type 			= GR_SENSOR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
			target_to_init->reg_addr_ls 			= REG_ADDR_LS_GR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2b      	ldr	r2, [pc, #172]	; (8003ee8 <Sensor_Unit_Init+0x12c>)
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	6810      	ldr	r0, [r2, #0]
 8003e3e:	6018      	str	r0, [r3, #0]
 8003e40:	8892      	ldrh	r2, [r2, #4]
 8003e42:	809a      	strh	r2, [r3, #4]
			target_to_init->raw_data_buffer 	= RAW_DATA_BUFF_ZERO;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3307      	adds	r3, #7
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	809a      	strh	r2, [r3, #4]
			target_to_init->combined_word 	= COMBINED_WORD_BUFF_ZERO;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	81da      	strh	r2, [r3, #14]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	821a      	strh	r2, [r3, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	825a      	strh	r2, [r3, #18]
			target_to_init->reading_float 			= FUSION_VECTOR_ZERO;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	615a      	str	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	619a      	str	r2, [r3, #24]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	61da      	str	r2, [r3, #28]
			target_to_init->slave_addr 				= LSM6DSOX_I2C_SLAVE_ADDR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	22d4      	movs	r2, #212	; 0xd4
 8003e7c:	f883 2020 	strb.w	r2, [r3, #32]
			break;
 8003e80:	e028      	b.n	8003ed4 <Sensor_Unit_Init+0x118>
			target_to_init->sensor_type 			= MG_SENSOR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	701a      	strb	r2, [r3, #0]
			target_to_init->reg_addr_ls 			= REG_ADDR_LS_MG;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <Sensor_Unit_Init+0x128>)
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	6810      	ldr	r0, [r2, #0]
 8003e90:	6018      	str	r0, [r3, #0]
 8003e92:	8892      	ldrh	r2, [r2, #4]
 8003e94:	809a      	strh	r2, [r3, #4]
			target_to_init->raw_data_buffer 	= RAW_DATA_BUFF_ZERO;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3307      	adds	r3, #7
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	809a      	strh	r2, [r3, #4]
			target_to_init->combined_word 	= COMBINED_WORD_BUFF_ZERO;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	81da      	strh	r2, [r3, #14]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	821a      	strh	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	825a      	strh	r2, [r3, #18]
			target_to_init->reading_float 			= FUSION_VECTOR_ZERO;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	615a      	str	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	619a      	str	r2, [r3, #24]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	61da      	str	r2, [r3, #28]
			target_to_init->slave_addr 				= LIS3MDL_I2C_SLAVE_ADDR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2238      	movs	r2, #56	; 0x38
 8003ece:	f883 2020 	strb.w	r2, [r3, #32]
			break;
 8003ed2:	bf00      	nop
	}
	return;
 8003ed4:	e000      	b.n	8003ed8 <Sensor_Unit_Init+0x11c>
			return;
 8003ed6:	bf00      	nop
}
 8003ed8:	377c      	adds	r7, #124	; 0x7c
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	0800e108 	.word	0x0800e108
 8003ee8:	0800e110 	.word	0x0800e110

08003eec <Sensor_Check_Ready>:


extern HAL_StatusTypeDef Sensor_Check_Ready(struct SENSOR_Driver *slave_to_check, I2C_HandleTypeDef i2c_handle)
{
 8003eec:	b084      	sub	sp, #16
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	f107 001c 	add.w	r0, r7, #28
 8003efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret =    HAL_I2C_IsDeviceReady(&i2c_handle,
																		    slave_to_check->slave_addr,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3020 	ldrb.w	r3, [r3, #32]
	HAL_StatusTypeDef ret =    HAL_I2C_IsDeviceReady(&i2c_handle,
 8003f04:	b299      	uxth	r1, r3
 8003f06:	f107 001c 	add.w	r0, r7, #28
 8003f0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f0e:	2232      	movs	r2, #50	; 0x32
 8003f10:	f001 fc60 	bl	80057d4 <HAL_I2C_IsDeviceReady>
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]
																							  CODY_MAX_TRIAL,
																							 CODY_MAX_DELAY);

	  return ret;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f24:	b004      	add	sp, #16
 8003f26:	4770      	bx	lr

08003f28 <Sensor_Set_Config>:

extern HAL_StatusTypeDef Sensor_Set_Config(struct SENSOR_Driver *slave_to_set, I2C_HandleTypeDef i2c_handle, uint8_t config_reg_addr, uint8_t val_to_set)
{
 8003f28:	b084      	sub	sp, #16
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b088      	sub	sp, #32
 8003f2e:	af04      	add	r7, sp, #16
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	f107 001c 	add.w	r0, r7, #28
 8003f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//set the config for the sensor {might be called multiple times on one sensor}
	HAL_StatusTypeDef ret_1 = HAL_I2C_Mem_Write(&i2c_handle,
																	   	    slave_to_set->slave_addr,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
	HAL_StatusTypeDef ret_1 = HAL_I2C_Mem_Write(&i2c_handle,
 8003f40:	b299      	uxth	r1, r3
 8003f42:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	f107 001c 	add.w	r0, r7, #28
 8003f4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f50:	9302      	str	r3, [sp, #8]
 8003f52:	2301      	movs	r3, #1
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f001 fa0b 	bl	8005378 <HAL_I2C_Mem_Write>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
																		    I2C_MEMADD_SIZE_8BIT,
																		  	  	  	  	  	  	      &val_to_set,
																			I2C_MEMADD_SIZE_8BIT,
																				  	    CODY_MAX_DELAY);

	return (ret_1);
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f72:	b004      	add	sp, #16
 8003f74:	4770      	bx	lr

08003f76 <Sensor_Read_Data>:

extern HAL_StatusTypeDef Sensor_Read_Data(struct SENSOR_Driver *slave_to_read, I2C_HandleTypeDef i2c_handle)
{
 8003f76:	b084      	sub	sp, #16
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af04      	add	r7, sp, #16
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f84:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	//loading data from X_AXIS LOW register
	HAL_StatusTypeDef ret_0 = HAL_I2C_Mem_Read(&i2c_handle,
																		 slave_to_read->slave_addr,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
	HAL_StatusTypeDef ret_0 = HAL_I2C_Mem_Read(&i2c_handle,
 8003f8e:	b299      	uxth	r1, r3
									  slave_to_read->reg_addr_ls.data_register.x_l,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	785b      	ldrb	r3, [r3, #1]
	HAL_StatusTypeDef ret_0 = HAL_I2C_Mem_Read(&i2c_handle,
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3307      	adds	r3, #7
 8003f9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f9e:	f242 7410 	movw	r4, #10000	; 0x2710
 8003fa2:	9402      	str	r4, [sp, #8]
 8003fa4:	2401      	movs	r4, #1
 8003fa6:	9401      	str	r4, [sp, #4]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2301      	movs	r3, #1
 8003fac:	f001 faf8 	bl	80055a0 <HAL_I2C_Mem_Read>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	73fb      	strb	r3, [r7, #15]
		                &(slave_to_read->raw_data_buffer.data_register.x_l),
																			 I2C_MEMADD_SIZE_8BIT,
																			 	 	 	 CODY_MAX_DELAY);
	//loading data from X_AXIS HIGH register
	HAL_StatusTypeDef ret_1 = HAL_I2C_Mem_Read(&i2c_handle,
																		 slave_to_read->slave_addr,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
	HAL_StatusTypeDef ret_1 = HAL_I2C_Mem_Read(&i2c_handle,
 8003fba:	b299      	uxth	r1, r3
									 slave_to_read->reg_addr_ls.data_register.x_h,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	789b      	ldrb	r3, [r3, #2]
	HAL_StatusTypeDef ret_1 = HAL_I2C_Mem_Read(&i2c_handle,
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fca:	f242 7410 	movw	r4, #10000	; 0x2710
 8003fce:	9402      	str	r4, [sp, #8]
 8003fd0:	2401      	movs	r4, #1
 8003fd2:	9401      	str	r4, [sp, #4]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f001 fae2 	bl	80055a0 <HAL_I2C_Mem_Read>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	73bb      	strb	r3, [r7, #14]
                       &(slave_to_read->raw_data_buffer.data_register.x_h),
																			I2C_MEMADD_SIZE_8BIT,
																			 	 	 	CODY_MAX_DELAY);
	//loading data from Y_AXIS LOW register
	HAL_StatusTypeDef ret_2 = HAL_I2C_Mem_Read(&i2c_handle,
																		 slave_to_read->slave_addr,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
	HAL_StatusTypeDef ret_2 = HAL_I2C_Mem_Read(&i2c_handle,
 8003fe6:	b299      	uxth	r1, r3
									  slave_to_read->reg_addr_ls.data_register.y_l,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	78db      	ldrb	r3, [r3, #3]
	HAL_StatusTypeDef ret_2 = HAL_I2C_Mem_Read(&i2c_handle,
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3309      	adds	r3, #9
 8003ff2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ff6:	f242 7410 	movw	r4, #10000	; 0x2710
 8003ffa:	9402      	str	r4, [sp, #8]
 8003ffc:	2401      	movs	r4, #1
 8003ffe:	9401      	str	r4, [sp, #4]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	2301      	movs	r3, #1
 8004004:	f001 facc 	bl	80055a0 <HAL_I2C_Mem_Read>
 8004008:	4603      	mov	r3, r0
 800400a:	737b      	strb	r3, [r7, #13]
						&(slave_to_read->raw_data_buffer.data_register.y_l),
																			 I2C_MEMADD_SIZE_8BIT,
																			 	 	 	 CODY_MAX_DELAY);
	//loading data from Y_AXIS HIGH register
	HAL_StatusTypeDef ret_3 = HAL_I2C_Mem_Read(&i2c_handle,
																		 slave_to_read->slave_addr,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3020 	ldrb.w	r3, [r3, #32]
	HAL_StatusTypeDef ret_3 = HAL_I2C_Mem_Read(&i2c_handle,
 8004012:	b299      	uxth	r1, r3
									 slave_to_read->reg_addr_ls.data_register.y_h,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	791b      	ldrb	r3, [r3, #4]
	HAL_StatusTypeDef ret_3 = HAL_I2C_Mem_Read(&i2c_handle,
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	330a      	adds	r3, #10
 800401e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004022:	f242 7410 	movw	r4, #10000	; 0x2710
 8004026:	9402      	str	r4, [sp, #8]
 8004028:	2401      	movs	r4, #1
 800402a:	9401      	str	r4, [sp, #4]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	2301      	movs	r3, #1
 8004030:	f001 fab6 	bl	80055a0 <HAL_I2C_Mem_Read>
 8004034:	4603      	mov	r3, r0
 8004036:	733b      	strb	r3, [r7, #12]
						&(slave_to_read->raw_data_buffer.data_register.y_h),
																			 I2C_MEMADD_SIZE_8BIT,
																			 	 	 	 CODY_MAX_DELAY);
	//loading data from Z_AXIS LOW register
	HAL_StatusTypeDef ret_4 = HAL_I2C_Mem_Read(&i2c_handle,
																		 slave_to_read->slave_addr,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3020 	ldrb.w	r3, [r3, #32]
	HAL_StatusTypeDef ret_4 = HAL_I2C_Mem_Read(&i2c_handle,
 800403e:	b299      	uxth	r1, r3
									   slave_to_read->reg_addr_ls.data_register.z_l,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	795b      	ldrb	r3, [r3, #5]
	HAL_StatusTypeDef ret_4 = HAL_I2C_Mem_Read(&i2c_handle,
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	330b      	adds	r3, #11
 800404a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800404e:	f242 7410 	movw	r4, #10000	; 0x2710
 8004052:	9402      	str	r4, [sp, #8]
 8004054:	2401      	movs	r4, #1
 8004056:	9401      	str	r4, [sp, #4]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2301      	movs	r3, #1
 800405c:	f001 faa0 	bl	80055a0 <HAL_I2C_Mem_Read>
 8004060:	4603      	mov	r3, r0
 8004062:	72fb      	strb	r3, [r7, #11]
						 &(slave_to_read->raw_data_buffer.data_register.z_l),
																			 I2C_MEMADD_SIZE_8BIT,
																			 	 	 	 CODY_MAX_DELAY);
	//loading data from Z_AXIS HIGH register
	HAL_StatusTypeDef ret_5 = HAL_I2C_Mem_Read(&i2c_handle,
																		 slave_to_read->slave_addr,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3020 	ldrb.w	r3, [r3, #32]
	HAL_StatusTypeDef ret_5 = HAL_I2C_Mem_Read(&i2c_handle,
 800406a:	b299      	uxth	r1, r3
									 slave_to_read->reg_addr_ls.data_register.z_h,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	799b      	ldrb	r3, [r3, #6]
	HAL_StatusTypeDef ret_5 = HAL_I2C_Mem_Read(&i2c_handle,
 8004070:	b29a      	uxth	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	330c      	adds	r3, #12
 8004076:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800407a:	f242 7410 	movw	r4, #10000	; 0x2710
 800407e:	9402      	str	r4, [sp, #8]
 8004080:	2401      	movs	r4, #1
 8004082:	9401      	str	r4, [sp, #4]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	2301      	movs	r3, #1
 8004088:	f001 fa8a 	bl	80055a0 <HAL_I2C_Mem_Read>
 800408c:	4603      	mov	r3, r0
 800408e:	72bb      	strb	r3, [r7, #10]
																  	  	    I2C_MEMADD_SIZE_8BIT,
						&(slave_to_read->raw_data_buffer.data_register.z_h),
																			I2C_MEMADD_SIZE_8BIT,
																			 	 	 	CODY_MAX_DELAY);

	return (ret_0 && ret_1 && ret_2 && ret_3 && ret_4 && ret_5);
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d010      	beq.n	80040b8 <Sensor_Read_Data+0x142>
 8004096:	7bbb      	ldrb	r3, [r7, #14]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00d      	beq.n	80040b8 <Sensor_Read_Data+0x142>
 800409c:	7b7b      	ldrb	r3, [r7, #13]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <Sensor_Read_Data+0x142>
 80040a2:	7b3b      	ldrb	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <Sensor_Read_Data+0x142>
 80040a8:	7afb      	ldrb	r3, [r7, #11]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d004      	beq.n	80040b8 <Sensor_Read_Data+0x142>
 80040ae:	7abb      	ldrb	r3, [r7, #10]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <Sensor_Read_Data+0x142>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <Sensor_Read_Data+0x144>
 80040b8:	2300      	movs	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040c6:	b004      	add	sp, #16
 80040c8:	4770      	bx	lr

080040ca <convert_to_int16>:

extern int16_t convert_to_int16(uint8_t low_register, uint8_t high_register)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	4603      	mov	r3, r0
 80040d2:	460a      	mov	r2, r1
 80040d4:	71fb      	strb	r3, [r7, #7]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71bb      	strb	r3, [r7, #6]
//  return (int16_t)((bytes[1]<<8) | bytes[0]);
	return (int16_t) (high_register << 8 | low_register);
 80040da:	79bb      	ldrb	r3, [r7, #6]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	b21a      	sxth	r2, r3
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	b21b      	sxth	r3, r3
 80040e4:	4313      	orrs	r3, r2
 80040e6:	b21b      	sxth	r3, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <process_code>:

extern float process_code(int16_t code, double coeff_to_be_used)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	ed87 0b00 	vstr	d0, [r7]
 8004100:	81fb      	strh	r3, [r7, #14]
	return (float) ( (double)code * coeff_to_be_used);
 8004102:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc f9e4 	bl	80004d4 <__aeabi_i2d>
 800410c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004110:	f7fc fa4a 	bl	80005a8 <__aeabi_dmul>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	f7fc fd1c 	bl	8000b58 <__aeabi_d2f>
 8004120:	4603      	mov	r3, r0
 8004122:	ee07 3a90 	vmov	s15, r3
}
 8004126:	eeb0 0a67 	vmov.f32	s0, s15
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <Sensor_Data_Process>:

/**
 * TODO need to adjust for sensor reading averaging
 */
extern void Sensor_Data_Process(struct SENSOR_Driver *slave_to_read, float coeff)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	ed87 0a00 	vstr	s0, [r7]
	//all raw readings will be combined in this chunk
	slave_to_read->combined_word.axis.x = convert_to_int16(slave_to_read->raw_data_buffer.data_register.x_l,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	79da      	ldrb	r2, [r3, #7]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	7a1b      	ldrb	r3, [r3, #8]
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f7ff ffbf 	bl	80040ca <convert_to_int16>
 800414c:	4603      	mov	r3, r0
 800414e:	461a      	mov	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	81da      	strh	r2, [r3, #14]
																													slave_to_read->raw_data_buffer.data_register.x_h);

	slave_to_read->combined_word.axis.y = convert_to_int16(slave_to_read->raw_data_buffer.data_register.y_l,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	7a5a      	ldrb	r2, [r3, #9]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7a9b      	ldrb	r3, [r3, #10]
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f7ff ffb3 	bl	80040ca <convert_to_int16>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	821a      	strh	r2, [r3, #16]
																													slave_to_read->raw_data_buffer.data_register.y_h);

	slave_to_read->combined_word.axis.z = convert_to_int16(slave_to_read->raw_data_buffer.data_register.z_l,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	7ada      	ldrb	r2, [r3, #11]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7b1b      	ldrb	r3, [r3, #12]
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f7ff ffa7 	bl	80040ca <convert_to_int16>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	825a      	strh	r2, [r3, #18]
																													slave_to_read->raw_data_buffer.data_register.z_h);

	//calculations happen  here
	slave_to_read->reading_float.axis.x = process_code(slave_to_read->combined_word.axis.x, coeff);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800418a:	6838      	ldr	r0, [r7, #0]
 800418c:	f7fc f9b4 	bl	80004f8 <__aeabi_f2d>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	ec43 2b10 	vmov	d0, r2, r3
 8004198:	4620      	mov	r0, r4
 800419a:	f7ff ffab 	bl	80040f4 <process_code>
 800419e:	eef0 7a40 	vmov.f32	s15, s0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	edc3 7a05 	vstr	s15, [r3, #20]
	slave_to_read->reading_float.axis.y = process_code(slave_to_read->combined_word.axis.y, coeff);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 80041ae:	6838      	ldr	r0, [r7, #0]
 80041b0:	f7fc f9a2 	bl	80004f8 <__aeabi_f2d>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	ec43 2b10 	vmov	d0, r2, r3
 80041bc:	4620      	mov	r0, r4
 80041be:	f7ff ff99 	bl	80040f4 <process_code>
 80041c2:	eef0 7a40 	vmov.f32	s15, s0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	edc3 7a06 	vstr	s15, [r3, #24]
	slave_to_read->reading_float.axis.z = process_code(slave_to_read->combined_word.axis.z, coeff);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f9b3 4012 	ldrsh.w	r4, [r3, #18]
 80041d2:	6838      	ldr	r0, [r7, #0]
 80041d4:	f7fc f990 	bl	80004f8 <__aeabi_f2d>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	ec43 2b10 	vmov	d0, r2, r3
 80041e0:	4620      	mov	r0, r4
 80041e2:	f7ff ff87 	bl	80040f4 <process_code>
 80041e6:	eef0 7a40 	vmov.f32	s15, s0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	edc3 7a07 	vstr	s15, [r3, #28]

	return;
 80041f0:	bf00      	nop
}
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd90      	pop	{r4, r7, pc}

080041f8 <experiment_log>:
	return;
}


extern void experiment_log(char *word_buffer, FusionEuler * orientation, FusionVector *location, struct SENSOR_Driver *slave_xl,
		   struct SENSOR_Driver *slave_gr, struct SENSOR_Driver *slave_mg) {
 80041f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041fc:	b0b6      	sub	sp, #216	; 0xd8
 80041fe:	af1c      	add	r7, sp, #112	; 0x70
 8004200:	6678      	str	r0, [r7, #100]	; 0x64
 8004202:	6639      	str	r1, [r7, #96]	; 0x60
 8004204:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004206:	65bb      	str	r3, [r7, #88]	; 0x58

	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
				slave_xl->reading_float.axis.x, slave_xl->reading_float.axis.y, slave_xl->reading_float.axis.z,
 8004208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800420a:	695b      	ldr	r3, [r3, #20]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc f973 	bl	80004f8 <__aeabi_f2d>
 8004212:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				slave_xl->reading_float.axis.x, slave_xl->reading_float.axis.y, slave_xl->reading_float.axis.z,
 8004216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004218:	699b      	ldr	r3, [r3, #24]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc f96c 	bl	80004f8 <__aeabi_f2d>
 8004220:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				slave_xl->reading_float.axis.x, slave_xl->reading_float.axis.y, slave_xl->reading_float.axis.z,
 8004224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004226:	69db      	ldr	r3, [r3, #28]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 8004228:	4618      	mov	r0, r3
 800422a:	f7fc f965 	bl	80004f8 <__aeabi_f2d>
 800422e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				slave_gr->reading_float.axis.x, slave_gr->reading_float.axis.y, slave_gr->reading_float.axis.z,
 8004232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004236:	695b      	ldr	r3, [r3, #20]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc f95d 	bl	80004f8 <__aeabi_f2d>
 800423e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				slave_gr->reading_float.axis.x, slave_gr->reading_float.axis.y, slave_gr->reading_float.axis.z,
 8004242:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004246:	699b      	ldr	r3, [r3, #24]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 8004248:	4618      	mov	r0, r3
 800424a:	f7fc f955 	bl	80004f8 <__aeabi_f2d>
 800424e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				slave_gr->reading_float.axis.x, slave_gr->reading_float.axis.y, slave_gr->reading_float.axis.z,
 8004252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004256:	69db      	ldr	r3, [r3, #28]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc f94d 	bl	80004f8 <__aeabi_f2d>
 800425e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				slave_mg->reading_float.axis.x, slave_mg->reading_float.axis.y, slave_mg->reading_float.axis.z,
 8004262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004266:	695b      	ldr	r3, [r3, #20]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 8004268:	4618      	mov	r0, r3
 800426a:	f7fc f945 	bl	80004f8 <__aeabi_f2d>
 800426e:	e9c7 0108 	strd	r0, r1, [r7, #32]
				slave_mg->reading_float.axis.x, slave_mg->reading_float.axis.y, slave_mg->reading_float.axis.z,
 8004272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004276:	699b      	ldr	r3, [r3, #24]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 8004278:	4618      	mov	r0, r3
 800427a:	f7fc f93d 	bl	80004f8 <__aeabi_f2d>
 800427e:	e9c7 0106 	strd	r0, r1, [r7, #24]
				slave_mg->reading_float.axis.x, slave_mg->reading_float.axis.y, slave_mg->reading_float.axis.z,
 8004282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004286:	69db      	ldr	r3, [r3, #28]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 8004288:	4618      	mov	r0, r3
 800428a:	f7fc f935 	bl	80004f8 <__aeabi_f2d>
 800428e:	e9c7 0104 	strd	r0, r1, [r7, #16]
				orientation->angle.roll, orientation->angle.pitch, orientation->angle.yaw,
 8004292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004294:	681b      	ldr	r3, [r3, #0]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc f92e 	bl	80004f8 <__aeabi_f2d>
 800429c:	e9c7 0102 	strd	r0, r1, [r7, #8]
				orientation->angle.roll, orientation->angle.pitch, orientation->angle.yaw,
 80042a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a2:	685b      	ldr	r3, [r3, #4]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fc f927 	bl	80004f8 <__aeabi_f2d>
 80042aa:	e9c7 0100 	strd	r0, r1, [r7]
				orientation->angle.roll, orientation->angle.pitch, orientation->angle.yaw,
 80042ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b0:	689b      	ldr	r3, [r3, #8]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f920 	bl	80004f8 <__aeabi_f2d>
 80042b8:	4682      	mov	sl, r0
 80042ba:	468b      	mov	fp, r1
				location->axis.x, location->axis.y, location->axis.z);
 80042bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042be:	681b      	ldr	r3, [r3, #0]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc f919 	bl	80004f8 <__aeabi_f2d>
 80042c6:	4680      	mov	r8, r0
 80042c8:	4689      	mov	r9, r1
				location->axis.x, location->axis.y, location->axis.z);
 80042ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042cc:	685b      	ldr	r3, [r3, #4]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc f912 	bl	80004f8 <__aeabi_f2d>
 80042d4:	4604      	mov	r4, r0
 80042d6:	460d      	mov	r5, r1
				location->axis.x, location->axis.y, location->axis.z);
 80042d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042da:	689b      	ldr	r3, [r3, #8]
	sprintf(word_buffer, "%f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f' %f\r\n",
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fc f90b 	bl	80004f8 <__aeabi_f2d>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80042ea:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 80042ee:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 80042f2:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 80042f6:	ed97 7b00 	vldr	d7, [r7]
 80042fa:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80042fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8004302:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004306:	ed97 7b04 	vldr	d7, [r7, #16]
 800430a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800430e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004312:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004316:	ed97 7b08 	vldr	d7, [r7, #32]
 800431a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800431e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004322:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004326:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800432a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800432e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004332:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004336:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800433a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800433e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8004342:	ed8d 7b00 	vstr	d7, [sp]
 8004346:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800434a:	4904      	ldr	r1, [pc, #16]	; (800435c <experiment_log+0x164>)
 800434c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800434e:	f006 f8cf 	bl	800a4f0 <siprintf>

		return;
 8004352:	bf00      	nop
}
 8004354:	3768      	adds	r7, #104	; 0x68
 8004356:	46bd      	mov	sp, r7
 8004358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435c:	0800e26c 	.word	0x0800e26c

08004360 <Sensor_Uart>:
//	}
//	return;
//}

extern void Sensor_Uart(char *word_buffer, UART_HandleTypeDef uart_handle)
{
 8004360:	b084      	sub	sp, #16
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	f107 0014 	add.w	r0, r7, #20
 800436e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_UART_Transmit(&uart_handle,
							  (uint8_t *)word_buffer,
				   strlen((char * )word_buffer),
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fb ff04 	bl	8000180 <strlen>
 8004378:	4603      	mov	r3, r0
	HAL_UART_Transmit(&uart_handle,
 800437a:	b29a      	uxth	r2, r3
 800437c:	f107 0014 	add.w	r0, r7, #20
 8004380:	f242 7310 	movw	r3, #10000	; 0x2710
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	f003 fcb9 	bl	8007cfc <HAL_UART_Transmit>
				   	   	   	   	   CODY_MAX_DELAY);
	return;
 800438a:	bf00      	nop
}
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004394:	b004      	add	sp, #16
 8004396:	4770      	bx	lr

08004398 <LL_AHB1_GRP1_EnableClock>:
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80043b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043bc:	68fb      	ldr	r3, [r7, #12]
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <LL_AHB2_GRP1_EnableClock>:
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80043d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4313      	orrs	r3, r2
 80043e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4013      	ands	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800440a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4313      	orrs	r3, r2
 8004412:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4013      	ands	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004420:	68fb      	ldr	r3, [r7, #12]
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800443c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4313      	orrs	r3, r2
 8004444:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4013      	ands	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a05      	ldr	r2, [pc, #20]	; (8004494 <HAL_CRC_MspInit+0x24>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d103      	bne.n	800448a <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004482:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004486:	f7ff ff87 	bl	8004398 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40023000 	.word	0x40023000

08004498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b09c      	sub	sp, #112	; 0x70
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044b0:	f107 030c 	add.w	r3, r7, #12
 80044b4:	2250      	movs	r2, #80	; 0x50
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f005 fba7 	bl	8009c0c <memset>
  if(hi2c->Instance==I2C1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_I2C_MspInit+0x88>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d126      	bne.n	8004516 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80044c8:	2304      	movs	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80044cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044d2:	f107 030c 	add.w	r3, r7, #12
 80044d6:	4618      	mov	r0, r3
 80044d8:	f003 f919 	bl	800770e <HAL_RCCEx_PeriphCLKConfig>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80044e2:	f7ff fc65 	bl	8003db0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e6:	2002      	movs	r0, #2
 80044e8:	f7ff ff6f 	bl	80043ca <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044f2:	2312      	movs	r3, #18
 80044f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fa:	2300      	movs	r3, #0
 80044fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044fe:	2304      	movs	r3, #4
 8004500:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004502:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004506:	4619      	mov	r1, r3
 8004508:	4806      	ldr	r0, [pc, #24]	; (8004524 <HAL_I2C_MspInit+0x8c>)
 800450a:	f000 fd1d 	bl	8004f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800450e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004512:	f7ff ff73 	bl	80043fc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004516:	bf00      	nop
 8004518:	3770      	adds	r7, #112	; 0x70
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40005400 	.word	0x40005400
 8004524:	48000400 	.word	0x48000400

08004528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b09c      	sub	sp, #112	; 0x70
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004530:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	2250      	movs	r2, #80	; 0x50
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f005 fb5f 	bl	8009c0c <memset>
  if(huart->Instance==USART1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1a      	ldr	r2, [pc, #104]	; (80045bc <HAL_UART_MspInit+0x94>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d12c      	bne.n	80045b2 <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004558:	2301      	movs	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	4618      	mov	r0, r3
 8004566:	f003 f8d2 	bl	800770e <HAL_RCCEx_PeriphCLKConfig>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004570:	f7ff fc1e 	bl	8003db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004574:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004578:	f7ff ff59 	bl	800442e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800457c:	2002      	movs	r0, #2
 800457e:	f7ff ff24 	bl	80043ca <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004582:	23c0      	movs	r3, #192	; 0xc0
 8004584:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004586:	2302      	movs	r3, #2
 8004588:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800458a:	2301      	movs	r3, #1
 800458c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458e:	2300      	movs	r3, #0
 8004590:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004592:	2307      	movs	r3, #7
 8004594:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004596:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800459a:	4619      	mov	r1, r3
 800459c:	4808      	ldr	r0, [pc, #32]	; (80045c0 <HAL_UART_MspInit+0x98>)
 800459e:	f000 fcd3 	bl	8004f48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	2024      	movs	r0, #36	; 0x24
 80045a8:	f000 faf1 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80045ac:	2024      	movs	r0, #36	; 0x24
 80045ae:	f000 fb08 	bl	8004bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80045b2:	bf00      	nop
 80045b4:	3770      	adds	r7, #112	; 0x70
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40013800 	.word	0x40013800
 80045c0:	48000400 	.word	0x48000400

080045c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045c8:	e7fe      	b.n	80045c8 <NMI_Handler+0x4>

080045ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ce:	e7fe      	b.n	80045ce <HardFault_Handler+0x4>

080045d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045d4:	e7fe      	b.n	80045d4 <MemManage_Handler+0x4>

080045d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045da:	e7fe      	b.n	80045da <BusFault_Handler+0x4>

080045dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045e0:	e7fe      	b.n	80045e0 <UsageFault_Handler+0x4>

080045e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004610:	f000 f9b6 	bl	8004980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004614:	bf00      	nop
 8004616:	bd80      	pop	{r7, pc}

08004618 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800461c:	4802      	ldr	r0, [pc, #8]	; (8004628 <USART1_IRQHandler+0x10>)
 800461e:	f003 fc59 	bl	8007ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000274 	.word	0x20000274

0800462c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
	return 1;
 8004630:	2301      	movs	r3, #1
}
 8004632:	4618      	mov	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <_kill>:

int _kill(int pid, int sig)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004646:	f005 faa9 	bl	8009b9c <__errno>
 800464a:	4603      	mov	r3, r0
 800464c:	2216      	movs	r2, #22
 800464e:	601a      	str	r2, [r3, #0]
	return -1;
 8004650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <_exit>:

void _exit (int status)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff ffe7 	bl	800463c <_kill>
	while (1) {}		/* Make sure we hang here */
 800466e:	e7fe      	b.n	800466e <_exit+0x12>

08004670 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e00a      	b.n	8004698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004682:	f3af 8000 	nop.w
 8004686:	4601      	mov	r1, r0
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	60ba      	str	r2, [r7, #8]
 800468e:	b2ca      	uxtb	r2, r1
 8004690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	3301      	adds	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	dbf0      	blt.n	8004682 <_read+0x12>
	}

return len;
 80046a0:	687b      	ldr	r3, [r7, #4]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	e009      	b.n	80046d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	60ba      	str	r2, [r7, #8]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	3301      	adds	r3, #1
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	dbf1      	blt.n	80046bc <_write+0x12>
	}
	return len;
 80046d8:	687b      	ldr	r3, [r7, #4]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <_close>:

int _close(int file)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
	return -1;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800470a:	605a      	str	r2, [r3, #4]
	return 0;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <_isatty>:

int _isatty(int file)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
	return 1;
 8004722:	2301      	movs	r3, #1
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
	return 0;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004754:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <_sbrk+0x5c>)
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <_sbrk+0x60>)
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004760:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <_sbrk+0x64>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004768:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <_sbrk+0x64>)
 800476a:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <_sbrk+0x68>)
 800476c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <_sbrk+0x64>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	429a      	cmp	r2, r3
 800477a:	d207      	bcs.n	800478c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800477c:	f005 fa0e 	bl	8009b9c <__errno>
 8004780:	4603      	mov	r3, r0
 8004782:	220c      	movs	r2, #12
 8004784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800478a:	e009      	b.n	80047a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <_sbrk+0x64>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <_sbrk+0x64>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <_sbrk+0x64>)
 800479c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20030000 	.word	0x20030000
 80047ac:	00000400 	.word	0x00000400
 80047b0:	20000540 	.word	0x20000540
 80047b4:	20000558 	.word	0x20000558

080047b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <SystemInit+0x98>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	4a23      	ldr	r2, [pc, #140]	; (8004850 <SystemInit+0x98>)
 80047c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80047cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80047dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80047e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047f0:	4b18      	ldr	r3, [pc, #96]	; (8004854 <SystemInit+0x9c>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004802:	f023 0305 	bic.w	r3, r3, #5
 8004806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800480a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004822:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <SystemInit+0xa0>)
 8004824:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <SystemInit+0xa0>)
 800482c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800482e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800483e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004842:	2200      	movs	r2, #0
 8004844:	619a      	str	r2, [r3, #24]
}
 8004846:	bf00      	nop
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed00 	.word	0xe000ed00
 8004854:	faf6fefb 	.word	0xfaf6fefb
 8004858:	22041000 	.word	0x22041000

0800485c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800485c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800485e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004860:	3304      	adds	r3, #4

08004862 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004862:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004864:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004866:	d3f9      	bcc.n	800485c <CopyDataInit>
  bx lr
 8004868:	4770      	bx	lr

0800486a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800486a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800486c:	3004      	adds	r0, #4

0800486e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800486e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004870:	d3fb      	bcc.n	800486a <FillZerobss>
  bx lr
 8004872:	4770      	bx	lr

08004874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004874:	480c      	ldr	r0, [pc, #48]	; (80048a8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004876:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004878:	f7ff ff9e 	bl	80047b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800487c:	480b      	ldr	r0, [pc, #44]	; (80048ac <LoopForever+0x8>)
 800487e:	490c      	ldr	r1, [pc, #48]	; (80048b0 <LoopForever+0xc>)
 8004880:	4a0c      	ldr	r2, [pc, #48]	; (80048b4 <LoopForever+0x10>)
 8004882:	2300      	movs	r3, #0
 8004884:	f7ff ffed 	bl	8004862 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004888:	480b      	ldr	r0, [pc, #44]	; (80048b8 <LoopForever+0x14>)
 800488a:	490c      	ldr	r1, [pc, #48]	; (80048bc <LoopForever+0x18>)
 800488c:	2300      	movs	r3, #0
 800488e:	f7ff ffee 	bl	800486e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004892:	480b      	ldr	r0, [pc, #44]	; (80048c0 <LoopForever+0x1c>)
 8004894:	490b      	ldr	r1, [pc, #44]	; (80048c4 <LoopForever+0x20>)
 8004896:	2300      	movs	r3, #0
 8004898:	f7ff ffe9 	bl	800486e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800489c:	f005 f984 	bl	8009ba8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80048a0:	f7fe fdfa 	bl	8003498 <main>

080048a4 <LoopForever>:

LoopForever:
  b LoopForever
 80048a4:	e7fe      	b.n	80048a4 <LoopForever>
 80048a6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80048a8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80048ac:	20000004 	.word	0x20000004
 80048b0:	200001e0 	.word	0x200001e0
 80048b4:	0800ec54 	.word	0x0800ec54
  INIT_BSS _sbss, _ebss
 80048b8:	200001e0 	.word	0x200001e0
 80048bc:	20000558 	.word	0x20000558
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80048c0:	20030000 	.word	0x20030000
 80048c4:	20030000 	.word	0x20030000

080048c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048c8:	e7fe      	b.n	80048c8 <ADC1_IRQHandler>
	...

080048cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <HAL_Init+0x3c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <HAL_Init+0x3c>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048e2:	2003      	movs	r0, #3
 80048e4:	f000 f948 	bl	8004b78 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048e8:	2000      	movs	r0, #0
 80048ea:	f000 f80f 	bl	800490c <HAL_InitTick>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	71fb      	strb	r3, [r7, #7]
 80048f8:	e001      	b.n	80048fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048fa:	f7ff fdb1 	bl	8004460 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048fe:	79fb      	ldrb	r3, [r7, #7]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	58004000 	.word	0x58004000

0800490c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_InitTick+0x6c>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d024      	beq.n	800496a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004920:	f002 fc64 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_InitTick+0x6c>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	4619      	mov	r1, r3
 800492c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004930:	fbb3 f3f1 	udiv	r3, r3, r1
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f950 	bl	8004bde <HAL_SYSTICK_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10f      	bne.n	8004964 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b0f      	cmp	r3, #15
 8004948:	d809      	bhi.n	800495e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800494a:	2200      	movs	r2, #0
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004952:	f000 f91c 	bl	8004b8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004956:	4a09      	ldr	r2, [pc, #36]	; (800497c <HAL_InitTick+0x70>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e007      	b.n	800496e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
 8004962:	e004      	b.n	800496e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e001      	b.n	800496e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800496e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	2000000c 	.word	0x2000000c
 800497c:	20000008 	.word	0x20000008

08004980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_IncTick+0x20>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_IncTick+0x24>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4413      	add	r3, r2
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <HAL_IncTick+0x24>)
 8004992:	6013      	str	r3, [r2, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	2000000c 	.word	0x2000000c
 80049a4:	20000544 	.word	0x20000544

080049a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return uwTick;
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <HAL_GetTick+0x14>)
 80049ae:	681b      	ldr	r3, [r3, #0]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000544 	.word	0x20000544

080049c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_GetTickPrio+0x14>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000008 	.word	0x20000008

080049d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <__NVIC_SetPriorityGrouping+0x44>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049f4:	4013      	ands	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a0a:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <__NVIC_SetPriorityGrouping+0x44>)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	60d3      	str	r3, [r2, #12]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <__NVIC_GetPriorityGrouping+0x18>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	f003 0307 	and.w	r3, r3, #7
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	db0b      	blt.n	8004a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	f003 021f 	and.w	r2, r3, #31
 8004a54:	4907      	ldr	r1, [pc, #28]	; (8004a74 <__NVIC_EnableIRQ+0x38>)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	e000e100 	.word	0xe000e100

08004a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	db0a      	blt.n	8004aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	490c      	ldr	r1, [pc, #48]	; (8004ac4 <__NVIC_SetPriority+0x4c>)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	0112      	lsls	r2, r2, #4
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aa0:	e00a      	b.n	8004ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	4908      	ldr	r1, [pc, #32]	; (8004ac8 <__NVIC_SetPriority+0x50>)
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	3b04      	subs	r3, #4
 8004ab0:	0112      	lsls	r2, r2, #4
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	761a      	strb	r2, [r3, #24]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000e100 	.word	0xe000e100
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	; 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	bf28      	it	cs
 8004aea:	2304      	movcs	r3, #4
 8004aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	3304      	adds	r3, #4
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d902      	bls.n	8004afc <NVIC_EncodePriority+0x30>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3b03      	subs	r3, #3
 8004afa:	e000      	b.n	8004afe <NVIC_EncodePriority+0x32>
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43da      	mvns	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	401a      	ands	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	43d9      	mvns	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b24:	4313      	orrs	r3, r2
         );
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3724      	adds	r7, #36	; 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b44:	d301      	bcc.n	8004b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b46:	2301      	movs	r3, #1
 8004b48:	e00f      	b.n	8004b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <SysTick_Config+0x40>)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b52:	210f      	movs	r1, #15
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b58:	f7ff ff8e 	bl	8004a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <SysTick_Config+0x40>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b62:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <SysTick_Config+0x40>)
 8004b64:	2207      	movs	r2, #7
 8004b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	e000e010 	.word	0xe000e010

08004b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ff29 	bl	80049d8 <__NVIC_SetPriorityGrouping>
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b9c:	f7ff ff40 	bl	8004a20 <__NVIC_GetPriorityGrouping>
 8004ba0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	6978      	ldr	r0, [r7, #20]
 8004ba8:	f7ff ff90 	bl	8004acc <NVIC_EncodePriority>
 8004bac:	4602      	mov	r2, r0
 8004bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff5f 	bl	8004a78 <__NVIC_SetPriority>
}
 8004bba:	bf00      	nop
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	4603      	mov	r3, r0
 8004bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff ff33 	bl	8004a3c <__NVIC_EnableIRQ>
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff ffa4 	bl	8004b34 <SysTick_Config>
 8004bec:	4603      	mov	r3, r0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e054      	b.n	8004cb4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	7f5b      	ldrb	r3, [r3, #29]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d105      	bne.n	8004c20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff fc28 	bl	8004470 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	791b      	ldrb	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10c      	bne.n	8004c48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <HAL_CRC_Init+0xc4>)
 8004c34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0218 	bic.w	r2, r2, #24
 8004c44:	609a      	str	r2, [r3, #8]
 8004c46:	e00c      	b.n	8004c62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6899      	ldr	r1, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	461a      	mov	r2, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f834 	bl	8004cc0 <HAL_CRCEx_Polynomial_Set>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e028      	b.n	8004cb4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	795b      	ldrb	r3, [r3, #5]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c72:	611a      	str	r2, [r3, #16]
 8004c74:	e004      	b.n	8004c80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6912      	ldr	r2, [r2, #16]
 8004c7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	04c11db7 	.word	0x04c11db7

08004cc0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004cd0:	231f      	movs	r3, #31
 8004cd2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004cd4:	bf00      	nop
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1e5a      	subs	r2, r3, #1
 8004cda:	613a      	str	r2, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d009      	beq.n	8004cf4 <HAL_CRCEx_Polynomial_Set+0x34>
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b18      	cmp	r3, #24
 8004cf8:	d846      	bhi.n	8004d88 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d8f 	.word	0x08004d8f
 8004d04:	08004d89 	.word	0x08004d89
 8004d08:	08004d89 	.word	0x08004d89
 8004d0c:	08004d89 	.word	0x08004d89
 8004d10:	08004d89 	.word	0x08004d89
 8004d14:	08004d89 	.word	0x08004d89
 8004d18:	08004d89 	.word	0x08004d89
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004d7d 	.word	0x08004d7d
 8004d24:	08004d89 	.word	0x08004d89
 8004d28:	08004d89 	.word	0x08004d89
 8004d2c:	08004d89 	.word	0x08004d89
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004d89 	.word	0x08004d89
 8004d3c:	08004d89 	.word	0x08004d89
 8004d40:	08004d71 	.word	0x08004d71
 8004d44:	08004d89 	.word	0x08004d89
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d89 	.word	0x08004d89
 8004d50:	08004d89 	.word	0x08004d89
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004d89 	.word	0x08004d89
 8004d5c:	08004d89 	.word	0x08004d89
 8004d60:	08004d65 	.word	0x08004d65
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b06      	cmp	r3, #6
 8004d68:	d913      	bls.n	8004d92 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d6e:	e010      	b.n	8004d92 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b07      	cmp	r3, #7
 8004d74:	d90f      	bls.n	8004d96 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d7a:	e00c      	b.n	8004d96 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b0f      	cmp	r3, #15
 8004d80:	d90b      	bls.n	8004d9a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d86:	e008      	b.n	8004d9a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8c:	e006      	b.n	8004d9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d8e:	bf00      	nop
 8004d90:	e004      	b.n	8004d9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d92:	bf00      	nop
 8004d94:	e002      	b.n	8004d9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d96:	bf00      	nop
 8004d98:	e000      	b.n	8004d9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d9a:	bf00      	nop
  }
  if (status == HAL_OK)
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 0118 	bic.w	r1, r3, #24
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e04f      	b.n	8004e7e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d008      	beq.n	8004dfc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2204      	movs	r2, #4
 8004dee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e040      	b.n	8004e7e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 020e 	bic.w	r2, r2, #14
 8004e0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	f003 021c 	and.w	r2, r3, #28
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d005      	beq.n	8004eae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	e047      	b.n	8004f3e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 020e 	bic.w	r2, r2, #14
 8004ebc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004edc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	f003 021c 	and.w	r2, r3, #28
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	2101      	movs	r1, #1
 8004eec:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004efa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00c      	beq.n	8004f1e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	4798      	blx	r3
    }
  }
  return status;
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f56:	e14c      	b.n	80051f2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	4013      	ands	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 813e 	beq.w	80051ec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d005      	beq.n	8004f88 <HAL_GPIO_Init+0x40>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d130      	bne.n	8004fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	2203      	movs	r2, #3
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f003 0201 	and.w	r2, r3, #1
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d017      	beq.n	8005026 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	2203      	movs	r2, #3
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43db      	mvns	r3, r3
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d123      	bne.n	800507a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	08da      	lsrs	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3208      	adds	r2, #8
 800503a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	220f      	movs	r2, #15
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	08da      	lsrs	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3208      	adds	r2, #8
 8005074:	6939      	ldr	r1, [r7, #16]
 8005076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	2203      	movs	r2, #3
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4013      	ands	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 0203 	and.w	r2, r3, #3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8098 	beq.w	80051ec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80050bc:	4a54      	ldr	r2, [pc, #336]	; (8005210 <HAL_GPIO_Init+0x2c8>)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	3302      	adds	r3, #2
 80050c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	220f      	movs	r2, #15
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050e6:	d019      	beq.n	800511c <HAL_GPIO_Init+0x1d4>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a4a      	ldr	r2, [pc, #296]	; (8005214 <HAL_GPIO_Init+0x2cc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_GPIO_Init+0x1d0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a49      	ldr	r2, [pc, #292]	; (8005218 <HAL_GPIO_Init+0x2d0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00d      	beq.n	8005114 <HAL_GPIO_Init+0x1cc>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a48      	ldr	r2, [pc, #288]	; (800521c <HAL_GPIO_Init+0x2d4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d007      	beq.n	8005110 <HAL_GPIO_Init+0x1c8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a47      	ldr	r2, [pc, #284]	; (8005220 <HAL_GPIO_Init+0x2d8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_GPIO_Init+0x1c4>
 8005108:	2304      	movs	r3, #4
 800510a:	e008      	b.n	800511e <HAL_GPIO_Init+0x1d6>
 800510c:	2307      	movs	r3, #7
 800510e:	e006      	b.n	800511e <HAL_GPIO_Init+0x1d6>
 8005110:	2303      	movs	r3, #3
 8005112:	e004      	b.n	800511e <HAL_GPIO_Init+0x1d6>
 8005114:	2302      	movs	r3, #2
 8005116:	e002      	b.n	800511e <HAL_GPIO_Init+0x1d6>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_GPIO_Init+0x1d6>
 800511c:	2300      	movs	r3, #0
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	f002 0203 	and.w	r2, r2, #3
 8005124:	0092      	lsls	r2, r2, #2
 8005126:	4093      	lsls	r3, r2
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800512e:	4938      	ldr	r1, [pc, #224]	; (8005210 <HAL_GPIO_Init+0x2c8>)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	089b      	lsrs	r3, r3, #2
 8005134:	3302      	adds	r3, #2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800513c:	4b39      	ldr	r3, [pc, #228]	; (8005224 <HAL_GPIO_Init+0x2dc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	43db      	mvns	r3, r3
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4013      	ands	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005160:	4a30      	ldr	r2, [pc, #192]	; (8005224 <HAL_GPIO_Init+0x2dc>)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005166:	4b2f      	ldr	r3, [pc, #188]	; (8005224 <HAL_GPIO_Init+0x2dc>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	43db      	mvns	r3, r3
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4013      	ands	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800518a:	4a26      	ldr	r2, [pc, #152]	; (8005224 <HAL_GPIO_Init+0x2dc>)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005190:	4b24      	ldr	r3, [pc, #144]	; (8005224 <HAL_GPIO_Init+0x2dc>)
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	43db      	mvns	r3, r3
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4013      	ands	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051b6:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <HAL_GPIO_Init+0x2dc>)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80051be:	4b19      	ldr	r3, [pc, #100]	; (8005224 <HAL_GPIO_Init+0x2dc>)
 80051c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	43db      	mvns	r3, r3
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4013      	ands	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80051e4:	4a0f      	ldr	r2, [pc, #60]	; (8005224 <HAL_GPIO_Init+0x2dc>)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	3301      	adds	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f47f aeab 	bne.w	8004f58 <HAL_GPIO_Init+0x10>
  }
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	40010000 	.word	0x40010000
 8005214:	48000400 	.word	0x48000400
 8005218:	48000800 	.word	0x48000800
 800521c:	48000c00 	.word	0x48000c00
 8005220:	48001000 	.word	0x48001000
 8005224:	58000800 	.word	0x58000800

08005228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	807b      	strh	r3, [r7, #2]
 8005234:	4613      	mov	r3, r2
 8005236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005238:	787b      	ldrb	r3, [r7, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800523e:	887a      	ldrh	r2, [r7, #2]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005244:	e002      	b.n	800524c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e081      	b.n	800536e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff f90a 	bl	8004498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2224      	movs	r2, #36	; 0x24
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0201 	bic.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d107      	bne.n	80052d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	e006      	b.n	80052e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80052de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d104      	bne.n	80052f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69d9      	ldr	r1, [r3, #28]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	4608      	mov	r0, r1
 8005382:	4611      	mov	r1, r2
 8005384:	461a      	mov	r2, r3
 8005386:	4603      	mov	r3, r0
 8005388:	817b      	strh	r3, [r7, #10]
 800538a:	460b      	mov	r3, r1
 800538c:	813b      	strh	r3, [r7, #8]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b20      	cmp	r3, #32
 800539c:	f040 80f9 	bne.w	8005592 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_I2C_Mem_Write+0x34>
 80053a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0ed      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_I2C_Mem_Write+0x4e>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e0e6      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053ce:	f7ff faeb 	bl	80049a8 <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2319      	movs	r3, #25
 80053da:	2201      	movs	r2, #1
 80053dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fbcb 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0d1      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2221      	movs	r2, #33	; 0x21
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a3a      	ldr	r2, [r7, #32]
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005418:	88f8      	ldrh	r0, [r7, #6]
 800541a:	893a      	ldrh	r2, [r7, #8]
 800541c:	8979      	ldrh	r1, [r7, #10]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	4603      	mov	r3, r0
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fadb 	bl	80059e4 <I2C_RequestMemoryWrite>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0a9      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2bff      	cmp	r3, #255	; 0xff
 8005448:	d90e      	bls.n	8005468 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005454:	b2da      	uxtb	r2, r3
 8005456:	8979      	ldrh	r1, [r7, #10]
 8005458:	2300      	movs	r3, #0
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fd33 	bl	8005ecc <I2C_TransferConfig>
 8005466:	e00f      	b.n	8005488 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005476:	b2da      	uxtb	r2, r3
 8005478:	8979      	ldrh	r1, [r7, #10]
 800547a:	2300      	movs	r3, #0
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fd22 	bl	8005ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fbb5 	bl	8005bfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e07b      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d034      	beq.n	8005540 <HAL_I2C_Mem_Write+0x1c8>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d130      	bne.n	8005540 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	2200      	movs	r2, #0
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fb47 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e04d      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2bff      	cmp	r3, #255	; 0xff
 8005500:	d90e      	bls.n	8005520 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550c:	b2da      	uxtb	r2, r3
 800550e:	8979      	ldrh	r1, [r7, #10]
 8005510:	2300      	movs	r3, #0
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fcd7 	bl	8005ecc <I2C_TransferConfig>
 800551e:	e00f      	b.n	8005540 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552e:	b2da      	uxtb	r2, r3
 8005530:	8979      	ldrh	r1, [r7, #10]
 8005532:	2300      	movs	r3, #0
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fcc6 	bl	8005ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d19e      	bne.n	8005488 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fb94 	bl	8005c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e01a      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2220      	movs	r2, #32
 8005564:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_I2C_Mem_Write+0x224>)
 8005572:	400b      	ands	r3, r1
 8005574:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	fe00e800 	.word	0xfe00e800

080055a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	4608      	mov	r0, r1
 80055aa:	4611      	mov	r1, r2
 80055ac:	461a      	mov	r2, r3
 80055ae:	4603      	mov	r3, r0
 80055b0:	817b      	strh	r3, [r7, #10]
 80055b2:	460b      	mov	r3, r1
 80055b4:	813b      	strh	r3, [r7, #8]
 80055b6:	4613      	mov	r3, r2
 80055b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	f040 80fd 	bne.w	80057c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_I2C_Mem_Read+0x34>
 80055ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d105      	bne.n	80055e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0f1      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_I2C_Mem_Read+0x4e>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e0ea      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055f6:	f7ff f9d7 	bl	80049a8 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2319      	movs	r3, #25
 8005602:	2201      	movs	r2, #1
 8005604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 fab7 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0d5      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2222      	movs	r2, #34	; 0x22
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2240      	movs	r2, #64	; 0x40
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a3a      	ldr	r2, [r7, #32]
 8005632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005640:	88f8      	ldrh	r0, [r7, #6]
 8005642:	893a      	ldrh	r2, [r7, #8]
 8005644:	8979      	ldrh	r1, [r7, #10]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	4603      	mov	r3, r0
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 fa1b 	bl	8005a8c <I2C_RequestMemoryRead>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0ad      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	2bff      	cmp	r3, #255	; 0xff
 8005670:	d90e      	bls.n	8005690 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	b2da      	uxtb	r2, r3
 800567e:	8979      	ldrh	r1, [r7, #10]
 8005680:	4b52      	ldr	r3, [pc, #328]	; (80057cc <HAL_I2C_Mem_Read+0x22c>)
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fc1f 	bl	8005ecc <I2C_TransferConfig>
 800568e:	e00f      	b.n	80056b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	8979      	ldrh	r1, [r7, #10]
 80056a2:	4b4a      	ldr	r3, [pc, #296]	; (80057cc <HAL_I2C_Mem_Read+0x22c>)
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fc0e 	bl	8005ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	2200      	movs	r2, #0
 80056b8:	2104      	movs	r1, #4
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fa5e 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e07c      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d034      	beq.n	8005770 <HAL_I2C_Mem_Read+0x1d0>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d130      	bne.n	8005770 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	; 0x80
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa2f 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e04d      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2bff      	cmp	r3, #255	; 0xff
 8005730:	d90e      	bls.n	8005750 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	22ff      	movs	r2, #255	; 0xff
 8005736:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573c:	b2da      	uxtb	r2, r3
 800573e:	8979      	ldrh	r1, [r7, #10]
 8005740:	2300      	movs	r3, #0
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fbbf 	bl	8005ecc <I2C_TransferConfig>
 800574e:	e00f      	b.n	8005770 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575e:	b2da      	uxtb	r2, r3
 8005760:	8979      	ldrh	r1, [r7, #10]
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fbae 	bl	8005ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d19a      	bne.n	80056b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 fa7c 	bl	8005c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e01a      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2220      	movs	r2, #32
 8005794:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6859      	ldr	r1, [r3, #4]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_I2C_Mem_Read+0x230>)
 80057a2:	400b      	ands	r3, r1
 80057a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	80002400 	.word	0x80002400
 80057d0:	fe00e800 	.word	0xfe00e800

080057d4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	; 0x28
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	460b      	mov	r3, r1
 80057e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	f040 80f1 	bne.w	80059d8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005804:	d101      	bne.n	800580a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
 8005808:	e0e7      	b.n	80059da <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_I2C_IsDeviceReady+0x44>
 8005814:	2302      	movs	r3, #2
 8005816:	e0e0      	b.n	80059da <HAL_I2C_IsDeviceReady+0x206>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2224      	movs	r2, #36	; 0x24
 8005824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d107      	bne.n	8005846 <HAL_I2C_IsDeviceReady+0x72>
 8005836:	897b      	ldrh	r3, [r7, #10]
 8005838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800583c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005844:	e004      	b.n	8005850 <HAL_I2C_IsDeviceReady+0x7c>
 8005846:	897b      	ldrh	r3, [r7, #10]
 8005848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800584c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	6812      	ldr	r2, [r2, #0]
 8005854:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005856:	f7ff f8a7 	bl	80049a8 <HAL_GetTick>
 800585a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b20      	cmp	r3, #32
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b10      	cmp	r3, #16
 800587e:	bf0c      	ite	eq
 8005880:	2301      	moveq	r3, #1
 8005882:	2300      	movne	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005888:	e034      	b.n	80058f4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005890:	d01a      	beq.n	80058c8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005892:	f7ff f889 	bl	80049a8 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <HAL_I2C_IsDeviceReady+0xd4>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10f      	bne.n	80058c8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e088      	b.n	80059da <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80058f4:	7ffb      	ldrb	r3, [r7, #31]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <HAL_I2C_IsDeviceReady+0x12c>
 80058fa:	7fbb      	ldrb	r3, [r7, #30]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0c4      	beq.n	800588a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b10      	cmp	r3, #16
 800590c:	d01a      	beq.n	8005944 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2200      	movs	r2, #0
 8005916:	2120      	movs	r1, #32
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f92f 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e058      	b.n	80059da <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2220      	movs	r2, #32
 800592e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	e04a      	b.n	80059da <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	2120      	movs	r1, #32
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f914 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e03d      	b.n	80059da <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2210      	movs	r2, #16
 8005964:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2220      	movs	r2, #32
 800596c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	429a      	cmp	r2, r3
 8005974:	d118      	bne.n	80059a8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005984:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2200      	movs	r2, #0
 800598e:	2120      	movs	r1, #32
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f8f3 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e01c      	b.n	80059da <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2220      	movs	r2, #32
 80059a6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	3301      	adds	r3, #1
 80059ac:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	f63f af3b 	bhi.w	800582e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	460b      	mov	r3, r1
 80059f8:	813b      	strh	r3, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	8979      	ldrh	r1, [r7, #10]
 8005a04:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <I2C_RequestMemoryWrite+0xa4>)
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fa5d 	bl	8005ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	69b9      	ldr	r1, [r7, #24]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f8f0 	bl	8005bfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e02c      	b.n	8005a80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d105      	bne.n	8005a38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a2c:	893b      	ldrh	r3, [r7, #8]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	629a      	str	r2, [r3, #40]	; 0x28
 8005a36:	e015      	b.n	8005a64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a38:	893b      	ldrh	r3, [r7, #8]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	69b9      	ldr	r1, [r7, #24]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f8d6 	bl	8005bfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e012      	b.n	8005a80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a5a:	893b      	ldrh	r3, [r7, #8]
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2180      	movs	r1, #128	; 0x80
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f884 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	80002000 	.word	0x80002000

08005a8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	4608      	mov	r0, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	817b      	strh	r3, [r7, #10]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	813b      	strh	r3, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	8979      	ldrh	r1, [r7, #10]
 8005aac:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <I2C_RequestMemoryRead+0xa4>)
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 fa0a 	bl	8005ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	69b9      	ldr	r1, [r7, #24]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f89d 	bl	8005bfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e02c      	b.n	8005b26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d105      	bne.n	8005ade <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad2:	893b      	ldrh	r3, [r7, #8]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	629a      	str	r2, [r3, #40]	; 0x28
 8005adc:	e015      	b.n	8005b0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ade:	893b      	ldrh	r3, [r7, #8]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	69b9      	ldr	r1, [r7, #24]
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f883 	bl	8005bfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e012      	b.n	8005b26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b00:	893b      	ldrh	r3, [r7, #8]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2140      	movs	r1, #64	; 0x40
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f831 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	80002000 	.word	0x80002000

08005b34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d103      	bne.n	8005b52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d007      	beq.n	8005b70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	619a      	str	r2, [r3, #24]
  }
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b8c:	e022      	b.n	8005bd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b94:	d01e      	beq.n	8005bd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b96:	f7fe ff07 	bl	80049a8 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d113      	bne.n	8005bd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb0:	f043 0220 	orr.w	r2, r3, #32
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e00f      	b.n	8005bf4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d0cd      	beq.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c08:	e02c      	b.n	8005c64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f870 	bl	8005cf4 <I2C_IsErrorOccurred>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e02a      	b.n	8005c74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c24:	d01e      	beq.n	8005c64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c26:	f7fe febf 	bl	80049a8 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d302      	bcc.n	8005c3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d113      	bne.n	8005c64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e007      	b.n	8005c74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d1cb      	bne.n	8005c0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c88:	e028      	b.n	8005cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	68b9      	ldr	r1, [r7, #8]
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f830 	bl	8005cf4 <I2C_IsErrorOccurred>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e026      	b.n	8005cec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9e:	f7fe fe83 	bl	80049a8 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d113      	bne.n	8005cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e007      	b.n	8005cec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d1cf      	bne.n	8005c8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d075      	beq.n	8005e0c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2210      	movs	r2, #16
 8005d26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d28:	e056      	b.n	8005dd8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d30:	d052      	beq.n	8005dd8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d32:	f7fe fe39 	bl	80049a8 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d302      	bcc.n	8005d48 <I2C_IsErrorOccurred+0x54>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d147      	bne.n	8005dd8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6a:	d12e      	bne.n	8005dca <I2C_IsErrorOccurred+0xd6>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d72:	d02a      	beq.n	8005dca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d027      	beq.n	8005dca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005d8a:	f7fe fe0d 	bl	80049a8 <HAL_GetTick>
 8005d8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d90:	e01b      	b.n	8005dca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d92:	f7fe fe09 	bl	80049a8 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b19      	cmp	r3, #25
 8005d9e:	d914      	bls.n	8005dca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	f043 0220 	orr.w	r2, r3, #32
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d1dc      	bne.n	8005d92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d003      	beq.n	8005dee <I2C_IsErrorOccurred+0xfa>
 8005de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d09d      	beq.n	8005d2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d103      	bne.n	8005dfe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f043 0304 	orr.w	r3, r3, #4
 8005e04:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	f043 0308 	orr.w	r3, r3, #8
 8005e46:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	f043 0302 	orr.w	r3, r3, #2
 8005e68:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01c      	beq.n	8005ebc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff fe56 	bl	8005b34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <I2C_IsErrorOccurred+0x1d4>)
 8005e94:	400b      	ands	r3, r1
 8005e96:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3728      	adds	r7, #40	; 0x28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	fe00e800 	.word	0xfe00e800

08005ecc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	607b      	str	r3, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	817b      	strh	r3, [r7, #10]
 8005eda:	4613      	mov	r3, r2
 8005edc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ede:	897b      	ldrh	r3, [r7, #10]
 8005ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ee4:	7a7b      	ldrb	r3, [r7, #9]
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005eec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005efa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	0d5b      	lsrs	r3, r3, #21
 8005f06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f0a:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <I2C_TransferConfig+0x60>)
 8005f0c:	430b      	orrs	r3, r1
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	ea02 0103 	and.w	r1, r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	03ff63ff 	.word	0x03ff63ff

08005f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d138      	bne.n	8005fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e032      	b.n	8005fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2224      	movs	r2, #36	; 0x24
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e000      	b.n	8005fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d139      	bne.n	8006050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e033      	b.n	8006052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2224      	movs	r2, #36	; 0x24
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	e000      	b.n	8006052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006068:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	4904      	ldr	r1, [pc, #16]	; (8006080 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4313      	orrs	r3, r2
 8006072:	604b      	str	r3, [r1, #4]
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	40010000 	.word	0x40010000

08006084 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a04      	ldr	r2, [pc, #16]	; (80060a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800608e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006092:	6013      	str	r3, [r2, #0]
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	58000400 	.word	0x58000400

080060a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <HAL_PWREx_GetVoltageRange+0x18>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	58000400 	.word	0x58000400

080060c0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80060c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d2:	d101      	bne.n	80060d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f6:	6013      	str	r3, [r2, #0]
}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006114:	6013      	str	r3, [r2, #0]
}
 8006116:	bf00      	nop
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006132:	d101      	bne.n	8006138 <LL_RCC_HSE_IsReady+0x18>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <LL_RCC_HSE_IsReady+0x1a>
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006156:	6013      	str	r3, [r2, #0]
}
 8006158:	bf00      	nop
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8006162:	b480      	push	{r7}
 8006164:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006174:	6013      	str	r3, [r2, #0]
}
 8006176:	bf00      	nop
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006192:	d101      	bne.n	8006198 <LL_RCC_HSI_IsReady+0x18>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <LL_RCC_HSI_IsReady+0x1a>
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80061ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	061b      	lsls	r3, r3, #24
 80061ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061be:	4313      	orrs	r3, r2
 80061c0:	604b      	str	r3, [r1, #4]
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006208:	bf00      	nop
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006212:	b480      	push	{r7}
 8006214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b02      	cmp	r3, #2
 8006224:	d101      	bne.n	800622a <LL_RCC_HSI48_IsReady+0x18>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <LL_RCC_HSI48_IsReady+0x1a>
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006236:	b480      	push	{r7}
 8006238:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800623a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800624e:	bf00      	nop
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800627a:	b480      	push	{r7}
 800627c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800627e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800628a:	f043 0304 	orr.w	r3, r3, #4
 800628e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006292:	bf00      	nop
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80062be:	b480      	push	{r7}
 80062c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80062c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d101      	bne.n	80062d6 <LL_RCC_LSE_IsReady+0x18>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <LL_RCC_LSE_IsReady+0x1a>
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80062e2:	b480      	push	{r7}
 80062e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80062e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062f2:	f043 0301 	orr.w	r3, r3, #1
 80062f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80062fa:	bf00      	nop
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006314:	f023 0301 	bic.w	r3, r3, #1
 8006318:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800631c:	bf00      	nop
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006326:	b480      	push	{r7}
 8006328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800632a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b02      	cmp	r3, #2
 8006338:	d101      	bne.n	800633e <LL_RCC_LSI1_IsReady+0x18>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <LL_RCC_LSI1_IsReady+0x1a>
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800634a:	b480      	push	{r7}
 800634c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800634e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800635a:	f043 0304 	orr.w	r3, r3, #4
 800635e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006362:	bf00      	nop
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800637c:	f023 0304 	bic.w	r3, r3, #4
 8006380:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800638e:	b480      	push	{r7}
 8006390:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d101      	bne.n	80063a6 <LL_RCC_LSI2_IsReady+0x18>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <LL_RCC_LSI2_IsReady+0x1a>
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80063ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80063e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	6013      	str	r3, [r2, #0]
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80063fe:	b480      	push	{r7}
 8006400:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800640c:	f023 0301 	bic.w	r3, r3, #1
 8006410:	6013      	str	r3, [r2, #0]
}
 8006412:	bf00      	nop
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b02      	cmp	r3, #2
 800642c:	d101      	bne.n	8006432 <LL_RCC_MSI_IsReady+0x16>
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <LL_RCC_MSI_IsReady+0x18>
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4313      	orrs	r3, r2
 8006458:	600b      	str	r3, [r1, #0]
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800646c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006476:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2bb0      	cmp	r3, #176	; 0xb0
 800647c:	d901      	bls.n	8006482 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800647e:	23b0      	movs	r3, #176	; 0xb0
 8006480:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006482:	687b      	ldr	r3, [r7, #4]
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064aa:	4313      	orrs	r3, r2
 80064ac:	604b      	str	r3, [r1, #4]
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80064c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f023 0203 	bic.w	r2, r3, #3
 80064cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80064e2:	b480      	push	{r7}
 80064e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80064e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 030c 	and.w	r3, r3, #12
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800650c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4313      	orrs	r3, r2
 8006514:	608b      	str	r3, [r1, #8]
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800652a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800652e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4313      	orrs	r3, r2
 800653e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800655e:	f023 020f 	bic.w	r2, r3, #15
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	091b      	lsrs	r3, r3, #4
 8006566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800658e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4313      	orrs	r3, r2
 8006596:	608b      	str	r3, [r1, #8]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80065ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4313      	orrs	r3, r2
 80065be:	608b      	str	r3, [r1, #8]
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80065d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80065e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800660e:	4618      	mov	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800661c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006626:	4618      	mov	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800663e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006642:	6013      	str	r3, [r2, #0]
}
 8006644:	bf00      	nop
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800664e:	b480      	push	{r7}
 8006650:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800665c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006660:	6013      	str	r3, [r2, #0]
}
 8006662:	bf00      	nop
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800667e:	d101      	bne.n	8006684 <LL_RCC_PLL_IsReady+0x18>
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <LL_RCC_PLL_IsReady+0x1a>
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80066aa:	b480      	push	{r7}
 80066ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80066ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80066c2:	b480      	push	{r7}
 80066c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80066c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80066da:	b480      	push	{r7}
 80066dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80066de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0303 	and.w	r3, r3, #3
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80066f2:	b480      	push	{r7}
 80066f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80066f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006704:	d101      	bne.n	800670a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006716:	b480      	push	{r7}
 8006718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800671a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800672a:	d101      	bne.n	8006730 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006744:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006750:	d101      	bne.n	8006756 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006762:	b480      	push	{r7}
 8006764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006774:	d101      	bne.n	800677a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006786:	b480      	push	{r7}
 8006788:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800678a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006794:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006798:	d101      	bne.n	800679e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ac:	b590      	push	{r4, r7, lr}
 80067ae:	b08d      	sub	sp, #52	; 0x34
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e363      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 808d 	beq.w	80068e6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067cc:	f7ff fe89 	bl	80064e2 <LL_RCC_GetSysClkSource>
 80067d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067d2:	f7ff ff82 	bl	80066da <LL_RCC_PLL_GetMainSource>
 80067d6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_RCC_OscConfig+0x3e>
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	2b0c      	cmp	r3, #12
 80067e2:	d147      	bne.n	8006874 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d144      	bne.n	8006874 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e347      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80067fa:	f7ff fe34 	bl	8006466 <LL_RCC_MSI_GetRange>
 80067fe:	4603      	mov	r3, r0
 8006800:	429c      	cmp	r4, r3
 8006802:	d914      	bls.n	800682e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fd2f 	bl	800726c <RCC_SetFlashLatencyFromMSIRange>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e336      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff fe0e 	bl	800643e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff fe32 	bl	8006490 <LL_RCC_MSI_SetCalibTrimming>
 800682c:	e013      	b.n	8006856 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff fe03 	bl	800643e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fe27 	bl	8006490 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fd10 	bl	800726c <RCC_SetFlashLatencyFromMSIRange>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e317      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006856:	f000 fcc9 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 800685a:	4603      	mov	r3, r0
 800685c:	4aa4      	ldr	r2, [pc, #656]	; (8006af0 <HAL_RCC_OscConfig+0x344>)
 800685e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006860:	4ba4      	ldr	r3, [pc, #656]	; (8006af4 <HAL_RCC_OscConfig+0x348>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe f851 	bl	800490c <HAL_InitTick>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d039      	beq.n	80068e4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e308      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01e      	beq.n	80068ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800687c:	f7ff fdb0 	bl	80063e0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006880:	f7fe f892 	bl	80049a8 <HAL_GetTick>
 8006884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006888:	f7fe f88e 	bl	80049a8 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e2f5      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800689a:	f7ff fdbf 	bl	800641c <LL_RCC_MSI_IsReady>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f1      	beq.n	8006888 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fdc8 	bl	800643e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fdec 	bl	8006490 <LL_RCC_MSI_SetCalibTrimming>
 80068b8:	e015      	b.n	80068e6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80068ba:	f7ff fda0 	bl	80063fe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068be:	f7fe f873 	bl	80049a8 <HAL_GetTick>
 80068c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068c6:	f7fe f86f 	bl	80049a8 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e2d6      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80068d8:	f7ff fda0 	bl	800641c <LL_RCC_MSI_IsReady>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f1      	bne.n	80068c6 <HAL_RCC_OscConfig+0x11a>
 80068e2:	e000      	b.n	80068e6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80068e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d047      	beq.n	8006982 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f2:	f7ff fdf6 	bl	80064e2 <LL_RCC_GetSysClkSource>
 80068f6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068f8:	f7ff feef 	bl	80066da <LL_RCC_PLL_GetMainSource>
 80068fc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d005      	beq.n	8006910 <HAL_RCC_OscConfig+0x164>
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	2b0c      	cmp	r3, #12
 8006908:	d108      	bne.n	800691c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	2b03      	cmp	r3, #3
 800690e:	d105      	bne.n	800691c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d134      	bne.n	8006982 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e2b4      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006924:	d102      	bne.n	800692c <HAL_RCC_OscConfig+0x180>
 8006926:	f7ff fbdd 	bl	80060e4 <LL_RCC_HSE_Enable>
 800692a:	e001      	b.n	8006930 <HAL_RCC_OscConfig+0x184>
 800692c:	f7ff fbe9 	bl	8006102 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d012      	beq.n	800695e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fe f836 	bl	80049a8 <HAL_GetTick>
 800693c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006940:	f7fe f832 	bl	80049a8 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b64      	cmp	r3, #100	; 0x64
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e299      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006952:	f7ff fbe5 	bl	8006120 <LL_RCC_HSE_IsReady>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f1      	beq.n	8006940 <HAL_RCC_OscConfig+0x194>
 800695c:	e011      	b.n	8006982 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fe f823 	bl	80049a8 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006966:	f7fe f81f 	bl	80049a8 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b64      	cmp	r3, #100	; 0x64
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e286      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006978:	f7ff fbd2 	bl	8006120 <LL_RCC_HSE_IsReady>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1f1      	bne.n	8006966 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d04c      	beq.n	8006a28 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800698e:	f7ff fda8 	bl	80064e2 <LL_RCC_GetSysClkSource>
 8006992:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006994:	f7ff fea1 	bl	80066da <LL_RCC_PLL_GetMainSource>
 8006998:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b04      	cmp	r3, #4
 800699e:	d005      	beq.n	80069ac <HAL_RCC_OscConfig+0x200>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b0c      	cmp	r3, #12
 80069a4:	d10e      	bne.n	80069c4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d10b      	bne.n	80069c4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e266      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff fbf1 	bl	80061a4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80069c2:	e031      	b.n	8006a28 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d019      	beq.n	8006a00 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069cc:	f7ff fbba 	bl	8006144 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d0:	f7fd ffea 	bl	80049a8 <HAL_GetTick>
 80069d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d8:	f7fd ffe6 	bl	80049a8 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e24d      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80069ea:	f7ff fbc9 	bl	8006180 <LL_RCC_HSI_IsReady>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0f1      	beq.n	80069d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff fbd3 	bl	80061a4 <LL_RCC_HSI_SetCalibTrimming>
 80069fe:	e013      	b.n	8006a28 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a00:	f7ff fbaf 	bl	8006162 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fd ffd0 	bl	80049a8 <HAL_GetTick>
 8006a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a0c:	f7fd ffcc 	bl	80049a8 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e233      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006a1e:	f7ff fbaf 	bl	8006180 <LL_RCC_HSI_IsReady>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1f1      	bne.n	8006a0c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80a3 	beq.w	8006b88 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d076      	beq.n	8006b38 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d046      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006a56:	f7ff fc66 	bl	8006326 <LL_RCC_LSI1_IsReady>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d113      	bne.n	8006a88 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006a60:	f7ff fc3f 	bl	80062e2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a64:	f7fd ffa0 	bl	80049a8 <HAL_GetTick>
 8006a68:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a6c:	f7fd ff9c 	bl	80049a8 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e203      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006a7e:	f7ff fc52 	bl	8006326 <LL_RCC_LSI1_IsReady>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0f1      	beq.n	8006a6c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006a88:	f7ff fc5f 	bl	800634a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8c:	f7fd ff8c 	bl	80049a8 <HAL_GetTick>
 8006a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006a94:	f7fd ff88 	bl	80049a8 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e1ef      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006aa6:	f7ff fc72 	bl	800638e <LL_RCC_LSI2_IsReady>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f1      	beq.n	8006a94 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fc7c 	bl	80063b2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006aba:	f7ff fc23 	bl	8006304 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abe:	f7fd ff73 	bl	80049a8 <HAL_GetTick>
 8006ac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ac6:	f7fd ff6f 	bl	80049a8 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e1d6      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006ad8:	f7ff fc25 	bl	8006326 <LL_RCC_LSI1_IsReady>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f1      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x31a>
 8006ae2:	e051      	b.n	8006b88 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006ae4:	f7ff fbfd 	bl	80062e2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fd ff5e 	bl	80049a8 <HAL_GetTick>
 8006aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006aee:	e00c      	b.n	8006b0a <HAL_RCC_OscConfig+0x35e>
 8006af0:	20000004 	.word	0x20000004
 8006af4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006af8:	f7fd ff56 	bl	80049a8 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e1bd      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006b0a:	f7ff fc0c 	bl	8006326 <LL_RCC_LSI1_IsReady>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f1      	beq.n	8006af8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006b14:	f7ff fc2a 	bl	800636c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006b1a:	f7fd ff45 	bl	80049a8 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e1ac      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006b2c:	f7ff fc2f 	bl	800638e <LL_RCC_LSI2_IsReady>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f1      	bne.n	8006b1a <HAL_RCC_OscConfig+0x36e>
 8006b36:	e027      	b.n	8006b88 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006b38:	f7ff fc18 	bl	800636c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3c:	f7fd ff34 	bl	80049a8 <HAL_GetTick>
 8006b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006b44:	f7fd ff30 	bl	80049a8 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e197      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006b56:	f7ff fc1a 	bl	800638e <LL_RCC_LSI2_IsReady>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f1      	bne.n	8006b44 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006b60:	f7ff fbd0 	bl	8006304 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b64:	f7fd ff20 	bl	80049a8 <HAL_GetTick>
 8006b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006b6c:	f7fd ff1c 	bl	80049a8 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e183      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006b7e:	f7ff fbd2 	bl	8006326 <LL_RCC_LSI1_IsReady>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1f1      	bne.n	8006b6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d05b      	beq.n	8006c4c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b94:	4ba7      	ldr	r3, [pc, #668]	; (8006e34 <HAL_RCC_OscConfig+0x688>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d114      	bne.n	8006bca <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006ba0:	f7ff fa70 	bl	8006084 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ba4:	f7fd ff00 	bl	80049a8 <HAL_GetTick>
 8006ba8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bac:	f7fd fefc 	bl	80049a8 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e163      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bbe:	4b9d      	ldr	r3, [pc, #628]	; (8006e34 <HAL_RCC_OscConfig+0x688>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d102      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x42c>
 8006bd2:	f7ff fb30 	bl	8006236 <LL_RCC_LSE_Enable>
 8006bd6:	e00c      	b.n	8006bf2 <HAL_RCC_OscConfig+0x446>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	d104      	bne.n	8006bea <HAL_RCC_OscConfig+0x43e>
 8006be0:	f7ff fb4b 	bl	800627a <LL_RCC_LSE_EnableBypass>
 8006be4:	f7ff fb27 	bl	8006236 <LL_RCC_LSE_Enable>
 8006be8:	e003      	b.n	8006bf2 <HAL_RCC_OscConfig+0x446>
 8006bea:	f7ff fb35 	bl	8006258 <LL_RCC_LSE_Disable>
 8006bee:	f7ff fb55 	bl	800629c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d014      	beq.n	8006c24 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfa:	f7fd fed5 	bl	80049a8 <HAL_GetTick>
 8006bfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006c00:	e00a      	b.n	8006c18 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c02:	f7fd fed1 	bl	80049a8 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e136      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006c18:	f7ff fb51 	bl	80062be <LL_RCC_LSE_IsReady>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0ef      	beq.n	8006c02 <HAL_RCC_OscConfig+0x456>
 8006c22:	e013      	b.n	8006c4c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c24:	f7fd fec0 	bl	80049a8 <HAL_GetTick>
 8006c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006c2a:	e00a      	b.n	8006c42 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c2c:	f7fd febc 	bl	80049a8 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e121      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006c42:	f7ff fb3c 	bl	80062be <LL_RCC_LSE_IsReady>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1ef      	bne.n	8006c2c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d02c      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d014      	beq.n	8006c8a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c60:	f7ff fab5 	bl	80061ce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c64:	f7fd fea0 	bl	80049a8 <HAL_GetTick>
 8006c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006c6a:	e008      	b.n	8006c7e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c6c:	f7fd fe9c 	bl	80049a8 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e103      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006c7e:	f7ff fac8 	bl	8006212 <LL_RCC_HSI48_IsReady>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f1      	beq.n	8006c6c <HAL_RCC_OscConfig+0x4c0>
 8006c88:	e013      	b.n	8006cb2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c8a:	f7ff fab1 	bl	80061f0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8e:	f7fd fe8b 	bl	80049a8 <HAL_GetTick>
 8006c92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c96:	f7fd fe87 	bl	80049a8 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e0ee      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006ca8:	f7ff fab3 	bl	8006212 <LL_RCC_HSI48_IsReady>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f1      	bne.n	8006c96 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 80e4 	beq.w	8006e84 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cbc:	f7ff fc11 	bl	80064e2 <LL_RCC_GetSysClkSource>
 8006cc0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	f040 80b4 	bne.w	8006e3c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0203 	and.w	r2, r3, #3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d123      	bne.n	8006d2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d11c      	bne.n	8006d2a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d114      	bne.n	8006d2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d10d      	bne.n	8006d2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d106      	bne.n	8006d2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d05d      	beq.n	8006de6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b0c      	cmp	r3, #12
 8006d2e:	d058      	beq.n	8006de2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e0a1      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006d42:	f7ff fc84 	bl	800664e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d46:	f7fd fe2f 	bl	80049a8 <HAL_GetTick>
 8006d4a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d4e:	f7fd fe2b 	bl	80049a8 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e092      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1ef      	bne.n	8006d4e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	4b30      	ldr	r3, [pc, #192]	; (8006e38 <HAL_RCC_OscConfig+0x68c>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d80:	4311      	orrs	r1, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d86:	0212      	lsls	r2, r2, #8
 8006d88:	4311      	orrs	r1, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d8e:	4311      	orrs	r1, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d94:	4311      	orrs	r1, r2
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006da4:	f7ff fc44 	bl	8006630 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006db8:	f7fd fdf6 	bl	80049a8 <HAL_GetTick>
 8006dbc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dc0:	f7fd fdf2 	bl	80049a8 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e059      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0ef      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006de0:	e050      	b.n	8006e84 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e04f      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d147      	bne.n	8006e84 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006df4:	f7ff fc1c 	bl	8006630 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e08:	f7fd fdce 	bl	80049a8 <HAL_GetTick>
 8006e0c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e10:	f7fd fdca 	bl	80049a8 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e031      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0ef      	beq.n	8006e10 <HAL_RCC_OscConfig+0x664>
 8006e30:	e028      	b.n	8006e84 <HAL_RCC_OscConfig+0x6d8>
 8006e32:	bf00      	nop
 8006e34:	58000400 	.word	0x58000400
 8006e38:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	2b0c      	cmp	r3, #12
 8006e40:	d01e      	beq.n	8006e80 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e42:	f7ff fc04 	bl	800664e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e46:	f7fd fdaf 	bl	80049a8 <HAL_GetTick>
 8006e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e4e:	f7fd fdab 	bl	80049a8 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e012      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1ef      	bne.n	8006e4e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <HAL_RCC_OscConfig+0x6e4>)
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	60cb      	str	r3, [r1, #12]
 8006e7e:	e001      	b.n	8006e84 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3734      	adds	r7, #52	; 0x34
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd90      	pop	{r4, r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	eefefffc 	.word	0xeefefffc

08006e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e12d      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ea8:	4b98      	ldr	r3, [pc, #608]	; (800710c <HAL_RCC_ClockConfig+0x278>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d91b      	bls.n	8006eee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb6:	4b95      	ldr	r3, [pc, #596]	; (800710c <HAL_RCC_ClockConfig+0x278>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f023 0207 	bic.w	r2, r3, #7
 8006ebe:	4993      	ldr	r1, [pc, #588]	; (800710c <HAL_RCC_ClockConfig+0x278>)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec6:	f7fd fd6f 	bl	80049a8 <HAL_GetTick>
 8006eca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ece:	f7fd fd6b 	bl	80049a8 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e111      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee0:	4b8a      	ldr	r3, [pc, #552]	; (800710c <HAL_RCC_ClockConfig+0x278>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d1ef      	bne.n	8006ece <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d016      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff fafb 	bl	80064fa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f04:	f7fd fd50 	bl	80049a8 <HAL_GetTick>
 8006f08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f0c:	f7fd fd4c 	bl	80049a8 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e0f2      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006f1e:	f7ff fbe8 	bl	80066f2 <LL_RCC_IsActiveFlag_HPRE>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0f1      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d016      	beq.n	8006f62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff faf2 	bl	8006522 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f3e:	f7fd fd33 	bl	80049a8 <HAL_GetTick>
 8006f42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006f44:	e008      	b.n	8006f58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f46:	f7fd fd2f 	bl	80049a8 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e0d5      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006f58:	f7ff fbdd 	bl	8006716 <LL_RCC_IsActiveFlag_C2HPRE>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f1      	beq.n	8006f46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d016      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff faeb 	bl	800654e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f78:	f7fd fd16 	bl	80049a8 <HAL_GetTick>
 8006f7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f80:	f7fd fd12 	bl	80049a8 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e0b8      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006f92:	f7ff fbd3 	bl	800673c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f1      	beq.n	8006f80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d016      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff fae5 	bl	800657c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006fb2:	f7fd fcf9 	bl	80049a8 <HAL_GetTick>
 8006fb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006fba:	f7fd fcf5 	bl	80049a8 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e09b      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006fcc:	f7ff fbc9 	bl	8006762 <LL_RCC_IsActiveFlag_PPRE1>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f1      	beq.n	8006fba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d017      	beq.n	8007012 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff fadb 	bl	80065a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006fee:	f7fd fcdb 	bl	80049a8 <HAL_GetTick>
 8006ff2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ff6:	f7fd fcd7 	bl	80049a8 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e07d      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007008:	f7ff fbbd 	bl	8006786 <LL_RCC_IsActiveFlag_PPRE2>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0f1      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d043      	beq.n	80070a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d106      	bne.n	8007034 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007026:	f7ff f87b 	bl	8006120 <LL_RCC_HSE_IsReady>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d11e      	bne.n	800706e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e067      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b03      	cmp	r3, #3
 800703a:	d106      	bne.n	800704a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800703c:	f7ff fb16 	bl	800666c <LL_RCC_PLL_IsReady>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d113      	bne.n	800706e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e05c      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007052:	f7ff f9e3 	bl	800641c <LL_RCC_MSI_IsReady>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d108      	bne.n	800706e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e051      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007060:	f7ff f88e 	bl	8006180 <LL_RCC_HSI_IsReady>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e04a      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff fa21 	bl	80064ba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007078:	f7fd fc96 	bl	80049a8 <HAL_GetTick>
 800707c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707e:	e00a      	b.n	8007096 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007080:	f7fd fc92 	bl	80049a8 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	f241 3288 	movw	r2, #5000	; 0x1388
 800708e:	4293      	cmp	r3, r2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e036      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007096:	f7ff fa24 	bl	80064e2 <LL_RCC_GetSysClkSource>
 800709a:	4602      	mov	r2, r0
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d1ec      	bne.n	8007080 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070a6:	4b19      	ldr	r3, [pc, #100]	; (800710c <HAL_RCC_ClockConfig+0x278>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d21b      	bcs.n	80070ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b4:	4b15      	ldr	r3, [pc, #84]	; (800710c <HAL_RCC_ClockConfig+0x278>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f023 0207 	bic.w	r2, r3, #7
 80070bc:	4913      	ldr	r1, [pc, #76]	; (800710c <HAL_RCC_ClockConfig+0x278>)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c4:	f7fd fc70 	bl	80049a8 <HAL_GetTick>
 80070c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ca:	e008      	b.n	80070de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80070cc:	f7fd fc6c 	bl	80049a8 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e012      	b.n	8007104 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_RCC_ClockConfig+0x278>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d1ef      	bne.n	80070cc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80070ec:	f000 f87e 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 80070f0:	4603      	mov	r3, r0
 80070f2:	4a07      	ldr	r2, [pc, #28]	; (8007110 <HAL_RCC_ClockConfig+0x27c>)
 80070f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80070f6:	f7fd fc63 	bl	80049c0 <HAL_GetTickPrio>
 80070fa:	4603      	mov	r3, r0
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fd fc05 	bl	800490c <HAL_InitTick>
 8007102:	4603      	mov	r3, r0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	58004000 	.word	0x58004000
 8007110:	20000004 	.word	0x20000004

08007114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800711a:	f7ff f9e2 	bl	80064e2 <LL_RCC_GetSysClkSource>
 800711e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007126:	f7ff f99e 	bl	8006466 <LL_RCC_MSI_GetRange>
 800712a:	4603      	mov	r3, r0
 800712c:	091b      	lsrs	r3, r3, #4
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	4a2b      	ldr	r2, [pc, #172]	; (80071e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e04b      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d102      	bne.n	8007148 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007142:	4b28      	ldr	r3, [pc, #160]	; (80071e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	e045      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b08      	cmp	r3, #8
 800714c:	d10a      	bne.n	8007164 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800714e:	f7fe ffb7 	bl	80060c0 <LL_RCC_HSE_IsEnabledDiv2>
 8007152:	4603      	mov	r3, r0
 8007154:	2b01      	cmp	r3, #1
 8007156:	d102      	bne.n	800715e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007158:	4b22      	ldr	r3, [pc, #136]	; (80071e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e03a      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800715e:	4b22      	ldr	r3, [pc, #136]	; (80071e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e037      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007164:	f7ff fab9 	bl	80066da <LL_RCC_PLL_GetMainSource>
 8007168:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d003      	beq.n	8007178 <HAL_RCC_GetSysClockFreq+0x64>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b03      	cmp	r3, #3
 8007174:	d003      	beq.n	800717e <HAL_RCC_GetSysClockFreq+0x6a>
 8007176:	e00d      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007178:	4b1a      	ldr	r3, [pc, #104]	; (80071e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800717a:	60bb      	str	r3, [r7, #8]
        break;
 800717c:	e015      	b.n	80071aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800717e:	f7fe ff9f 	bl	80060c0 <LL_RCC_HSE_IsEnabledDiv2>
 8007182:	4603      	mov	r3, r0
 8007184:	2b01      	cmp	r3, #1
 8007186:	d102      	bne.n	800718e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007188:	4b16      	ldr	r3, [pc, #88]	; (80071e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800718a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800718c:	e00d      	b.n	80071aa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800718e:	4b16      	ldr	r3, [pc, #88]	; (80071e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007190:	60bb      	str	r3, [r7, #8]
        break;
 8007192:	e00a      	b.n	80071aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007194:	f7ff f967 	bl	8006466 <LL_RCC_MSI_GetRange>
 8007198:	4603      	mov	r3, r0
 800719a:	091b      	lsrs	r3, r3, #4
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	4a0f      	ldr	r2, [pc, #60]	; (80071e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80071a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a6:	60bb      	str	r3, [r7, #8]
        break;
 80071a8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80071aa:	f7ff fa71 	bl	8006690 <LL_RCC_PLL_GetN>
 80071ae:	4602      	mov	r2, r0
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	fb03 f402 	mul.w	r4, r3, r2
 80071b6:	f7ff fa84 	bl	80066c2 <LL_RCC_PLL_GetDivider>
 80071ba:	4603      	mov	r3, r0
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	3301      	adds	r3, #1
 80071c0:	fbb4 f4f3 	udiv	r4, r4, r3
 80071c4:	f7ff fa71 	bl	80066aa <LL_RCC_PLL_GetR>
 80071c8:	4603      	mov	r3, r0
 80071ca:	0f5b      	lsrs	r3, r3, #29
 80071cc:	3301      	adds	r3, #1
 80071ce:	fbb4 f3f3 	udiv	r3, r4, r3
 80071d2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd90      	pop	{r4, r7, pc}
 80071de:	bf00      	nop
 80071e0:	0800e3e0 	.word	0x0800e3e0
 80071e4:	00f42400 	.word	0x00f42400
 80071e8:	01e84800 	.word	0x01e84800

080071ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071ec:	b598      	push	{r3, r4, r7, lr}
 80071ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80071f0:	f7ff ff90 	bl	8007114 <HAL_RCC_GetSysClockFreq>
 80071f4:	4604      	mov	r4, r0
 80071f6:	f7ff f9e9 	bl	80065cc <LL_RCC_GetAHBPrescaler>
 80071fa:	4603      	mov	r3, r0
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	4a03      	ldr	r2, [pc, #12]	; (8007210 <HAL_RCC_GetHCLKFreq+0x24>)
 8007204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007208:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800720c:	4618      	mov	r0, r3
 800720e:	bd98      	pop	{r3, r4, r7, pc}
 8007210:	0800e380 	.word	0x0800e380

08007214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007214:	b598      	push	{r3, r4, r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007218:	f7ff ffe8 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 800721c:	4604      	mov	r4, r0
 800721e:	f7ff f9ef 	bl	8006600 <LL_RCC_GetAPB1Prescaler>
 8007222:	4603      	mov	r3, r0
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	4a04      	ldr	r2, [pc, #16]	; (800723c <HAL_RCC_GetPCLK1Freq+0x28>)
 800722c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007238:	4618      	mov	r0, r3
 800723a:	bd98      	pop	{r3, r4, r7, pc}
 800723c:	0800e3c0 	.word	0x0800e3c0

08007240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007240:	b598      	push	{r3, r4, r7, lr}
 8007242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007244:	f7ff ffd2 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 8007248:	4604      	mov	r4, r0
 800724a:	f7ff f9e5 	bl	8006618 <LL_RCC_GetAPB2Prescaler>
 800724e:	4603      	mov	r3, r0
 8007250:	0adb      	lsrs	r3, r3, #11
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	4a04      	ldr	r2, [pc, #16]	; (8007268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007264:	4618      	mov	r0, r3
 8007266:	bd98      	pop	{r3, r4, r7, pc}
 8007268:	0800e3c0 	.word	0x0800e3c0

0800726c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800726c:	b590      	push	{r4, r7, lr}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2bb0      	cmp	r3, #176	; 0xb0
 8007278:	d903      	bls.n	8007282 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800727a:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e007      	b.n	8007292 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	091b      	lsrs	r3, r3, #4
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	4a11      	ldr	r2, [pc, #68]	; (80072d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800728c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007290:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007292:	f7ff f9a7 	bl	80065e4 <LL_RCC_GetAHB4Prescaler>
 8007296:	4603      	mov	r3, r0
 8007298:	091b      	lsrs	r3, r3, #4
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	4a0d      	ldr	r2, [pc, #52]	; (80072d4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80072a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072aa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4a0a      	ldr	r2, [pc, #40]	; (80072d8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80072b0:	fba2 2303 	umull	r2, r3, r2, r3
 80072b4:	0c9c      	lsrs	r4, r3, #18
 80072b6:	f7fe fef5 	bl	80060a4 <HAL_PWREx_GetVoltageRange>
 80072ba:	4603      	mov	r3, r0
 80072bc:	4619      	mov	r1, r3
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 f80c 	bl	80072dc <RCC_SetFlashLatency>
 80072c4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd90      	pop	{r4, r7, pc}
 80072ce:	bf00      	nop
 80072d0:	0800e3e0 	.word	0x0800e3e0
 80072d4:	0800e380 	.word	0x0800e380
 80072d8:	431bde83 	.word	0x431bde83

080072dc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80072dc:	b590      	push	{r4, r7, lr}
 80072de:	b093      	sub	sp, #76	; 0x4c
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80072e6:	4b37      	ldr	r3, [pc, #220]	; (80073c4 <RCC_SetFlashLatency+0xe8>)
 80072e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80072ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80072f2:	4a35      	ldr	r2, [pc, #212]	; (80073c8 <RCC_SetFlashLatency+0xec>)
 80072f4:	f107 031c 	add.w	r3, r7, #28
 80072f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80072fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80072fe:	4b33      	ldr	r3, [pc, #204]	; (80073cc <RCC_SetFlashLatency+0xf0>)
 8007300:	f107 040c 	add.w	r4, r7, #12
 8007304:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007306:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800730a:	2300      	movs	r3, #0
 800730c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007314:	d11a      	bne.n	800734c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007316:	2300      	movs	r3, #0
 8007318:	643b      	str	r3, [r7, #64]	; 0x40
 800731a:	e013      	b.n	8007344 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800731c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	3348      	adds	r3, #72	; 0x48
 8007322:	443b      	add	r3, r7
 8007324:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	429a      	cmp	r2, r3
 800732c:	d807      	bhi.n	800733e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800732e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	3348      	adds	r3, #72	; 0x48
 8007334:	443b      	add	r3, r7
 8007336:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800733a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800733c:	e020      	b.n	8007380 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800733e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007340:	3301      	adds	r3, #1
 8007342:	643b      	str	r3, [r7, #64]	; 0x40
 8007344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007346:	2b03      	cmp	r3, #3
 8007348:	d9e8      	bls.n	800731c <RCC_SetFlashLatency+0x40>
 800734a:	e019      	b.n	8007380 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800734c:	2300      	movs	r3, #0
 800734e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007350:	e013      	b.n	800737a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	3348      	adds	r3, #72	; 0x48
 8007358:	443b      	add	r3, r7
 800735a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d807      	bhi.n	8007374 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	3348      	adds	r3, #72	; 0x48
 800736a:	443b      	add	r3, r7
 800736c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007370:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007372:	e005      	b.n	8007380 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007376:	3301      	adds	r3, #1
 8007378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800737a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737c:	2b02      	cmp	r3, #2
 800737e:	d9e8      	bls.n	8007352 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007380:	4b13      	ldr	r3, [pc, #76]	; (80073d0 <RCC_SetFlashLatency+0xf4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f023 0207 	bic.w	r2, r3, #7
 8007388:	4911      	ldr	r1, [pc, #68]	; (80073d0 <RCC_SetFlashLatency+0xf4>)
 800738a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738c:	4313      	orrs	r3, r2
 800738e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007390:	f7fd fb0a 	bl	80049a8 <HAL_GetTick>
 8007394:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007396:	e008      	b.n	80073aa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007398:	f7fd fb06 	bl	80049a8 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e007      	b.n	80073ba <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80073aa:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <RCC_SetFlashLatency+0xf4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d1ef      	bne.n	8007398 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	374c      	adds	r7, #76	; 0x4c
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd90      	pop	{r4, r7, pc}
 80073c2:	bf00      	nop
 80073c4:	0800e2ac 	.word	0x0800e2ac
 80073c8:	0800e2bc 	.word	0x0800e2bc
 80073cc:	0800e2c8 	.word	0x0800e2c8
 80073d0:	58004000 	.word	0x58004000

080073d4 <LL_RCC_LSE_IsEnabled>:
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80073d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d101      	bne.n	80073ec <LL_RCC_LSE_IsEnabled+0x18>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <LL_RCC_LSE_IsEnabled+0x1a>
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <LL_RCC_LSE_IsReady>:
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80073fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b02      	cmp	r3, #2
 800740a:	d101      	bne.n	8007410 <LL_RCC_LSE_IsReady+0x18>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <LL_RCC_LSE_IsReady+0x1a>
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <LL_RCC_SetRFWKPClockSource>:
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <LL_RCC_SetSMPSClockSource>:
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	f023 0203 	bic.w	r2, r3, #3
 800745a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4313      	orrs	r3, r2
 8007462:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <LL_RCC_SetSMPSPrescaler>:
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4313      	orrs	r3, r2
 800748a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <LL_RCC_SetUSARTClockSource>:
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80074a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a8:	f023 0203 	bic.w	r2, r3, #3
 80074ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <LL_RCC_SetLPUARTClockSource>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80074cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <LL_RCC_SetI2CClockSource>:
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80074f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	091b      	lsrs	r3, r3, #4
 8007504:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007508:	43db      	mvns	r3, r3
 800750a:	401a      	ands	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007518:	4313      	orrs	r3, r2
 800751a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <LL_RCC_SetLPTIMClockSource>:
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007536:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	43db      	mvns	r3, r3
 8007542:	401a      	ands	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	041b      	lsls	r3, r3, #16
 8007548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <LL_RCC_SetSAIClockSource>:
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <LL_RCC_SetRNGClockSource>:
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800759e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <LL_RCC_SetCLK48ClockSource>:
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80075be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <LL_RCC_SetUSBClockSource>:
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff ffe3 	bl	80075b6 <LL_RCC_SetCLK48ClockSource>
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <LL_RCC_SetADCClockSource>:
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007608:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800760c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4313      	orrs	r3, r2
 8007614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <LL_RCC_SetRTCClockSource>:
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800762c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007638:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4313      	orrs	r3, r2
 8007640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <LL_RCC_GetRTCClockSource>:
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007660:	4618      	mov	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <LL_RCC_ForceBackupDomainReset>:
{
 800766a:	b480      	push	{r7}
 800766c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800766e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800767a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800767e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007682:	bf00      	nop
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <LL_RCC_ReleaseBackupDomainReset>:
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800769c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80076a4:	bf00      	nop
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <LL_RCC_PLLSAI1_Enable>:
{
 80076ae:	b480      	push	{r7}
 80076b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80076b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076c0:	6013      	str	r3, [r2, #0]
}
 80076c2:	bf00      	nop
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <LL_RCC_PLLSAI1_Disable>:
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80076d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076de:	6013      	str	r3, [r2, #0]
}
 80076e0:	bf00      	nop
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <LL_RCC_PLLSAI1_IsReady>:
{
 80076ea:	b480      	push	{r7}
 80076ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80076ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076fc:	d101      	bne.n	8007702 <LL_RCC_PLLSAI1_IsReady+0x18>
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b088      	sub	sp, #32
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007716:	2300      	movs	r3, #0
 8007718:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800771a:	2300      	movs	r3, #0
 800771c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d034      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007732:	d021      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007734:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007738:	d81b      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800773a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800773e:	d01d      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007740:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007744:	d815      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00b      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800774a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800774e:	d110      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800775a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800775e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007760:	e00d      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3304      	adds	r3, #4
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f947 	bl	80079fa <RCCEx_PLLSAI1_ConfigNP>
 800776c:	4603      	mov	r3, r0
 800776e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007770:	e005      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	77fb      	strb	r3, [r7, #31]
        break;
 8007776:	e002      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007778:	bf00      	nop
 800777a:	e000      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800777c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800777e:	7ffb      	ldrb	r3, [r7, #31]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fee8 	bl	800755e <LL_RCC_SetSAIClockSource>
 800778e:	e001      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007790:	7ffb      	ldrb	r3, [r7, #31]
 8007792:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779c:	2b00      	cmp	r3, #0
 800779e:	d046      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80077a0:	f7ff ff56 	bl	8007650 <LL_RCC_GetRTCClockSource>
 80077a4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d03c      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80077b0:	f7fe fc68 	bl	8006084 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d105      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff ff30 	bl	8007624 <LL_RCC_SetRTCClockSource>
 80077c4:	e02e      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80077c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ce:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80077d0:	f7ff ff4b 	bl	800766a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80077d4:	f7ff ff5a 	bl	800768c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80077e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80077f0:	f7ff fdf0 	bl	80073d4 <LL_RCC_LSE_IsEnabled>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d114      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077fa:	f7fd f8d5 	bl	80049a8 <HAL_GetTick>
 80077fe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007800:	e00b      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007802:	f7fd f8d1 	bl	80049a8 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007810:	4293      	cmp	r3, r2
 8007812:	d902      	bls.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	77fb      	strb	r3, [r7, #31]
              break;
 8007818:	e004      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800781a:	f7ff fded 	bl	80073f8 <LL_RCC_LSE_IsReady>
 800781e:	4603      	mov	r3, r0
 8007820:	2b01      	cmp	r3, #1
 8007822:	d1ee      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007824:	7ffb      	ldrb	r3, [r7, #31]
 8007826:	77bb      	strb	r3, [r7, #30]
 8007828:	e001      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782a:	7ffb      	ldrb	r3, [r7, #31]
 800782c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff fe2a 	bl	8007498 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff fe35 	bl	80074c4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0310 	and.w	r3, r3, #16
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff fe5d 	bl	800752a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fe52 	bl	800752a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d004      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fe2a 	bl	80074f0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d004      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fe1f 	bl	80074f0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d022      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff fe8d 	bl	80075e2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078d0:	d107      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80078d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078ea:	d10b      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 f8dd 	bl	8007ab0 <RCCEx_PLLSAI1_ConfigNQ>
 80078f6:	4603      	mov	r3, r0
 80078f8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80078fa:	7ffb      	ldrb	r3, [r7, #31]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007900:	7ffb      	ldrb	r3, [r7, #31]
 8007902:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800790c:	2b00      	cmp	r3, #0
 800790e:	d02b      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007918:	d008      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007922:	d003      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d105      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff fe2a 	bl	800758a <LL_RCC_SetRNGClockSource>
 8007936:	e00a      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	2000      	movs	r0, #0
 8007944:	f7ff fe21 	bl	800758a <LL_RCC_SetRNGClockSource>
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff fe34 	bl	80075b6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007956:	d107      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007966:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007970:	2b00      	cmp	r3, #0
 8007972:	d022      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fe3d 	bl	80075f8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007986:	d107      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007996:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a0:	d10b      	bne.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f8dd 	bl	8007b66 <RCCEx_PLLSAI1_ConfigNR>
 80079ac:	4603      	mov	r3, r0
 80079ae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80079b0:	7ffb      	ldrb	r3, [r7, #31]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80079b6:	7ffb      	ldrb	r3, [r7, #31]
 80079b8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff fd26 	bl	800741c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff fd45 	bl	8007470 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff fd2c 	bl	8007448 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80079f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3720      	adds	r7, #32
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007a06:	f7ff fe61 	bl	80076cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a0a:	f7fc ffcd 	bl	80049a8 <HAL_GetTick>
 8007a0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a10:	e009      	b.n	8007a26 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a12:	f7fc ffc9 	bl	80049a8 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d902      	bls.n	8007a26 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	73fb      	strb	r3, [r7, #15]
      break;
 8007a24:	e004      	b.n	8007a30 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a26:	f7ff fe60 	bl	80076ea <LL_RCC_PLLSAI1_IsReady>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f0      	bne.n	8007a12 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d137      	bne.n	8007aa6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a60:	4313      	orrs	r3, r2
 8007a62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007a64:	f7ff fe23 	bl	80076ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a68:	f7fc ff9e 	bl	80049a8 <HAL_GetTick>
 8007a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a6e:	e009      	b.n	8007a84 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a70:	f7fc ff9a 	bl	80049a8 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d902      	bls.n	8007a84 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	73fb      	strb	r3, [r7, #15]
        break;
 8007a82:	e004      	b.n	8007a8e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a84:	f7ff fe31 	bl	80076ea <LL_RCC_PLLSAI1_IsReady>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d1f0      	bne.n	8007a70 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d108      	bne.n	8007aa6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007abc:	f7ff fe06 	bl	80076cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ac0:	f7fc ff72 	bl	80049a8 <HAL_GetTick>
 8007ac4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007ac6:	e009      	b.n	8007adc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ac8:	f7fc ff6e 	bl	80049a8 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d902      	bls.n	8007adc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8007ada:	e004      	b.n	8007ae6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007adc:	f7ff fe05 	bl	80076ea <LL_RCC_PLLSAI1_IsReady>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1f0      	bne.n	8007ac8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d137      	bne.n	8007b5c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	021b      	lsls	r3, r3, #8
 8007afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b00:	4313      	orrs	r3, r2
 8007b02:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b16:	4313      	orrs	r3, r2
 8007b18:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007b1a:	f7ff fdc8 	bl	80076ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b1e:	f7fc ff43 	bl	80049a8 <HAL_GetTick>
 8007b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b24:	e009      	b.n	8007b3a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b26:	f7fc ff3f 	bl	80049a8 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d902      	bls.n	8007b3a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	73fb      	strb	r3, [r7, #15]
        break;
 8007b38:	e004      	b.n	8007b44 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b3a:	f7ff fdd6 	bl	80076ea <LL_RCC_PLLSAI1_IsReady>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d1f0      	bne.n	8007b26 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d108      	bne.n	8007b5c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007b72:	f7ff fdab 	bl	80076cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b76:	f7fc ff17 	bl	80049a8 <HAL_GetTick>
 8007b7a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b7c:	e009      	b.n	8007b92 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b7e:	f7fc ff13 	bl	80049a8 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d902      	bls.n	8007b92 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b90:	e004      	b.n	8007b9c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b92:	f7ff fdaa 	bl	80076ea <LL_RCC_PLLSAI1_IsReady>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1f0      	bne.n	8007b7e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d137      	bne.n	8007c12 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007bd0:	f7ff fd6d 	bl	80076ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bd4:	f7fc fee8 	bl	80049a8 <HAL_GetTick>
 8007bd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007bda:	e009      	b.n	8007bf0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007bdc:	f7fc fee4 	bl	80049a8 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d902      	bls.n	8007bf0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	73fb      	strb	r3, [r7, #15]
        break;
 8007bee:	e004      	b.n	8007bfa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007bf0:	f7ff fd7b 	bl	80076ea <LL_RCC_PLLSAI1_IsReady>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d1f0      	bne.n	8007bdc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d108      	bne.n	8007c12 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c04:	691a      	ldr	r2, [r3, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <LL_RCC_GetUSARTClockSource>:
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4013      	ands	r3, r2
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <LL_RCC_GetLPUARTClockSource>:
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4013      	ands	r3, r2
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e042      	b.n	8007cf4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7fc fc51 	bl	8004528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2224      	movs	r2, #36	; 0x24
 8007c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fc50 	bl	8008544 <UART_SetConfig>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e022      	b.n	8007cf4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fe6a 	bl	8008990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fef1 	bl	8008ad4 <UART_CheckIdleState>
 8007cf2:	4603      	mov	r3, r0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08a      	sub	sp, #40	; 0x28
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	f040 8083 	bne.w	8007e1e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <HAL_UART_Transmit+0x28>
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e07b      	b.n	8007e20 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_UART_Transmit+0x3a>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e074      	b.n	8007e20 <HAL_UART_Transmit+0x124>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2221      	movs	r2, #33	; 0x21
 8007d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d4e:	f7fc fe2b 	bl	80049a8 <HAL_GetTick>
 8007d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	88fa      	ldrh	r2, [r7, #6]
 8007d58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	88fa      	ldrh	r2, [r7, #6]
 8007d60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6c:	d108      	bne.n	8007d80 <HAL_UART_Transmit+0x84>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d104      	bne.n	8007d80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	61bb      	str	r3, [r7, #24]
 8007d7e:	e003      	b.n	8007d88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d84:	2300      	movs	r3, #0
 8007d86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007d90:	e02c      	b.n	8007dec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2180      	movs	r1, #128	; 0x80
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 fee4 	bl	8008b6a <UART_WaitOnFlagUntilTimeout>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e039      	b.n	8007e20 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10b      	bne.n	8007dca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	3302      	adds	r3, #2
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	e007      	b.n	8007dda <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1cc      	bne.n	8007d92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2140      	movs	r1, #64	; 0x40
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 feb1 	bl	8008b6a <UART_WaitOnFlagUntilTimeout>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e006      	b.n	8007e20 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e000      	b.n	8007e20 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007e1e:	2302      	movs	r3, #2
  }
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3720      	adds	r7, #32
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b08a      	sub	sp, #40	; 0x28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	d142      	bne.n	8007ec6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_UART_Receive_IT+0x24>
 8007e46:	88fb      	ldrh	r3, [r7, #6]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e03b      	b.n	8007ec8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_UART_Receive_IT+0x36>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e034      	b.n	8007ec8 <HAL_UART_Receive_IT+0xa0>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a17      	ldr	r2, [pc, #92]	; (8007ed0 <HAL_UART_Receive_IT+0xa8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01f      	beq.n	8007eb6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d018      	beq.n	8007eb6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	613b      	str	r3, [r7, #16]
   return(result);
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	623b      	str	r3, [r7, #32]
 8007ea4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	69f9      	ldr	r1, [r7, #28]
 8007ea8:	6a3a      	ldr	r2, [r7, #32]
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e6      	bne.n	8007e84 <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 ff1d 	bl	8008cfc <UART_Start_Receive_IT>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	e000      	b.n	8007ec8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ec6:	2302      	movs	r3, #2
  }
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3728      	adds	r7, #40	; 0x28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40008000 	.word	0x40008000

08007ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b0ba      	sub	sp, #232	; 0xe8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007efa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007efe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f02:	4013      	ands	r3, r2
 8007f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d11b      	bne.n	8007f48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d015      	beq.n	8007f48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f20:	f003 0320 	and.w	r3, r3, #32
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d105      	bne.n	8007f34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d009      	beq.n	8007f48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 82d6 	beq.w	80084ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
      }
      return;
 8007f46:	e2d0      	b.n	80084ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 811f 	beq.w	8008190 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f56:	4b8b      	ldr	r3, [pc, #556]	; (8008184 <HAL_UART_IRQHandler+0x2b0>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f62:	4b89      	ldr	r3, [pc, #548]	; (8008188 <HAL_UART_IRQHandler+0x2b4>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 8112 	beq.w	8008190 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d011      	beq.n	8007f9c <HAL_UART_IRQHandler+0xc8>
 8007f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f92:	f043 0201 	orr.w	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d011      	beq.n	8007fcc <HAL_UART_IRQHandler+0xf8>
 8007fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2202      	movs	r2, #2
 8007fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc2:	f043 0204 	orr.w	r2, r3, #4
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d011      	beq.n	8007ffc <HAL_UART_IRQHandler+0x128>
 8007fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2204      	movs	r2, #4
 8007fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff2:	f043 0202 	orr.w	r2, r3, #2
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d017      	beq.n	8008038 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008014:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008018:	4b5a      	ldr	r3, [pc, #360]	; (8008184 <HAL_UART_IRQHandler+0x2b0>)
 800801a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2208      	movs	r2, #8
 8008026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800802e:	f043 0208 	orr.w	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008040:	2b00      	cmp	r3, #0
 8008042:	d012      	beq.n	800806a <HAL_UART_IRQHandler+0x196>
 8008044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008060:	f043 0220 	orr.w	r2, r3, #32
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 823c 	beq.w	80084ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	d013      	beq.n	80080aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800808e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d007      	beq.n	80080aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d005      	beq.n	80080ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d04f      	beq.n	800816e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 ff3e 	bl	8008f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080de:	2b40      	cmp	r3, #64	; 0x40
 80080e0:	d141      	bne.n	8008166 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3308      	adds	r3, #8
 80080e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800810e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800811a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1d9      	bne.n	80080e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d013      	beq.n	800815e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800813a:	4a14      	ldr	r2, [pc, #80]	; (800818c <HAL_UART_IRQHandler+0x2b8>)
 800813c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008142:	4618      	mov	r0, r3
 8008144:	f7fc fea1 	bl	8004e8a <HAL_DMA_Abort_IT>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d017      	beq.n	800817e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008158:	4610      	mov	r0, r2
 800815a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815c:	e00f      	b.n	800817e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9da 	bl	8008518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008164:	e00b      	b.n	800817e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9d6 	bl	8008518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816c:	e007      	b.n	800817e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f9d2 	bl	8008518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800817c:	e1b7      	b.n	80084ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800817e:	bf00      	nop
    return;
 8008180:	e1b5      	b.n	80084ee <HAL_UART_IRQHandler+0x61a>
 8008182:	bf00      	nop
 8008184:	10000001 	.word	0x10000001
 8008188:	04000120 	.word	0x04000120
 800818c:	0800901d 	.word	0x0800901d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008194:	2b01      	cmp	r3, #1
 8008196:	f040 814a 	bne.w	800842e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800819a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819e:	f003 0310 	and.w	r3, r3, #16
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 8143 	beq.w	800842e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80081a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 813c 	beq.w	800842e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2210      	movs	r2, #16
 80081bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c8:	2b40      	cmp	r3, #64	; 0x40
 80081ca:	f040 80b5 	bne.w	8008338 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80081da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8187 	beq.w	80084f2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081ee:	429a      	cmp	r2, r3
 80081f0:	f080 817f 	bcs.w	80084f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	2b00      	cmp	r3, #0
 800820c:	f040 8086 	bne.w	800831c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800822c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	461a      	mov	r2, r3
 8008236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800823a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800823e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1da      	bne.n	8008210 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800826a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800826c:	f023 0301 	bic.w	r3, r3, #1
 8008270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800827e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e1      	bne.n	800825a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3308      	adds	r3, #8
 800829c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3308      	adds	r3, #8
 80082b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e3      	bne.n	8008296 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ec:	f023 0310 	bic.w	r3, r3, #16
 80082f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008300:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800830c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e4      	bne.n	80082dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008316:	4618      	mov	r0, r3
 8008318:	f7fc fd58 	bl	8004dcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008328:	b29b      	uxth	r3, r3
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	b29b      	uxth	r3, r3
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f8fb 	bl	800852c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008336:	e0dc      	b.n	80084f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008344:	b29b      	uxth	r3, r3
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008352:	b29b      	uxth	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80ce 	beq.w	80084f6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800835a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80c9 	beq.w	80084f6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	461a      	mov	r2, r3
 8008382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008386:	647b      	str	r3, [r7, #68]	; 0x44
 8008388:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800838c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e4      	bne.n	8008364 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	623b      	str	r3, [r7, #32]
   return(result);
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083b0:	f023 0301 	bic.w	r3, r3, #1
 80083b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083c2:	633a      	str	r2, [r7, #48]	; 0x30
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e1      	bne.n	800839a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0310 	bic.w	r3, r3, #16
 80083fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800840c:	61fb      	str	r3, [r7, #28]
 800840e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	69b9      	ldr	r1, [r7, #24]
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	617b      	str	r3, [r7, #20]
   return(result);
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e4      	bne.n	80083ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f880 	bl	800852c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800842c:	e063      	b.n	80084f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800842e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00e      	beq.n	8008458 <HAL_UART_IRQHandler+0x584>
 800843a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800843e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d008      	beq.n	8008458 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800844e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 fa81 	bl	8009958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008456:	e051      	b.n	80084fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008460:	2b00      	cmp	r3, #0
 8008462:	d014      	beq.n	800848e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846c:	2b00      	cmp	r3, #0
 800846e:	d105      	bne.n	800847c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d008      	beq.n	800848e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008480:	2b00      	cmp	r3, #0
 8008482:	d03a      	beq.n	80084fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	4798      	blx	r3
    }
    return;
 800848c:	e035      	b.n	80084fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800848e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d009      	beq.n	80084ae <HAL_UART_IRQHandler+0x5da>
 800849a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800849e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fdce 	bl	8009048 <UART_EndTransmit_IT>
    return;
 80084ac:	e026      	b.n	80084fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d009      	beq.n	80084ce <HAL_UART_IRQHandler+0x5fa>
 80084ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 fa5a 	bl	8009980 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084cc:	e016      	b.n	80084fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d010      	beq.n	80084fc <HAL_UART_IRQHandler+0x628>
 80084da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	da0c      	bge.n	80084fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f001 fa42 	bl	800996c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084e8:	e008      	b.n	80084fc <HAL_UART_IRQHandler+0x628>
      return;
 80084ea:	bf00      	nop
 80084ec:	e006      	b.n	80084fc <HAL_UART_IRQHandler+0x628>
    return;
 80084ee:	bf00      	nop
 80084f0:	e004      	b.n	80084fc <HAL_UART_IRQHandler+0x628>
      return;
 80084f2:	bf00      	nop
 80084f4:	e002      	b.n	80084fc <HAL_UART_IRQHandler+0x628>
      return;
 80084f6:	bf00      	nop
 80084f8:	e000      	b.n	80084fc <HAL_UART_IRQHandler+0x628>
    return;
 80084fa:	bf00      	nop
  }
}
 80084fc:	37e8      	adds	r7, #232	; 0xe8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop

08008504 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008548:	b08c      	sub	sp, #48	; 0x30
 800854a:	af00      	add	r7, sp, #0
 800854c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	431a      	orrs	r2, r3
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	431a      	orrs	r2, r3
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	4313      	orrs	r3, r2
 800856a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4baf      	ldr	r3, [pc, #700]	; (8008830 <UART_SetConfig+0x2ec>)
 8008574:	4013      	ands	r3, r2
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800857c:	430b      	orrs	r3, r1
 800857e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4aa4      	ldr	r2, [pc, #656]	; (8008834 <UART_SetConfig+0x2f0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d004      	beq.n	80085b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ac:	4313      	orrs	r3, r2
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80085ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085c4:	430b      	orrs	r3, r1
 80085c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	f023 010f 	bic.w	r1, r3, #15
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a95      	ldr	r2, [pc, #596]	; (8008838 <UART_SetConfig+0x2f4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d125      	bne.n	8008634 <UART_SetConfig+0xf0>
 80085e8:	2003      	movs	r0, #3
 80085ea:	f7ff fb17 	bl	8007c1c <LL_RCC_GetUSARTClockSource>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d81b      	bhi.n	800862c <UART_SetConfig+0xe8>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0xb8>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	0800861d 	.word	0x0800861d
 8008604:	08008615 	.word	0x08008615
 8008608:	08008625 	.word	0x08008625
 800860c:	2301      	movs	r3, #1
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008612:	e042      	b.n	800869a <UART_SetConfig+0x156>
 8008614:	2302      	movs	r3, #2
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861a:	e03e      	b.n	800869a <UART_SetConfig+0x156>
 800861c:	2304      	movs	r3, #4
 800861e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008622:	e03a      	b.n	800869a <UART_SetConfig+0x156>
 8008624:	2308      	movs	r3, #8
 8008626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800862a:	e036      	b.n	800869a <UART_SetConfig+0x156>
 800862c:	2310      	movs	r3, #16
 800862e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008632:	e032      	b.n	800869a <UART_SetConfig+0x156>
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a7e      	ldr	r2, [pc, #504]	; (8008834 <UART_SetConfig+0x2f0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d12a      	bne.n	8008694 <UART_SetConfig+0x150>
 800863e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008642:	f7ff fafb 	bl	8007c3c <LL_RCC_GetLPUARTClockSource>
 8008646:	4603      	mov	r3, r0
 8008648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800864c:	d01a      	beq.n	8008684 <UART_SetConfig+0x140>
 800864e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008652:	d81b      	bhi.n	800868c <UART_SetConfig+0x148>
 8008654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008658:	d00c      	beq.n	8008674 <UART_SetConfig+0x130>
 800865a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800865e:	d815      	bhi.n	800868c <UART_SetConfig+0x148>
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <UART_SetConfig+0x128>
 8008664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008668:	d008      	beq.n	800867c <UART_SetConfig+0x138>
 800866a:	e00f      	b.n	800868c <UART_SetConfig+0x148>
 800866c:	2300      	movs	r3, #0
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008672:	e012      	b.n	800869a <UART_SetConfig+0x156>
 8008674:	2302      	movs	r3, #2
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800867a:	e00e      	b.n	800869a <UART_SetConfig+0x156>
 800867c:	2304      	movs	r3, #4
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008682:	e00a      	b.n	800869a <UART_SetConfig+0x156>
 8008684:	2308      	movs	r3, #8
 8008686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800868a:	e006      	b.n	800869a <UART_SetConfig+0x156>
 800868c:	2310      	movs	r3, #16
 800868e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008692:	e002      	b.n	800869a <UART_SetConfig+0x156>
 8008694:	2310      	movs	r3, #16
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a65      	ldr	r2, [pc, #404]	; (8008834 <UART_SetConfig+0x2f0>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	f040 8097 	bne.w	80087d4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086aa:	2b08      	cmp	r3, #8
 80086ac:	d823      	bhi.n	80086f6 <UART_SetConfig+0x1b2>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <UART_SetConfig+0x170>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086f7 	.word	0x080086f7
 80086bc:	080086e1 	.word	0x080086e1
 80086c0:	080086f7 	.word	0x080086f7
 80086c4:	080086e7 	.word	0x080086e7
 80086c8:	080086f7 	.word	0x080086f7
 80086cc:	080086f7 	.word	0x080086f7
 80086d0:	080086f7 	.word	0x080086f7
 80086d4:	080086ef 	.word	0x080086ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d8:	f7fe fd9c 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 80086dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086de:	e010      	b.n	8008702 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e0:	4b56      	ldr	r3, [pc, #344]	; (800883c <UART_SetConfig+0x2f8>)
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086e4:	e00d      	b.n	8008702 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086e6:	f7fe fd15 	bl	8007114 <HAL_RCC_GetSysClockFreq>
 80086ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086ec:	e009      	b.n	8008702 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086f4:	e005      	b.n	8008702 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 812a 	beq.w	800895e <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	4a4c      	ldr	r2, [pc, #304]	; (8008840 <UART_SetConfig+0x2fc>)
 8008710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008714:	461a      	mov	r2, r3
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	fbb3 f3f2 	udiv	r3, r3, r2
 800871c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	4413      	add	r3, r2
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	429a      	cmp	r2, r3
 800872c:	d305      	bcc.n	800873a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	429a      	cmp	r2, r3
 8008738:	d903      	bls.n	8008742 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008740:	e10d      	b.n	800895e <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	2200      	movs	r2, #0
 8008746:	60bb      	str	r3, [r7, #8]
 8008748:	60fa      	str	r2, [r7, #12]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	4a3c      	ldr	r2, [pc, #240]	; (8008840 <UART_SetConfig+0x2fc>)
 8008750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008754:	b29b      	uxth	r3, r3
 8008756:	2200      	movs	r2, #0
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008760:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008764:	f7f8 fa48 	bl	8000bf8 <__aeabi_uldivmod>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4610      	mov	r0, r2
 800876e:	4619      	mov	r1, r3
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	020b      	lsls	r3, r1, #8
 800877a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800877e:	0202      	lsls	r2, r0, #8
 8008780:	6979      	ldr	r1, [r7, #20]
 8008782:	6849      	ldr	r1, [r1, #4]
 8008784:	0849      	lsrs	r1, r1, #1
 8008786:	2000      	movs	r0, #0
 8008788:	460c      	mov	r4, r1
 800878a:	4605      	mov	r5, r0
 800878c:	eb12 0804 	adds.w	r8, r2, r4
 8008790:	eb43 0905 	adc.w	r9, r3, r5
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	469a      	mov	sl, r3
 800879c:	4693      	mov	fp, r2
 800879e:	4652      	mov	r2, sl
 80087a0:	465b      	mov	r3, fp
 80087a2:	4640      	mov	r0, r8
 80087a4:	4649      	mov	r1, r9
 80087a6:	f7f8 fa27 	bl	8000bf8 <__aeabi_uldivmod>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4613      	mov	r3, r2
 80087b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087b8:	d308      	bcc.n	80087cc <UART_SetConfig+0x288>
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c0:	d204      	bcs.n	80087cc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6a3a      	ldr	r2, [r7, #32]
 80087c8:	60da      	str	r2, [r3, #12]
 80087ca:	e0c8      	b.n	800895e <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087d2:	e0c4      	b.n	800895e <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087dc:	d16d      	bne.n	80088ba <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80087de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087e2:	3b01      	subs	r3, #1
 80087e4:	2b07      	cmp	r3, #7
 80087e6:	d82d      	bhi.n	8008844 <UART_SetConfig+0x300>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <UART_SetConfig+0x2ac>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008811 	.word	0x08008811
 80087f4:	08008819 	.word	0x08008819
 80087f8:	08008845 	.word	0x08008845
 80087fc:	0800881f 	.word	0x0800881f
 8008800:	08008845 	.word	0x08008845
 8008804:	08008845 	.word	0x08008845
 8008808:	08008845 	.word	0x08008845
 800880c:	08008827 	.word	0x08008827
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008810:	f7fe fd16 	bl	8007240 <HAL_RCC_GetPCLK2Freq>
 8008814:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008816:	e01b      	b.n	8008850 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008818:	4b08      	ldr	r3, [pc, #32]	; (800883c <UART_SetConfig+0x2f8>)
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800881c:	e018      	b.n	8008850 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800881e:	f7fe fc79 	bl	8007114 <HAL_RCC_GetSysClockFreq>
 8008822:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008824:	e014      	b.n	8008850 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800882c:	e010      	b.n	8008850 <UART_SetConfig+0x30c>
 800882e:	bf00      	nop
 8008830:	cfff69f3 	.word	0xcfff69f3
 8008834:	40008000 	.word	0x40008000
 8008838:	40013800 	.word	0x40013800
 800883c:	00f42400 	.word	0x00f42400
 8008840:	0800e420 	.word	0x0800e420
      default:
        pclk = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800884e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8083 	beq.w	800895e <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	4a4a      	ldr	r2, [pc, #296]	; (8008988 <UART_SetConfig+0x444>)
 800885e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008862:	461a      	mov	r2, r3
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	fbb3 f3f2 	udiv	r3, r3, r2
 800886a:	005a      	lsls	r2, r3, #1
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	085b      	lsrs	r3, r3, #1
 8008872:	441a      	add	r2, r3
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	fbb2 f3f3 	udiv	r3, r2, r3
 800887c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	2b0f      	cmp	r3, #15
 8008882:	d916      	bls.n	80088b2 <UART_SetConfig+0x36e>
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888a:	d212      	bcs.n	80088b2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	b29b      	uxth	r3, r3
 8008890:	f023 030f 	bic.w	r3, r3, #15
 8008894:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	b29b      	uxth	r3, r3
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	8bfb      	ldrh	r3, [r7, #30]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	8bfa      	ldrh	r2, [r7, #30]
 80088ae:	60da      	str	r2, [r3, #12]
 80088b0:	e055      	b.n	800895e <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088b8:	e051      	b.n	800895e <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088be:	3b01      	subs	r3, #1
 80088c0:	2b07      	cmp	r3, #7
 80088c2:	d822      	bhi.n	800890a <UART_SetConfig+0x3c6>
 80088c4:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <UART_SetConfig+0x388>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	080088ed 	.word	0x080088ed
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	0800890b 	.word	0x0800890b
 80088d8:	080088fb 	.word	0x080088fb
 80088dc:	0800890b 	.word	0x0800890b
 80088e0:	0800890b 	.word	0x0800890b
 80088e4:	0800890b 	.word	0x0800890b
 80088e8:	08008903 	.word	0x08008903
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088ec:	f7fe fca8 	bl	8007240 <HAL_RCC_GetPCLK2Freq>
 80088f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088f2:	e010      	b.n	8008916 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088f4:	4b25      	ldr	r3, [pc, #148]	; (800898c <UART_SetConfig+0x448>)
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088f8:	e00d      	b.n	8008916 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088fa:	f7fe fc0b 	bl	8007114 <HAL_RCC_GetSysClockFreq>
 80088fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008900:	e009      	b.n	8008916 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008908:	e005      	b.n	8008916 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008914:	bf00      	nop
    }

    if (pclk != 0U)
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d020      	beq.n	800895e <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	4a19      	ldr	r2, [pc, #100]	; (8008988 <UART_SetConfig+0x444>)
 8008922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008926:	461a      	mov	r2, r3
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	fbb3 f2f2 	udiv	r2, r3, r2
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	441a      	add	r2, r3
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	2b0f      	cmp	r3, #15
 8008944:	d908      	bls.n	8008958 <UART_SetConfig+0x414>
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800894c:	d204      	bcs.n	8008958 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6a3a      	ldr	r2, [r7, #32]
 8008954:	60da      	str	r2, [r3, #12]
 8008956:	e002      	b.n	800895e <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2201      	movs	r2, #1
 8008962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2201      	movs	r2, #1
 800896a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2200      	movs	r2, #0
 8008978:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800897a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800897e:	4618      	mov	r0, r3
 8008980:	3730      	adds	r7, #48	; 0x30
 8008982:	46bd      	mov	sp, r7
 8008984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008988:	0800e420 	.word	0x0800e420
 800898c:	00f42400 	.word	0x00f42400

08008990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	f003 0310 	and.w	r3, r3, #16
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01a      	beq.n	8008aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a8e:	d10a      	bne.n	8008aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	605a      	str	r2, [r3, #4]
  }
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ae4:	f7fb ff60 	bl	80049a8 <HAL_GetTick>
 8008ae8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0308 	and.w	r3, r3, #8
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d10e      	bne.n	8008b16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f82f 	bl	8008b6a <UART_WaitOnFlagUntilTimeout>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e025      	b.n	8008b62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d10e      	bne.n	8008b42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f819 	bl	8008b6a <UART_WaitOnFlagUntilTimeout>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e00f      	b.n	8008b62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b09c      	sub	sp, #112	; 0x70
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	603b      	str	r3, [r7, #0]
 8008b76:	4613      	mov	r3, r2
 8008b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b7a:	e0a9      	b.n	8008cd0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b82:	f000 80a5 	beq.w	8008cd0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b86:	f7fb ff0f 	bl	80049a8 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d302      	bcc.n	8008b9c <UART_WaitOnFlagUntilTimeout+0x32>
 8008b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d140      	bne.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bb0:	667b      	str	r3, [r7, #100]	; 0x64
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bbc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e6      	bne.n	8008b9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	f023 0301 	bic.w	r3, r3, #1
 8008be4:	663b      	str	r3, [r7, #96]	; 0x60
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3308      	adds	r3, #8
 8008bec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bee:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e5      	bne.n	8008bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2220      	movs	r2, #32
 8008c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e069      	b.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d051      	beq.n	8008cd0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c3a:	d149      	bne.n	8008cd0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34
 8008c66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e6      	bne.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	613b      	str	r3, [r7, #16]
   return(result);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f023 0301 	bic.w	r3, r3, #1
 8008c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3308      	adds	r3, #8
 8008c96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c98:	623a      	str	r2, [r7, #32]
 8008c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	69f9      	ldr	r1, [r7, #28]
 8008c9e:	6a3a      	ldr	r2, [r7, #32]
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e5      	bne.n	8008c78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e010      	b.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	69da      	ldr	r2, [r3, #28]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	bf0c      	ite	eq
 8008ce0:	2301      	moveq	r3, #1
 8008ce2:	2300      	movne	r3, #0
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	f43f af46 	beq.w	8008b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3770      	adds	r7, #112	; 0x70
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b0a3      	sub	sp, #140	; 0x8c
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	88fa      	ldrh	r2, [r7, #6]
 8008d14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	88fa      	ldrh	r2, [r7, #6]
 8008d1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	d10e      	bne.n	8008d4e <UART_Start_Receive_IT+0x52>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d105      	bne.n	8008d44 <UART_Start_Receive_IT+0x48>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008d3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d42:	e02d      	b.n	8008da0 <UART_Start_Receive_IT+0xa4>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	22ff      	movs	r2, #255	; 0xff
 8008d48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d4c:	e028      	b.n	8008da0 <UART_Start_Receive_IT+0xa4>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10d      	bne.n	8008d72 <UART_Start_Receive_IT+0x76>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <UART_Start_Receive_IT+0x6c>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	22ff      	movs	r2, #255	; 0xff
 8008d62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d66:	e01b      	b.n	8008da0 <UART_Start_Receive_IT+0xa4>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	227f      	movs	r2, #127	; 0x7f
 8008d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d70:	e016      	b.n	8008da0 <UART_Start_Receive_IT+0xa4>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d7a:	d10d      	bne.n	8008d98 <UART_Start_Receive_IT+0x9c>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d104      	bne.n	8008d8e <UART_Start_Receive_IT+0x92>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	227f      	movs	r2, #127	; 0x7f
 8008d88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d8c:	e008      	b.n	8008da0 <UART_Start_Receive_IT+0xa4>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	223f      	movs	r2, #63	; 0x3f
 8008d92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d96:	e003      	b.n	8008da0 <UART_Start_Receive_IT+0xa4>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2222      	movs	r2, #34	; 0x22
 8008dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3308      	adds	r3, #8
 8008db6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008dd4:	673a      	str	r2, [r7, #112]	; 0x70
 8008dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008dda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e3      	bne.n	8008db0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df0:	d153      	bne.n	8008e9a <UART_Start_Receive_IT+0x19e>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008df8:	88fa      	ldrh	r2, [r7, #6]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d34d      	bcc.n	8008e9a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e06:	d107      	bne.n	8008e18 <UART_Start_Receive_IT+0x11c>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d103      	bne.n	8008e18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4a4b      	ldr	r2, [pc, #300]	; (8008f40 <UART_Start_Receive_IT+0x244>)
 8008e14:	671a      	str	r2, [r3, #112]	; 0x70
 8008e16:	e002      	b.n	8008e1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4a4a      	ldr	r2, [pc, #296]	; (8008f44 <UART_Start_Receive_IT+0x248>)
 8008e1c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d01a      	beq.n	8008e64 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e4      	bne.n	8008e2e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3308      	adds	r3, #8
 8008e82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e84:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e5      	bne.n	8008e64 <UART_Start_Receive_IT+0x168>
 8008e98:	e04a      	b.n	8008f30 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea2:	d107      	bne.n	8008eb4 <UART_Start_Receive_IT+0x1b8>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d103      	bne.n	8008eb4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4a26      	ldr	r2, [pc, #152]	; (8008f48 <UART_Start_Receive_IT+0x24c>)
 8008eb0:	671a      	str	r2, [r3, #112]	; 0x70
 8008eb2:	e002      	b.n	8008eba <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4a25      	ldr	r2, [pc, #148]	; (8008f4c <UART_Start_Receive_IT+0x250>)
 8008eb8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d019      	beq.n	8008efe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008ede:	677b      	str	r3, [r7, #116]	; 0x74
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e6      	bne.n	8008eca <UART_Start_Receive_IT+0x1ce>
 8008efc:	e018      	b.n	8008f30 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f043 0320 	orr.w	r3, r3, #32
 8008f12:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f1c:	623b      	str	r3, [r7, #32]
 8008f1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	69f9      	ldr	r1, [r7, #28]
 8008f22:	6a3a      	ldr	r2, [r7, #32]
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e6      	bne.n	8008efe <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	378c      	adds	r7, #140	; 0x8c
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	08009659 	.word	0x08009659
 8008f44:	08009361 	.word	0x08009361
 8008f48:	080091ff 	.word	0x080091ff
 8008f4c:	0800909f 	.word	0x0800909f

08008f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b095      	sub	sp, #84	; 0x54
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f76:	643b      	str	r3, [r7, #64]	; 0x40
 8008f78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e6      	bne.n	8008f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3308      	adds	r3, #8
 8008f90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fa0:	f023 0301 	bic.w	r3, r3, #1
 8008fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3308      	adds	r3, #8
 8008fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e3      	bne.n	8008f8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d118      	bne.n	8008ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f023 0310 	bic.w	r3, r3, #16
 8008fde:	647b      	str	r3, [r7, #68]	; 0x44
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe8:	61bb      	str	r3, [r7, #24]
 8008fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6979      	ldr	r1, [r7, #20]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e6      	bne.n	8008fca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009010:	bf00      	nop
 8009012:	3754      	adds	r7, #84	; 0x54
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009028:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7ff fa6c 	bl	8008518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	60bb      	str	r3, [r7, #8]
   return(result);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009064:	61fb      	str	r3, [r7, #28]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	461a      	mov	r2, r3
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	61bb      	str	r3, [r7, #24]
 8009070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	6979      	ldr	r1, [r7, #20]
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	613b      	str	r3, [r7, #16]
   return(result);
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e6      	bne.n	8009050 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff fa37 	bl	8008504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009096:	bf00      	nop
 8009098:	3720      	adds	r7, #32
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b096      	sub	sp, #88	; 0x58
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b6:	2b22      	cmp	r3, #34	; 0x22
 80090b8:	f040 8095 	bne.w	80091e6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090c6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80090ca:	b2d9      	uxtb	r1, r3
 80090cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d6:	400a      	ands	r2, r1
 80090d8:	b2d2      	uxtb	r2, r2
 80090da:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d178      	bne.n	80091f6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009118:	653b      	str	r3, [r7, #80]	; 0x50
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009122:	647b      	str	r3, [r7, #68]	; 0x44
 8009124:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e6      	bne.n	8009104 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3308      	adds	r3, #8
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	623b      	str	r3, [r7, #32]
   return(result);
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	f023 0301 	bic.w	r3, r3, #1
 800914c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3308      	adds	r3, #8
 8009154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009156:	633a      	str	r2, [r7, #48]	; 0x30
 8009158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800915c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e5      	bne.n	8009136 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d12e      	bne.n	80091de <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	60fb      	str	r3, [r7, #12]
   return(result);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0310 	bic.w	r3, r3, #16
 800919a:	64bb      	str	r3, [r7, #72]	; 0x48
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091a4:	61fb      	str	r3, [r7, #28]
 80091a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	69b9      	ldr	r1, [r7, #24]
 80091aa:	69fa      	ldr	r2, [r7, #28]
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	617b      	str	r3, [r7, #20]
   return(result);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e6      	bne.n	8009186 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	f003 0310 	and.w	r3, r3, #16
 80091c2:	2b10      	cmp	r3, #16
 80091c4:	d103      	bne.n	80091ce <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2210      	movs	r2, #16
 80091cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff f9a8 	bl	800852c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091dc:	e00b      	b.n	80091f6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7fa fdd6 	bl	8003d90 <HAL_UART_RxCpltCallback>
}
 80091e4:	e007      	b.n	80091f6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	699a      	ldr	r2, [r3, #24]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f042 0208 	orr.w	r2, r2, #8
 80091f4:	619a      	str	r2, [r3, #24]
}
 80091f6:	bf00      	nop
 80091f8:	3758      	adds	r7, #88	; 0x58
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b096      	sub	sp, #88	; 0x58
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800920c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009216:	2b22      	cmp	r3, #34	; 0x22
 8009218:	f040 8095 	bne.w	8009346 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800922a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800922c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009230:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009234:	4013      	ands	r3, r2
 8009236:	b29a      	uxth	r2, r3
 8009238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800923a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009240:	1c9a      	adds	r2, r3, #2
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800925e:	b29b      	uxth	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d178      	bne.n	8009356 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009278:	64fb      	str	r3, [r7, #76]	; 0x4c
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009282:	643b      	str	r3, [r7, #64]	; 0x40
 8009284:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e6      	bne.n	8009264 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3308      	adds	r3, #8
 800929c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	f023 0301 	bic.w	r3, r3, #1
 80092ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3308      	adds	r3, #8
 80092b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e5      	bne.n	8009296 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d12e      	bne.n	800933e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f023 0310 	bic.w	r3, r3, #16
 80092fa:	647b      	str	r3, [r7, #68]	; 0x44
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009304:	61bb      	str	r3, [r7, #24]
 8009306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	6979      	ldr	r1, [r7, #20]
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	e841 2300 	strex	r3, r2, [r1]
 8009310:	613b      	str	r3, [r7, #16]
   return(result);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1e6      	bne.n	80092e6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f003 0310 	and.w	r3, r3, #16
 8009322:	2b10      	cmp	r3, #16
 8009324:	d103      	bne.n	800932e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2210      	movs	r2, #16
 800932c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff f8f8 	bl	800852c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800933c:	e00b      	b.n	8009356 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7fa fd26 	bl	8003d90 <HAL_UART_RxCpltCallback>
}
 8009344:	e007      	b.n	8009356 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	699a      	ldr	r2, [r3, #24]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f042 0208 	orr.w	r2, r2, #8
 8009354:	619a      	str	r2, [r3, #24]
}
 8009356:	bf00      	nop
 8009358:	3758      	adds	r7, #88	; 0x58
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b0a6      	sub	sp, #152	; 0x98
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800936e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009396:	2b22      	cmp	r3, #34	; 0x22
 8009398:	f040 814f 	bne.w	800963a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093a6:	e0f6      	b.n	8009596 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093b2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80093b6:	b2d9      	uxtb	r1, r3
 80093b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c2:	400a      	ands	r2, r1
 80093c4:	b2d2      	uxtb	r2, r2
 80093c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093d8:	b29b      	uxth	r3, r3
 80093da:	3b01      	subs	r3, #1
 80093dc:	b29a      	uxth	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d053      	beq.n	80094a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d011      	beq.n	800942a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800940a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00b      	beq.n	800942a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2201      	movs	r2, #1
 8009418:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009420:	f043 0201 	orr.w	r2, r3, #1
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800942a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d011      	beq.n	800945a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009436:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00b      	beq.n	800945a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2202      	movs	r2, #2
 8009448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009450:	f043 0204 	orr.w	r2, r3, #4
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800945a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	2b00      	cmp	r3, #0
 8009464:	d011      	beq.n	800948a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2204      	movs	r2, #4
 8009478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009480:	f043 0202 	orr.w	r2, r3, #2
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d006      	beq.n	80094a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff f83f 	bl	8008518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d173      	bne.n	8009596 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80094bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80094d2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80094d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80094de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e4      	bne.n	80094ae <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3308      	adds	r3, #8
 80094ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80094f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094fa:	f023 0301 	bic.w	r3, r3, #1
 80094fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3308      	adds	r3, #8
 8009506:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009508:	657a      	str	r2, [r7, #84]	; 0x54
 800950a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800950e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009510:	e841 2300 	strex	r3, r2, [r1]
 8009514:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e3      	bne.n	80094e4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952e:	2b01      	cmp	r3, #1
 8009530:	d12e      	bne.n	8009590 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009548:	f023 0310 	bic.w	r3, r3, #16
 800954c:	67bb      	str	r3, [r7, #120]	; 0x78
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009556:	643b      	str	r3, [r7, #64]	; 0x40
 8009558:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800955c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e6      	bne.n	8009538 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	f003 0310 	and.w	r3, r3, #16
 8009574:	2b10      	cmp	r3, #16
 8009576:	d103      	bne.n	8009580 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2210      	movs	r2, #16
 800957e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7fe ffcf 	bl	800852c <HAL_UARTEx_RxEventCallback>
 800958e:	e002      	b.n	8009596 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7fa fbfd 	bl	8003d90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009596:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800959a:	2b00      	cmp	r3, #0
 800959c:	d006      	beq.n	80095ac <UART_RxISR_8BIT_FIFOEN+0x24c>
 800959e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095a2:	f003 0320 	and.w	r3, r3, #32
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f47f aefe 	bne.w	80093a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095b6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d045      	beq.n	800964a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d23e      	bcs.n	800964a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3308      	adds	r3, #8
 80095d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	61fb      	str	r3, [r7, #28]
   return(result);
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095e2:	673b      	str	r3, [r7, #112]	; 0x70
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3308      	adds	r3, #8
 80095ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80095ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e5      	bne.n	80095cc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a14      	ldr	r2, [pc, #80]	; (8009654 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009604:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	e853 3f00 	ldrex	r3, [r3]
 8009612:	60bb      	str	r3, [r7, #8]
   return(result);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f043 0320 	orr.w	r3, r3, #32
 800961a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	461a      	mov	r2, r3
 8009622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	6979      	ldr	r1, [r7, #20]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	613b      	str	r3, [r7, #16]
   return(result);
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e6      	bne.n	8009606 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009638:	e007      	b.n	800964a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	699a      	ldr	r2, [r3, #24]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0208 	orr.w	r2, r2, #8
 8009648:	619a      	str	r2, [r3, #24]
}
 800964a:	bf00      	nop
 800964c:	3798      	adds	r7, #152	; 0x98
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	0800909f 	.word	0x0800909f

08009658 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b0a8      	sub	sp, #160	; 0xa0
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009666:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800968e:	2b22      	cmp	r3, #34	; 0x22
 8009690:	f040 8153 	bne.w	800993a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800969a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800969e:	e0fa      	b.n	8009896 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80096b2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80096b6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80096ba:	4013      	ands	r3, r2
 80096bc:	b29a      	uxth	r2, r3
 80096be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c8:	1c9a      	adds	r2, r3, #2
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80096ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d053      	beq.n	800979e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d011      	beq.n	8009726 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009702:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00b      	beq.n	8009726 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2201      	movs	r2, #1
 8009714:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800971c:	f043 0201 	orr.w	r2, r3, #1
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b00      	cmp	r3, #0
 8009730:	d011      	beq.n	8009756 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009732:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2202      	movs	r2, #2
 8009744:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800974c:	f043 0204 	orr.w	r2, r3, #4
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009756:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800975a:	f003 0304 	and.w	r3, r3, #4
 800975e:	2b00      	cmp	r3, #0
 8009760:	d011      	beq.n	8009786 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009762:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00b      	beq.n	8009786 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2204      	movs	r2, #4
 8009774:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800977c:	f043 0202 	orr.w	r2, r3, #2
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d006      	beq.n	800979e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7fe fec1 	bl	8008518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d175      	bne.n	8009896 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	461a      	mov	r2, r3
 80097c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097ce:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097d4:	e841 2300 	strex	r3, r2, [r1]
 80097d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e4      	bne.n	80097aa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3308      	adds	r3, #8
 80097e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097f6:	f023 0301 	bic.w	r3, r3, #1
 80097fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3308      	adds	r3, #8
 8009804:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009808:	65ba      	str	r2, [r7, #88]	; 0x58
 800980a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800980e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e1      	bne.n	80097e0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2220      	movs	r2, #32
 8009820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800982e:	2b01      	cmp	r3, #1
 8009830:	d12e      	bne.n	8009890 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009848:	f023 0310 	bic.w	r3, r3, #16
 800984c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009856:	647b      	str	r3, [r7, #68]	; 0x44
 8009858:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800985c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800985e:	e841 2300 	strex	r3, r2, [r1]
 8009862:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e6      	bne.n	8009838 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	2b10      	cmp	r3, #16
 8009876:	d103      	bne.n	8009880 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2210      	movs	r2, #16
 800987e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7fe fe4f 	bl	800852c <HAL_UARTEx_RxEventCallback>
 800988e:	e002      	b.n	8009896 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7fa fa7d 	bl	8003d90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009896:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800989a:	2b00      	cmp	r3, #0
 800989c:	d006      	beq.n	80098ac <UART_RxISR_16BIT_FIFOEN+0x254>
 800989e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f47f aefa 	bne.w	80096a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80098b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d045      	beq.n	800994a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80098c4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d23e      	bcs.n	800994a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	3308      	adds	r3, #8
 80098d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	e853 3f00 	ldrex	r3, [r3]
 80098da:	623b      	str	r3, [r7, #32]
   return(result);
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098e2:	677b      	str	r3, [r7, #116]	; 0x74
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3308      	adds	r3, #8
 80098ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80098ec:	633a      	str	r2, [r7, #48]	; 0x30
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f4:	e841 2300 	strex	r3, r2, [r1]
 80098f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e5      	bne.n	80098cc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a14      	ldr	r2, [pc, #80]	; (8009954 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009904:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	e853 3f00 	ldrex	r3, [r3]
 8009912:	60fb      	str	r3, [r7, #12]
   return(result);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f043 0320 	orr.w	r3, r3, #32
 800991a:	673b      	str	r3, [r7, #112]	; 0x70
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	461a      	mov	r2, r3
 8009922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009924:	61fb      	str	r3, [r7, #28]
 8009926:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	69b9      	ldr	r1, [r7, #24]
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	e841 2300 	strex	r3, r2, [r1]
 8009930:	617b      	str	r3, [r7, #20]
   return(result);
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e6      	bne.n	8009906 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009938:	e007      	b.n	800994a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f042 0208 	orr.w	r2, r2, #8
 8009948:	619a      	str	r2, [r3, #24]
}
 800994a:	bf00      	nop
 800994c:	37a0      	adds	r7, #160	; 0xa0
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	080091ff 	.word	0x080091ff

08009958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d101      	bne.n	80099aa <HAL_UARTEx_DisableFifoMode+0x16>
 80099a6:	2302      	movs	r3, #2
 80099a8:	e027      	b.n	80099fa <HAL_UARTEx_DisableFifoMode+0x66>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2224      	movs	r2, #36	; 0x24
 80099b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0201 	bic.w	r2, r2, #1
 80099d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d101      	bne.n	8009a1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	e02d      	b.n	8009a7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2224      	movs	r2, #36	; 0x24
 8009a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0201 	bic.w	r2, r2, #1
 8009a44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	430a      	orrs	r2, r1
 8009a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f850 	bl	8009b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e02d      	b.n	8009af6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2224      	movs	r2, #36	; 0x24
 8009aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 0201 	bic.w	r2, r2, #1
 8009ac0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f812 	bl	8009b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d108      	bne.n	8009b22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b20:	e031      	b.n	8009b86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b22:	2308      	movs	r3, #8
 8009b24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b26:	2308      	movs	r3, #8
 8009b28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	0e5b      	lsrs	r3, r3, #25
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	f003 0307 	and.w	r3, r3, #7
 8009b38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	0f5b      	lsrs	r3, r3, #29
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	f003 0307 	and.w	r3, r3, #7
 8009b48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b4a:	7bbb      	ldrb	r3, [r7, #14]
 8009b4c:	7b3a      	ldrb	r2, [r7, #12]
 8009b4e:	4911      	ldr	r1, [pc, #68]	; (8009b94 <UARTEx_SetNbDataToProcess+0x94>)
 8009b50:	5c8a      	ldrb	r2, [r1, r2]
 8009b52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b56:	7b3a      	ldrb	r2, [r7, #12]
 8009b58:	490f      	ldr	r1, [pc, #60]	; (8009b98 <UARTEx_SetNbDataToProcess+0x98>)
 8009b5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	7b7a      	ldrb	r2, [r7, #13]
 8009b6c:	4909      	ldr	r1, [pc, #36]	; (8009b94 <UARTEx_SetNbDataToProcess+0x94>)
 8009b6e:	5c8a      	ldrb	r2, [r1, r2]
 8009b70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b74:	7b7a      	ldrb	r2, [r7, #13]
 8009b76:	4908      	ldr	r1, [pc, #32]	; (8009b98 <UARTEx_SetNbDataToProcess+0x98>)
 8009b78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b86:	bf00      	nop
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	0800e438 	.word	0x0800e438
 8009b98:	0800e440 	.word	0x0800e440

08009b9c <__errno>:
 8009b9c:	4b01      	ldr	r3, [pc, #4]	; (8009ba4 <__errno+0x8>)
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000010 	.word	0x20000010

08009ba8 <__libc_init_array>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	4d0d      	ldr	r5, [pc, #52]	; (8009be0 <__libc_init_array+0x38>)
 8009bac:	4c0d      	ldr	r4, [pc, #52]	; (8009be4 <__libc_init_array+0x3c>)
 8009bae:	1b64      	subs	r4, r4, r5
 8009bb0:	10a4      	asrs	r4, r4, #2
 8009bb2:	2600      	movs	r6, #0
 8009bb4:	42a6      	cmp	r6, r4
 8009bb6:	d109      	bne.n	8009bcc <__libc_init_array+0x24>
 8009bb8:	4d0b      	ldr	r5, [pc, #44]	; (8009be8 <__libc_init_array+0x40>)
 8009bba:	4c0c      	ldr	r4, [pc, #48]	; (8009bec <__libc_init_array+0x44>)
 8009bbc:	f004 fa88 	bl	800e0d0 <_init>
 8009bc0:	1b64      	subs	r4, r4, r5
 8009bc2:	10a4      	asrs	r4, r4, #2
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	42a6      	cmp	r6, r4
 8009bc8:	d105      	bne.n	8009bd6 <__libc_init_array+0x2e>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd0:	4798      	blx	r3
 8009bd2:	3601      	adds	r6, #1
 8009bd4:	e7ee      	b.n	8009bb4 <__libc_init_array+0xc>
 8009bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bda:	4798      	blx	r3
 8009bdc:	3601      	adds	r6, #1
 8009bde:	e7f2      	b.n	8009bc6 <__libc_init_array+0x1e>
 8009be0:	0800ec4c 	.word	0x0800ec4c
 8009be4:	0800ec4c 	.word	0x0800ec4c
 8009be8:	0800ec4c 	.word	0x0800ec4c
 8009bec:	0800ec50 	.word	0x0800ec50

08009bf0 <memcpy>:
 8009bf0:	440a      	add	r2, r1
 8009bf2:	4291      	cmp	r1, r2
 8009bf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009bf8:	d100      	bne.n	8009bfc <memcpy+0xc>
 8009bfa:	4770      	bx	lr
 8009bfc:	b510      	push	{r4, lr}
 8009bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c06:	4291      	cmp	r1, r2
 8009c08:	d1f9      	bne.n	8009bfe <memcpy+0xe>
 8009c0a:	bd10      	pop	{r4, pc}

08009c0c <memset>:
 8009c0c:	4402      	add	r2, r0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d100      	bne.n	8009c16 <memset+0xa>
 8009c14:	4770      	bx	lr
 8009c16:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1a:	e7f9      	b.n	8009c10 <memset+0x4>

08009c1c <__cvt>:
 8009c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c20:	ec55 4b10 	vmov	r4, r5, d0
 8009c24:	2d00      	cmp	r5, #0
 8009c26:	460e      	mov	r6, r1
 8009c28:	4619      	mov	r1, r3
 8009c2a:	462b      	mov	r3, r5
 8009c2c:	bfbb      	ittet	lt
 8009c2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c32:	461d      	movlt	r5, r3
 8009c34:	2300      	movge	r3, #0
 8009c36:	232d      	movlt	r3, #45	; 0x2d
 8009c38:	700b      	strb	r3, [r1, #0]
 8009c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009c40:	4691      	mov	r9, r2
 8009c42:	f023 0820 	bic.w	r8, r3, #32
 8009c46:	bfbc      	itt	lt
 8009c48:	4622      	movlt	r2, r4
 8009c4a:	4614      	movlt	r4, r2
 8009c4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c50:	d005      	beq.n	8009c5e <__cvt+0x42>
 8009c52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c56:	d100      	bne.n	8009c5a <__cvt+0x3e>
 8009c58:	3601      	adds	r6, #1
 8009c5a:	2102      	movs	r1, #2
 8009c5c:	e000      	b.n	8009c60 <__cvt+0x44>
 8009c5e:	2103      	movs	r1, #3
 8009c60:	ab03      	add	r3, sp, #12
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	ab02      	add	r3, sp, #8
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	ec45 4b10 	vmov	d0, r4, r5
 8009c6c:	4653      	mov	r3, sl
 8009c6e:	4632      	mov	r2, r6
 8009c70:	f000 fcea 	bl	800a648 <_dtoa_r>
 8009c74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c78:	4607      	mov	r7, r0
 8009c7a:	d102      	bne.n	8009c82 <__cvt+0x66>
 8009c7c:	f019 0f01 	tst.w	r9, #1
 8009c80:	d022      	beq.n	8009cc8 <__cvt+0xac>
 8009c82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c86:	eb07 0906 	add.w	r9, r7, r6
 8009c8a:	d110      	bne.n	8009cae <__cvt+0x92>
 8009c8c:	783b      	ldrb	r3, [r7, #0]
 8009c8e:	2b30      	cmp	r3, #48	; 0x30
 8009c90:	d10a      	bne.n	8009ca8 <__cvt+0x8c>
 8009c92:	2200      	movs	r2, #0
 8009c94:	2300      	movs	r3, #0
 8009c96:	4620      	mov	r0, r4
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f7f6 feed 	bl	8000a78 <__aeabi_dcmpeq>
 8009c9e:	b918      	cbnz	r0, 8009ca8 <__cvt+0x8c>
 8009ca0:	f1c6 0601 	rsb	r6, r6, #1
 8009ca4:	f8ca 6000 	str.w	r6, [sl]
 8009ca8:	f8da 3000 	ldr.w	r3, [sl]
 8009cac:	4499      	add	r9, r3
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	f7f6 fedf 	bl	8000a78 <__aeabi_dcmpeq>
 8009cba:	b108      	cbz	r0, 8009cc0 <__cvt+0xa4>
 8009cbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009cc0:	2230      	movs	r2, #48	; 0x30
 8009cc2:	9b03      	ldr	r3, [sp, #12]
 8009cc4:	454b      	cmp	r3, r9
 8009cc6:	d307      	bcc.n	8009cd8 <__cvt+0xbc>
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ccc:	1bdb      	subs	r3, r3, r7
 8009cce:	4638      	mov	r0, r7
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	b004      	add	sp, #16
 8009cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd8:	1c59      	adds	r1, r3, #1
 8009cda:	9103      	str	r1, [sp, #12]
 8009cdc:	701a      	strb	r2, [r3, #0]
 8009cde:	e7f0      	b.n	8009cc2 <__cvt+0xa6>

08009ce0 <__exponent>:
 8009ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	bfb8      	it	lt
 8009ce8:	4249      	neglt	r1, r1
 8009cea:	f803 2b02 	strb.w	r2, [r3], #2
 8009cee:	bfb4      	ite	lt
 8009cf0:	222d      	movlt	r2, #45	; 0x2d
 8009cf2:	222b      	movge	r2, #43	; 0x2b
 8009cf4:	2909      	cmp	r1, #9
 8009cf6:	7042      	strb	r2, [r0, #1]
 8009cf8:	dd2a      	ble.n	8009d50 <__exponent+0x70>
 8009cfa:	f10d 0407 	add.w	r4, sp, #7
 8009cfe:	46a4      	mov	ip, r4
 8009d00:	270a      	movs	r7, #10
 8009d02:	46a6      	mov	lr, r4
 8009d04:	460a      	mov	r2, r1
 8009d06:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d0a:	fb07 1516 	mls	r5, r7, r6, r1
 8009d0e:	3530      	adds	r5, #48	; 0x30
 8009d10:	2a63      	cmp	r2, #99	; 0x63
 8009d12:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009d16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	dcf1      	bgt.n	8009d02 <__exponent+0x22>
 8009d1e:	3130      	adds	r1, #48	; 0x30
 8009d20:	f1ae 0502 	sub.w	r5, lr, #2
 8009d24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d28:	1c44      	adds	r4, r0, #1
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	4561      	cmp	r1, ip
 8009d2e:	d30a      	bcc.n	8009d46 <__exponent+0x66>
 8009d30:	f10d 0209 	add.w	r2, sp, #9
 8009d34:	eba2 020e 	sub.w	r2, r2, lr
 8009d38:	4565      	cmp	r5, ip
 8009d3a:	bf88      	it	hi
 8009d3c:	2200      	movhi	r2, #0
 8009d3e:	4413      	add	r3, r2
 8009d40:	1a18      	subs	r0, r3, r0
 8009d42:	b003      	add	sp, #12
 8009d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d4e:	e7ed      	b.n	8009d2c <__exponent+0x4c>
 8009d50:	2330      	movs	r3, #48	; 0x30
 8009d52:	3130      	adds	r1, #48	; 0x30
 8009d54:	7083      	strb	r3, [r0, #2]
 8009d56:	70c1      	strb	r1, [r0, #3]
 8009d58:	1d03      	adds	r3, r0, #4
 8009d5a:	e7f1      	b.n	8009d40 <__exponent+0x60>

08009d5c <_printf_float>:
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	ed2d 8b02 	vpush	{d8}
 8009d64:	b08d      	sub	sp, #52	; 0x34
 8009d66:	460c      	mov	r4, r1
 8009d68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d6c:	4616      	mov	r6, r2
 8009d6e:	461f      	mov	r7, r3
 8009d70:	4605      	mov	r5, r0
 8009d72:	f001 fa57 	bl	800b224 <_localeconv_r>
 8009d76:	f8d0 a000 	ldr.w	sl, [r0]
 8009d7a:	4650      	mov	r0, sl
 8009d7c:	f7f6 fa00 	bl	8000180 <strlen>
 8009d80:	2300      	movs	r3, #0
 8009d82:	930a      	str	r3, [sp, #40]	; 0x28
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	9305      	str	r3, [sp, #20]
 8009d88:	f8d8 3000 	ldr.w	r3, [r8]
 8009d8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d90:	3307      	adds	r3, #7
 8009d92:	f023 0307 	bic.w	r3, r3, #7
 8009d96:	f103 0208 	add.w	r2, r3, #8
 8009d9a:	f8c8 2000 	str.w	r2, [r8]
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009da6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009daa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dae:	9307      	str	r3, [sp, #28]
 8009db0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009db4:	ee08 0a10 	vmov	s16, r0
 8009db8:	4b9f      	ldr	r3, [pc, #636]	; (800a038 <_printf_float+0x2dc>)
 8009dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dc2:	f7f6 fe8b 	bl	8000adc <__aeabi_dcmpun>
 8009dc6:	bb88      	cbnz	r0, 8009e2c <_printf_float+0xd0>
 8009dc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dcc:	4b9a      	ldr	r3, [pc, #616]	; (800a038 <_printf_float+0x2dc>)
 8009dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dd2:	f7f6 fe65 	bl	8000aa0 <__aeabi_dcmple>
 8009dd6:	bb48      	cbnz	r0, 8009e2c <_printf_float+0xd0>
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4640      	mov	r0, r8
 8009dde:	4649      	mov	r1, r9
 8009de0:	f7f6 fe54 	bl	8000a8c <__aeabi_dcmplt>
 8009de4:	b110      	cbz	r0, 8009dec <_printf_float+0x90>
 8009de6:	232d      	movs	r3, #45	; 0x2d
 8009de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dec:	4b93      	ldr	r3, [pc, #588]	; (800a03c <_printf_float+0x2e0>)
 8009dee:	4894      	ldr	r0, [pc, #592]	; (800a040 <_printf_float+0x2e4>)
 8009df0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009df4:	bf94      	ite	ls
 8009df6:	4698      	movls	r8, r3
 8009df8:	4680      	movhi	r8, r0
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	6123      	str	r3, [r4, #16]
 8009dfe:	9b05      	ldr	r3, [sp, #20]
 8009e00:	f023 0204 	bic.w	r2, r3, #4
 8009e04:	6022      	str	r2, [r4, #0]
 8009e06:	f04f 0900 	mov.w	r9, #0
 8009e0a:	9700      	str	r7, [sp, #0]
 8009e0c:	4633      	mov	r3, r6
 8009e0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e10:	4621      	mov	r1, r4
 8009e12:	4628      	mov	r0, r5
 8009e14:	f000 f9d8 	bl	800a1c8 <_printf_common>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	f040 8090 	bne.w	8009f3e <_printf_float+0x1e2>
 8009e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e22:	b00d      	add	sp, #52	; 0x34
 8009e24:	ecbd 8b02 	vpop	{d8}
 8009e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	464b      	mov	r3, r9
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	f7f6 fe52 	bl	8000adc <__aeabi_dcmpun>
 8009e38:	b140      	cbz	r0, 8009e4c <_printf_float+0xf0>
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	bfbc      	itt	lt
 8009e40:	232d      	movlt	r3, #45	; 0x2d
 8009e42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e46:	487f      	ldr	r0, [pc, #508]	; (800a044 <_printf_float+0x2e8>)
 8009e48:	4b7f      	ldr	r3, [pc, #508]	; (800a048 <_printf_float+0x2ec>)
 8009e4a:	e7d1      	b.n	8009df0 <_printf_float+0x94>
 8009e4c:	6863      	ldr	r3, [r4, #4]
 8009e4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009e52:	9206      	str	r2, [sp, #24]
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	d13f      	bne.n	8009ed8 <_printf_float+0x17c>
 8009e58:	2306      	movs	r3, #6
 8009e5a:	6063      	str	r3, [r4, #4]
 8009e5c:	9b05      	ldr	r3, [sp, #20]
 8009e5e:	6861      	ldr	r1, [r4, #4]
 8009e60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e64:	2300      	movs	r3, #0
 8009e66:	9303      	str	r3, [sp, #12]
 8009e68:	ab0a      	add	r3, sp, #40	; 0x28
 8009e6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e6e:	ab09      	add	r3, sp, #36	; 0x24
 8009e70:	ec49 8b10 	vmov	d0, r8, r9
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	6022      	str	r2, [r4, #0]
 8009e78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	f7ff fecd 	bl	8009c1c <__cvt>
 8009e82:	9b06      	ldr	r3, [sp, #24]
 8009e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e86:	2b47      	cmp	r3, #71	; 0x47
 8009e88:	4680      	mov	r8, r0
 8009e8a:	d108      	bne.n	8009e9e <_printf_float+0x142>
 8009e8c:	1cc8      	adds	r0, r1, #3
 8009e8e:	db02      	blt.n	8009e96 <_printf_float+0x13a>
 8009e90:	6863      	ldr	r3, [r4, #4]
 8009e92:	4299      	cmp	r1, r3
 8009e94:	dd41      	ble.n	8009f1a <_printf_float+0x1be>
 8009e96:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e9a:	fa5f fb8b 	uxtb.w	fp, fp
 8009e9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ea2:	d820      	bhi.n	8009ee6 <_printf_float+0x18a>
 8009ea4:	3901      	subs	r1, #1
 8009ea6:	465a      	mov	r2, fp
 8009ea8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009eac:	9109      	str	r1, [sp, #36]	; 0x24
 8009eae:	f7ff ff17 	bl	8009ce0 <__exponent>
 8009eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eb4:	1813      	adds	r3, r2, r0
 8009eb6:	2a01      	cmp	r2, #1
 8009eb8:	4681      	mov	r9, r0
 8009eba:	6123      	str	r3, [r4, #16]
 8009ebc:	dc02      	bgt.n	8009ec4 <_printf_float+0x168>
 8009ebe:	6822      	ldr	r2, [r4, #0]
 8009ec0:	07d2      	lsls	r2, r2, #31
 8009ec2:	d501      	bpl.n	8009ec8 <_printf_float+0x16c>
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	6123      	str	r3, [r4, #16]
 8009ec8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d09c      	beq.n	8009e0a <_printf_float+0xae>
 8009ed0:	232d      	movs	r3, #45	; 0x2d
 8009ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed6:	e798      	b.n	8009e0a <_printf_float+0xae>
 8009ed8:	9a06      	ldr	r2, [sp, #24]
 8009eda:	2a47      	cmp	r2, #71	; 0x47
 8009edc:	d1be      	bne.n	8009e5c <_printf_float+0x100>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1bc      	bne.n	8009e5c <_printf_float+0x100>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e7b9      	b.n	8009e5a <_printf_float+0xfe>
 8009ee6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009eea:	d118      	bne.n	8009f1e <_printf_float+0x1c2>
 8009eec:	2900      	cmp	r1, #0
 8009eee:	6863      	ldr	r3, [r4, #4]
 8009ef0:	dd0b      	ble.n	8009f0a <_printf_float+0x1ae>
 8009ef2:	6121      	str	r1, [r4, #16]
 8009ef4:	b913      	cbnz	r3, 8009efc <_printf_float+0x1a0>
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	07d0      	lsls	r0, r2, #31
 8009efa:	d502      	bpl.n	8009f02 <_printf_float+0x1a6>
 8009efc:	3301      	adds	r3, #1
 8009efe:	440b      	add	r3, r1
 8009f00:	6123      	str	r3, [r4, #16]
 8009f02:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f04:	f04f 0900 	mov.w	r9, #0
 8009f08:	e7de      	b.n	8009ec8 <_printf_float+0x16c>
 8009f0a:	b913      	cbnz	r3, 8009f12 <_printf_float+0x1b6>
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	07d2      	lsls	r2, r2, #31
 8009f10:	d501      	bpl.n	8009f16 <_printf_float+0x1ba>
 8009f12:	3302      	adds	r3, #2
 8009f14:	e7f4      	b.n	8009f00 <_printf_float+0x1a4>
 8009f16:	2301      	movs	r3, #1
 8009f18:	e7f2      	b.n	8009f00 <_printf_float+0x1a4>
 8009f1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f20:	4299      	cmp	r1, r3
 8009f22:	db05      	blt.n	8009f30 <_printf_float+0x1d4>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	6121      	str	r1, [r4, #16]
 8009f28:	07d8      	lsls	r0, r3, #31
 8009f2a:	d5ea      	bpl.n	8009f02 <_printf_float+0x1a6>
 8009f2c:	1c4b      	adds	r3, r1, #1
 8009f2e:	e7e7      	b.n	8009f00 <_printf_float+0x1a4>
 8009f30:	2900      	cmp	r1, #0
 8009f32:	bfd4      	ite	le
 8009f34:	f1c1 0202 	rsble	r2, r1, #2
 8009f38:	2201      	movgt	r2, #1
 8009f3a:	4413      	add	r3, r2
 8009f3c:	e7e0      	b.n	8009f00 <_printf_float+0x1a4>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	055a      	lsls	r2, r3, #21
 8009f42:	d407      	bmi.n	8009f54 <_printf_float+0x1f8>
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	4642      	mov	r2, r8
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d12c      	bne.n	8009fac <_printf_float+0x250>
 8009f52:	e764      	b.n	8009e1e <_printf_float+0xc2>
 8009f54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f58:	f240 80e0 	bls.w	800a11c <_printf_float+0x3c0>
 8009f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f60:	2200      	movs	r2, #0
 8009f62:	2300      	movs	r3, #0
 8009f64:	f7f6 fd88 	bl	8000a78 <__aeabi_dcmpeq>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d034      	beq.n	8009fd6 <_printf_float+0x27a>
 8009f6c:	4a37      	ldr	r2, [pc, #220]	; (800a04c <_printf_float+0x2f0>)
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4631      	mov	r1, r6
 8009f72:	4628      	mov	r0, r5
 8009f74:	47b8      	blx	r7
 8009f76:	3001      	adds	r0, #1
 8009f78:	f43f af51 	beq.w	8009e1e <_printf_float+0xc2>
 8009f7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f80:	429a      	cmp	r2, r3
 8009f82:	db02      	blt.n	8009f8a <_printf_float+0x22e>
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	07d8      	lsls	r0, r3, #31
 8009f88:	d510      	bpl.n	8009fac <_printf_float+0x250>
 8009f8a:	ee18 3a10 	vmov	r3, s16
 8009f8e:	4652      	mov	r2, sl
 8009f90:	4631      	mov	r1, r6
 8009f92:	4628      	mov	r0, r5
 8009f94:	47b8      	blx	r7
 8009f96:	3001      	adds	r0, #1
 8009f98:	f43f af41 	beq.w	8009e1e <_printf_float+0xc2>
 8009f9c:	f04f 0800 	mov.w	r8, #0
 8009fa0:	f104 091a 	add.w	r9, r4, #26
 8009fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	4543      	cmp	r3, r8
 8009faa:	dc09      	bgt.n	8009fc0 <_printf_float+0x264>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	079b      	lsls	r3, r3, #30
 8009fb0:	f100 8105 	bmi.w	800a1be <_printf_float+0x462>
 8009fb4:	68e0      	ldr	r0, [r4, #12]
 8009fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fb8:	4298      	cmp	r0, r3
 8009fba:	bfb8      	it	lt
 8009fbc:	4618      	movlt	r0, r3
 8009fbe:	e730      	b.n	8009e22 <_printf_float+0xc6>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	464a      	mov	r2, r9
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	47b8      	blx	r7
 8009fca:	3001      	adds	r0, #1
 8009fcc:	f43f af27 	beq.w	8009e1e <_printf_float+0xc2>
 8009fd0:	f108 0801 	add.w	r8, r8, #1
 8009fd4:	e7e6      	b.n	8009fa4 <_printf_float+0x248>
 8009fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	dc39      	bgt.n	800a050 <_printf_float+0x2f4>
 8009fdc:	4a1b      	ldr	r2, [pc, #108]	; (800a04c <_printf_float+0x2f0>)
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	47b8      	blx	r7
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	f43f af19 	beq.w	8009e1e <_printf_float+0xc2>
 8009fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	d102      	bne.n	8009ffa <_printf_float+0x29e>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	07d9      	lsls	r1, r3, #31
 8009ff8:	d5d8      	bpl.n	8009fac <_printf_float+0x250>
 8009ffa:	ee18 3a10 	vmov	r3, s16
 8009ffe:	4652      	mov	r2, sl
 800a000:	4631      	mov	r1, r6
 800a002:	4628      	mov	r0, r5
 800a004:	47b8      	blx	r7
 800a006:	3001      	adds	r0, #1
 800a008:	f43f af09 	beq.w	8009e1e <_printf_float+0xc2>
 800a00c:	f04f 0900 	mov.w	r9, #0
 800a010:	f104 0a1a 	add.w	sl, r4, #26
 800a014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a016:	425b      	negs	r3, r3
 800a018:	454b      	cmp	r3, r9
 800a01a:	dc01      	bgt.n	800a020 <_printf_float+0x2c4>
 800a01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01e:	e792      	b.n	8009f46 <_printf_float+0x1ea>
 800a020:	2301      	movs	r3, #1
 800a022:	4652      	mov	r2, sl
 800a024:	4631      	mov	r1, r6
 800a026:	4628      	mov	r0, r5
 800a028:	47b8      	blx	r7
 800a02a:	3001      	adds	r0, #1
 800a02c:	f43f aef7 	beq.w	8009e1e <_printf_float+0xc2>
 800a030:	f109 0901 	add.w	r9, r9, #1
 800a034:	e7ee      	b.n	800a014 <_printf_float+0x2b8>
 800a036:	bf00      	nop
 800a038:	7fefffff 	.word	0x7fefffff
 800a03c:	0800e44c 	.word	0x0800e44c
 800a040:	0800e450 	.word	0x0800e450
 800a044:	0800e458 	.word	0x0800e458
 800a048:	0800e454 	.word	0x0800e454
 800a04c:	0800e45c 	.word	0x0800e45c
 800a050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a052:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a054:	429a      	cmp	r2, r3
 800a056:	bfa8      	it	ge
 800a058:	461a      	movge	r2, r3
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	4691      	mov	r9, r2
 800a05e:	dc37      	bgt.n	800a0d0 <_printf_float+0x374>
 800a060:	f04f 0b00 	mov.w	fp, #0
 800a064:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a068:	f104 021a 	add.w	r2, r4, #26
 800a06c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a06e:	9305      	str	r3, [sp, #20]
 800a070:	eba3 0309 	sub.w	r3, r3, r9
 800a074:	455b      	cmp	r3, fp
 800a076:	dc33      	bgt.n	800a0e0 <_printf_float+0x384>
 800a078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a07c:	429a      	cmp	r2, r3
 800a07e:	db3b      	blt.n	800a0f8 <_printf_float+0x39c>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	07da      	lsls	r2, r3, #31
 800a084:	d438      	bmi.n	800a0f8 <_printf_float+0x39c>
 800a086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a088:	9a05      	ldr	r2, [sp, #20]
 800a08a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a08c:	1a9a      	subs	r2, r3, r2
 800a08e:	eba3 0901 	sub.w	r9, r3, r1
 800a092:	4591      	cmp	r9, r2
 800a094:	bfa8      	it	ge
 800a096:	4691      	movge	r9, r2
 800a098:	f1b9 0f00 	cmp.w	r9, #0
 800a09c:	dc35      	bgt.n	800a10a <_printf_float+0x3ae>
 800a09e:	f04f 0800 	mov.w	r8, #0
 800a0a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0a6:	f104 0a1a 	add.w	sl, r4, #26
 800a0aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0ae:	1a9b      	subs	r3, r3, r2
 800a0b0:	eba3 0309 	sub.w	r3, r3, r9
 800a0b4:	4543      	cmp	r3, r8
 800a0b6:	f77f af79 	ble.w	8009fac <_printf_float+0x250>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4652      	mov	r2, sl
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	f43f aeaa 	beq.w	8009e1e <_printf_float+0xc2>
 800a0ca:	f108 0801 	add.w	r8, r8, #1
 800a0ce:	e7ec      	b.n	800a0aa <_printf_float+0x34e>
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	47b8      	blx	r7
 800a0da:	3001      	adds	r0, #1
 800a0dc:	d1c0      	bne.n	800a060 <_printf_float+0x304>
 800a0de:	e69e      	b.n	8009e1e <_printf_float+0xc2>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	9205      	str	r2, [sp, #20]
 800a0e8:	47b8      	blx	r7
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	f43f ae97 	beq.w	8009e1e <_printf_float+0xc2>
 800a0f0:	9a05      	ldr	r2, [sp, #20]
 800a0f2:	f10b 0b01 	add.w	fp, fp, #1
 800a0f6:	e7b9      	b.n	800a06c <_printf_float+0x310>
 800a0f8:	ee18 3a10 	vmov	r3, s16
 800a0fc:	4652      	mov	r2, sl
 800a0fe:	4631      	mov	r1, r6
 800a100:	4628      	mov	r0, r5
 800a102:	47b8      	blx	r7
 800a104:	3001      	adds	r0, #1
 800a106:	d1be      	bne.n	800a086 <_printf_float+0x32a>
 800a108:	e689      	b.n	8009e1e <_printf_float+0xc2>
 800a10a:	9a05      	ldr	r2, [sp, #20]
 800a10c:	464b      	mov	r3, r9
 800a10e:	4442      	add	r2, r8
 800a110:	4631      	mov	r1, r6
 800a112:	4628      	mov	r0, r5
 800a114:	47b8      	blx	r7
 800a116:	3001      	adds	r0, #1
 800a118:	d1c1      	bne.n	800a09e <_printf_float+0x342>
 800a11a:	e680      	b.n	8009e1e <_printf_float+0xc2>
 800a11c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a11e:	2a01      	cmp	r2, #1
 800a120:	dc01      	bgt.n	800a126 <_printf_float+0x3ca>
 800a122:	07db      	lsls	r3, r3, #31
 800a124:	d538      	bpl.n	800a198 <_printf_float+0x43c>
 800a126:	2301      	movs	r3, #1
 800a128:	4642      	mov	r2, r8
 800a12a:	4631      	mov	r1, r6
 800a12c:	4628      	mov	r0, r5
 800a12e:	47b8      	blx	r7
 800a130:	3001      	adds	r0, #1
 800a132:	f43f ae74 	beq.w	8009e1e <_printf_float+0xc2>
 800a136:	ee18 3a10 	vmov	r3, s16
 800a13a:	4652      	mov	r2, sl
 800a13c:	4631      	mov	r1, r6
 800a13e:	4628      	mov	r0, r5
 800a140:	47b8      	blx	r7
 800a142:	3001      	adds	r0, #1
 800a144:	f43f ae6b 	beq.w	8009e1e <_printf_float+0xc2>
 800a148:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a14c:	2200      	movs	r2, #0
 800a14e:	2300      	movs	r3, #0
 800a150:	f7f6 fc92 	bl	8000a78 <__aeabi_dcmpeq>
 800a154:	b9d8      	cbnz	r0, 800a18e <_printf_float+0x432>
 800a156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a158:	f108 0201 	add.w	r2, r8, #1
 800a15c:	3b01      	subs	r3, #1
 800a15e:	4631      	mov	r1, r6
 800a160:	4628      	mov	r0, r5
 800a162:	47b8      	blx	r7
 800a164:	3001      	adds	r0, #1
 800a166:	d10e      	bne.n	800a186 <_printf_float+0x42a>
 800a168:	e659      	b.n	8009e1e <_printf_float+0xc2>
 800a16a:	2301      	movs	r3, #1
 800a16c:	4652      	mov	r2, sl
 800a16e:	4631      	mov	r1, r6
 800a170:	4628      	mov	r0, r5
 800a172:	47b8      	blx	r7
 800a174:	3001      	adds	r0, #1
 800a176:	f43f ae52 	beq.w	8009e1e <_printf_float+0xc2>
 800a17a:	f108 0801 	add.w	r8, r8, #1
 800a17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a180:	3b01      	subs	r3, #1
 800a182:	4543      	cmp	r3, r8
 800a184:	dcf1      	bgt.n	800a16a <_printf_float+0x40e>
 800a186:	464b      	mov	r3, r9
 800a188:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a18c:	e6dc      	b.n	8009f48 <_printf_float+0x1ec>
 800a18e:	f04f 0800 	mov.w	r8, #0
 800a192:	f104 0a1a 	add.w	sl, r4, #26
 800a196:	e7f2      	b.n	800a17e <_printf_float+0x422>
 800a198:	2301      	movs	r3, #1
 800a19a:	4642      	mov	r2, r8
 800a19c:	e7df      	b.n	800a15e <_printf_float+0x402>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	464a      	mov	r2, r9
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	47b8      	blx	r7
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	f43f ae38 	beq.w	8009e1e <_printf_float+0xc2>
 800a1ae:	f108 0801 	add.w	r8, r8, #1
 800a1b2:	68e3      	ldr	r3, [r4, #12]
 800a1b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1b6:	1a5b      	subs	r3, r3, r1
 800a1b8:	4543      	cmp	r3, r8
 800a1ba:	dcf0      	bgt.n	800a19e <_printf_float+0x442>
 800a1bc:	e6fa      	b.n	8009fb4 <_printf_float+0x258>
 800a1be:	f04f 0800 	mov.w	r8, #0
 800a1c2:	f104 0919 	add.w	r9, r4, #25
 800a1c6:	e7f4      	b.n	800a1b2 <_printf_float+0x456>

0800a1c8 <_printf_common>:
 800a1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	4616      	mov	r6, r2
 800a1ce:	4699      	mov	r9, r3
 800a1d0:	688a      	ldr	r2, [r1, #8]
 800a1d2:	690b      	ldr	r3, [r1, #16]
 800a1d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	bfb8      	it	lt
 800a1dc:	4613      	movlt	r3, r2
 800a1de:	6033      	str	r3, [r6, #0]
 800a1e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1e4:	4607      	mov	r7, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	b10a      	cbz	r2, 800a1ee <_printf_common+0x26>
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	6033      	str	r3, [r6, #0]
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	0699      	lsls	r1, r3, #26
 800a1f2:	bf42      	ittt	mi
 800a1f4:	6833      	ldrmi	r3, [r6, #0]
 800a1f6:	3302      	addmi	r3, #2
 800a1f8:	6033      	strmi	r3, [r6, #0]
 800a1fa:	6825      	ldr	r5, [r4, #0]
 800a1fc:	f015 0506 	ands.w	r5, r5, #6
 800a200:	d106      	bne.n	800a210 <_printf_common+0x48>
 800a202:	f104 0a19 	add.w	sl, r4, #25
 800a206:	68e3      	ldr	r3, [r4, #12]
 800a208:	6832      	ldr	r2, [r6, #0]
 800a20a:	1a9b      	subs	r3, r3, r2
 800a20c:	42ab      	cmp	r3, r5
 800a20e:	dc26      	bgt.n	800a25e <_printf_common+0x96>
 800a210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a214:	1e13      	subs	r3, r2, #0
 800a216:	6822      	ldr	r2, [r4, #0]
 800a218:	bf18      	it	ne
 800a21a:	2301      	movne	r3, #1
 800a21c:	0692      	lsls	r2, r2, #26
 800a21e:	d42b      	bmi.n	800a278 <_printf_common+0xb0>
 800a220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a224:	4649      	mov	r1, r9
 800a226:	4638      	mov	r0, r7
 800a228:	47c0      	blx	r8
 800a22a:	3001      	adds	r0, #1
 800a22c:	d01e      	beq.n	800a26c <_printf_common+0xa4>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	68e5      	ldr	r5, [r4, #12]
 800a232:	6832      	ldr	r2, [r6, #0]
 800a234:	f003 0306 	and.w	r3, r3, #6
 800a238:	2b04      	cmp	r3, #4
 800a23a:	bf08      	it	eq
 800a23c:	1aad      	subeq	r5, r5, r2
 800a23e:	68a3      	ldr	r3, [r4, #8]
 800a240:	6922      	ldr	r2, [r4, #16]
 800a242:	bf0c      	ite	eq
 800a244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a248:	2500      	movne	r5, #0
 800a24a:	4293      	cmp	r3, r2
 800a24c:	bfc4      	itt	gt
 800a24e:	1a9b      	subgt	r3, r3, r2
 800a250:	18ed      	addgt	r5, r5, r3
 800a252:	2600      	movs	r6, #0
 800a254:	341a      	adds	r4, #26
 800a256:	42b5      	cmp	r5, r6
 800a258:	d11a      	bne.n	800a290 <_printf_common+0xc8>
 800a25a:	2000      	movs	r0, #0
 800a25c:	e008      	b.n	800a270 <_printf_common+0xa8>
 800a25e:	2301      	movs	r3, #1
 800a260:	4652      	mov	r2, sl
 800a262:	4649      	mov	r1, r9
 800a264:	4638      	mov	r0, r7
 800a266:	47c0      	blx	r8
 800a268:	3001      	adds	r0, #1
 800a26a:	d103      	bne.n	800a274 <_printf_common+0xac>
 800a26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a274:	3501      	adds	r5, #1
 800a276:	e7c6      	b.n	800a206 <_printf_common+0x3e>
 800a278:	18e1      	adds	r1, r4, r3
 800a27a:	1c5a      	adds	r2, r3, #1
 800a27c:	2030      	movs	r0, #48	; 0x30
 800a27e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a282:	4422      	add	r2, r4
 800a284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a28c:	3302      	adds	r3, #2
 800a28e:	e7c7      	b.n	800a220 <_printf_common+0x58>
 800a290:	2301      	movs	r3, #1
 800a292:	4622      	mov	r2, r4
 800a294:	4649      	mov	r1, r9
 800a296:	4638      	mov	r0, r7
 800a298:	47c0      	blx	r8
 800a29a:	3001      	adds	r0, #1
 800a29c:	d0e6      	beq.n	800a26c <_printf_common+0xa4>
 800a29e:	3601      	adds	r6, #1
 800a2a0:	e7d9      	b.n	800a256 <_printf_common+0x8e>
	...

0800a2a4 <_printf_i>:
 800a2a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a8:	7e0f      	ldrb	r7, [r1, #24]
 800a2aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2ac:	2f78      	cmp	r7, #120	; 0x78
 800a2ae:	4691      	mov	r9, r2
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	469a      	mov	sl, r3
 800a2b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2ba:	d807      	bhi.n	800a2cc <_printf_i+0x28>
 800a2bc:	2f62      	cmp	r7, #98	; 0x62
 800a2be:	d80a      	bhi.n	800a2d6 <_printf_i+0x32>
 800a2c0:	2f00      	cmp	r7, #0
 800a2c2:	f000 80d8 	beq.w	800a476 <_printf_i+0x1d2>
 800a2c6:	2f58      	cmp	r7, #88	; 0x58
 800a2c8:	f000 80a3 	beq.w	800a412 <_printf_i+0x16e>
 800a2cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2d4:	e03a      	b.n	800a34c <_printf_i+0xa8>
 800a2d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2da:	2b15      	cmp	r3, #21
 800a2dc:	d8f6      	bhi.n	800a2cc <_printf_i+0x28>
 800a2de:	a101      	add	r1, pc, #4	; (adr r1, 800a2e4 <_printf_i+0x40>)
 800a2e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2e4:	0800a33d 	.word	0x0800a33d
 800a2e8:	0800a351 	.word	0x0800a351
 800a2ec:	0800a2cd 	.word	0x0800a2cd
 800a2f0:	0800a2cd 	.word	0x0800a2cd
 800a2f4:	0800a2cd 	.word	0x0800a2cd
 800a2f8:	0800a2cd 	.word	0x0800a2cd
 800a2fc:	0800a351 	.word	0x0800a351
 800a300:	0800a2cd 	.word	0x0800a2cd
 800a304:	0800a2cd 	.word	0x0800a2cd
 800a308:	0800a2cd 	.word	0x0800a2cd
 800a30c:	0800a2cd 	.word	0x0800a2cd
 800a310:	0800a45d 	.word	0x0800a45d
 800a314:	0800a381 	.word	0x0800a381
 800a318:	0800a43f 	.word	0x0800a43f
 800a31c:	0800a2cd 	.word	0x0800a2cd
 800a320:	0800a2cd 	.word	0x0800a2cd
 800a324:	0800a47f 	.word	0x0800a47f
 800a328:	0800a2cd 	.word	0x0800a2cd
 800a32c:	0800a381 	.word	0x0800a381
 800a330:	0800a2cd 	.word	0x0800a2cd
 800a334:	0800a2cd 	.word	0x0800a2cd
 800a338:	0800a447 	.word	0x0800a447
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	1d1a      	adds	r2, r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	602a      	str	r2, [r5, #0]
 800a344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a34c:	2301      	movs	r3, #1
 800a34e:	e0a3      	b.n	800a498 <_printf_i+0x1f4>
 800a350:	6820      	ldr	r0, [r4, #0]
 800a352:	6829      	ldr	r1, [r5, #0]
 800a354:	0606      	lsls	r6, r0, #24
 800a356:	f101 0304 	add.w	r3, r1, #4
 800a35a:	d50a      	bpl.n	800a372 <_printf_i+0xce>
 800a35c:	680e      	ldr	r6, [r1, #0]
 800a35e:	602b      	str	r3, [r5, #0]
 800a360:	2e00      	cmp	r6, #0
 800a362:	da03      	bge.n	800a36c <_printf_i+0xc8>
 800a364:	232d      	movs	r3, #45	; 0x2d
 800a366:	4276      	negs	r6, r6
 800a368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a36c:	485e      	ldr	r0, [pc, #376]	; (800a4e8 <_printf_i+0x244>)
 800a36e:	230a      	movs	r3, #10
 800a370:	e019      	b.n	800a3a6 <_printf_i+0x102>
 800a372:	680e      	ldr	r6, [r1, #0]
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a37a:	bf18      	it	ne
 800a37c:	b236      	sxthne	r6, r6
 800a37e:	e7ef      	b.n	800a360 <_printf_i+0xbc>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	6820      	ldr	r0, [r4, #0]
 800a384:	1d19      	adds	r1, r3, #4
 800a386:	6029      	str	r1, [r5, #0]
 800a388:	0601      	lsls	r1, r0, #24
 800a38a:	d501      	bpl.n	800a390 <_printf_i+0xec>
 800a38c:	681e      	ldr	r6, [r3, #0]
 800a38e:	e002      	b.n	800a396 <_printf_i+0xf2>
 800a390:	0646      	lsls	r6, r0, #25
 800a392:	d5fb      	bpl.n	800a38c <_printf_i+0xe8>
 800a394:	881e      	ldrh	r6, [r3, #0]
 800a396:	4854      	ldr	r0, [pc, #336]	; (800a4e8 <_printf_i+0x244>)
 800a398:	2f6f      	cmp	r7, #111	; 0x6f
 800a39a:	bf0c      	ite	eq
 800a39c:	2308      	moveq	r3, #8
 800a39e:	230a      	movne	r3, #10
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3a6:	6865      	ldr	r5, [r4, #4]
 800a3a8:	60a5      	str	r5, [r4, #8]
 800a3aa:	2d00      	cmp	r5, #0
 800a3ac:	bfa2      	ittt	ge
 800a3ae:	6821      	ldrge	r1, [r4, #0]
 800a3b0:	f021 0104 	bicge.w	r1, r1, #4
 800a3b4:	6021      	strge	r1, [r4, #0]
 800a3b6:	b90e      	cbnz	r6, 800a3bc <_printf_i+0x118>
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	d04d      	beq.n	800a458 <_printf_i+0x1b4>
 800a3bc:	4615      	mov	r5, r2
 800a3be:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3c2:	fb03 6711 	mls	r7, r3, r1, r6
 800a3c6:	5dc7      	ldrb	r7, [r0, r7]
 800a3c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3cc:	4637      	mov	r7, r6
 800a3ce:	42bb      	cmp	r3, r7
 800a3d0:	460e      	mov	r6, r1
 800a3d2:	d9f4      	bls.n	800a3be <_printf_i+0x11a>
 800a3d4:	2b08      	cmp	r3, #8
 800a3d6:	d10b      	bne.n	800a3f0 <_printf_i+0x14c>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	07de      	lsls	r6, r3, #31
 800a3dc:	d508      	bpl.n	800a3f0 <_printf_i+0x14c>
 800a3de:	6923      	ldr	r3, [r4, #16]
 800a3e0:	6861      	ldr	r1, [r4, #4]
 800a3e2:	4299      	cmp	r1, r3
 800a3e4:	bfde      	ittt	le
 800a3e6:	2330      	movle	r3, #48	; 0x30
 800a3e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a3f0:	1b52      	subs	r2, r2, r5
 800a3f2:	6122      	str	r2, [r4, #16]
 800a3f4:	f8cd a000 	str.w	sl, [sp]
 800a3f8:	464b      	mov	r3, r9
 800a3fa:	aa03      	add	r2, sp, #12
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	4640      	mov	r0, r8
 800a400:	f7ff fee2 	bl	800a1c8 <_printf_common>
 800a404:	3001      	adds	r0, #1
 800a406:	d14c      	bne.n	800a4a2 <_printf_i+0x1fe>
 800a408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a40c:	b004      	add	sp, #16
 800a40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a412:	4835      	ldr	r0, [pc, #212]	; (800a4e8 <_printf_i+0x244>)
 800a414:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a418:	6829      	ldr	r1, [r5, #0]
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a420:	6029      	str	r1, [r5, #0]
 800a422:	061d      	lsls	r5, r3, #24
 800a424:	d514      	bpl.n	800a450 <_printf_i+0x1ac>
 800a426:	07df      	lsls	r7, r3, #31
 800a428:	bf44      	itt	mi
 800a42a:	f043 0320 	orrmi.w	r3, r3, #32
 800a42e:	6023      	strmi	r3, [r4, #0]
 800a430:	b91e      	cbnz	r6, 800a43a <_printf_i+0x196>
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	f023 0320 	bic.w	r3, r3, #32
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	2310      	movs	r3, #16
 800a43c:	e7b0      	b.n	800a3a0 <_printf_i+0xfc>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	f043 0320 	orr.w	r3, r3, #32
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	2378      	movs	r3, #120	; 0x78
 800a448:	4828      	ldr	r0, [pc, #160]	; (800a4ec <_printf_i+0x248>)
 800a44a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a44e:	e7e3      	b.n	800a418 <_printf_i+0x174>
 800a450:	0659      	lsls	r1, r3, #25
 800a452:	bf48      	it	mi
 800a454:	b2b6      	uxthmi	r6, r6
 800a456:	e7e6      	b.n	800a426 <_printf_i+0x182>
 800a458:	4615      	mov	r5, r2
 800a45a:	e7bb      	b.n	800a3d4 <_printf_i+0x130>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	6826      	ldr	r6, [r4, #0]
 800a460:	6961      	ldr	r1, [r4, #20]
 800a462:	1d18      	adds	r0, r3, #4
 800a464:	6028      	str	r0, [r5, #0]
 800a466:	0635      	lsls	r5, r6, #24
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	d501      	bpl.n	800a470 <_printf_i+0x1cc>
 800a46c:	6019      	str	r1, [r3, #0]
 800a46e:	e002      	b.n	800a476 <_printf_i+0x1d2>
 800a470:	0670      	lsls	r0, r6, #25
 800a472:	d5fb      	bpl.n	800a46c <_printf_i+0x1c8>
 800a474:	8019      	strh	r1, [r3, #0]
 800a476:	2300      	movs	r3, #0
 800a478:	6123      	str	r3, [r4, #16]
 800a47a:	4615      	mov	r5, r2
 800a47c:	e7ba      	b.n	800a3f4 <_printf_i+0x150>
 800a47e:	682b      	ldr	r3, [r5, #0]
 800a480:	1d1a      	adds	r2, r3, #4
 800a482:	602a      	str	r2, [r5, #0]
 800a484:	681d      	ldr	r5, [r3, #0]
 800a486:	6862      	ldr	r2, [r4, #4]
 800a488:	2100      	movs	r1, #0
 800a48a:	4628      	mov	r0, r5
 800a48c:	f7f5 fe80 	bl	8000190 <memchr>
 800a490:	b108      	cbz	r0, 800a496 <_printf_i+0x1f2>
 800a492:	1b40      	subs	r0, r0, r5
 800a494:	6060      	str	r0, [r4, #4]
 800a496:	6863      	ldr	r3, [r4, #4]
 800a498:	6123      	str	r3, [r4, #16]
 800a49a:	2300      	movs	r3, #0
 800a49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a0:	e7a8      	b.n	800a3f4 <_printf_i+0x150>
 800a4a2:	6923      	ldr	r3, [r4, #16]
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	47d0      	blx	sl
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d0ab      	beq.n	800a408 <_printf_i+0x164>
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	079b      	lsls	r3, r3, #30
 800a4b4:	d413      	bmi.n	800a4de <_printf_i+0x23a>
 800a4b6:	68e0      	ldr	r0, [r4, #12]
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	4298      	cmp	r0, r3
 800a4bc:	bfb8      	it	lt
 800a4be:	4618      	movlt	r0, r3
 800a4c0:	e7a4      	b.n	800a40c <_printf_i+0x168>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	47d0      	blx	sl
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	d09b      	beq.n	800a408 <_printf_i+0x164>
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	68e3      	ldr	r3, [r4, #12]
 800a4d4:	9903      	ldr	r1, [sp, #12]
 800a4d6:	1a5b      	subs	r3, r3, r1
 800a4d8:	42ab      	cmp	r3, r5
 800a4da:	dcf2      	bgt.n	800a4c2 <_printf_i+0x21e>
 800a4dc:	e7eb      	b.n	800a4b6 <_printf_i+0x212>
 800a4de:	2500      	movs	r5, #0
 800a4e0:	f104 0619 	add.w	r6, r4, #25
 800a4e4:	e7f5      	b.n	800a4d2 <_printf_i+0x22e>
 800a4e6:	bf00      	nop
 800a4e8:	0800e45e 	.word	0x0800e45e
 800a4ec:	0800e46f 	.word	0x0800e46f

0800a4f0 <siprintf>:
 800a4f0:	b40e      	push	{r1, r2, r3}
 800a4f2:	b500      	push	{lr}
 800a4f4:	b09c      	sub	sp, #112	; 0x70
 800a4f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a4f8:	9002      	str	r0, [sp, #8]
 800a4fa:	9006      	str	r0, [sp, #24]
 800a4fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a500:	4809      	ldr	r0, [pc, #36]	; (800a528 <siprintf+0x38>)
 800a502:	9107      	str	r1, [sp, #28]
 800a504:	9104      	str	r1, [sp, #16]
 800a506:	4909      	ldr	r1, [pc, #36]	; (800a52c <siprintf+0x3c>)
 800a508:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50c:	9105      	str	r1, [sp, #20]
 800a50e:	6800      	ldr	r0, [r0, #0]
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	a902      	add	r1, sp, #8
 800a514:	f001 fb68 	bl	800bbe8 <_svfiprintf_r>
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	2200      	movs	r2, #0
 800a51c:	701a      	strb	r2, [r3, #0]
 800a51e:	b01c      	add	sp, #112	; 0x70
 800a520:	f85d eb04 	ldr.w	lr, [sp], #4
 800a524:	b003      	add	sp, #12
 800a526:	4770      	bx	lr
 800a528:	20000010 	.word	0x20000010
 800a52c:	ffff0208 	.word	0xffff0208

0800a530 <quorem>:
 800a530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	6903      	ldr	r3, [r0, #16]
 800a536:	690c      	ldr	r4, [r1, #16]
 800a538:	42a3      	cmp	r3, r4
 800a53a:	4607      	mov	r7, r0
 800a53c:	f2c0 8081 	blt.w	800a642 <quorem+0x112>
 800a540:	3c01      	subs	r4, #1
 800a542:	f101 0814 	add.w	r8, r1, #20
 800a546:	f100 0514 	add.w	r5, r0, #20
 800a54a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a54e:	9301      	str	r3, [sp, #4]
 800a550:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a558:	3301      	adds	r3, #1
 800a55a:	429a      	cmp	r2, r3
 800a55c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a560:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a564:	fbb2 f6f3 	udiv	r6, r2, r3
 800a568:	d331      	bcc.n	800a5ce <quorem+0x9e>
 800a56a:	f04f 0e00 	mov.w	lr, #0
 800a56e:	4640      	mov	r0, r8
 800a570:	46ac      	mov	ip, r5
 800a572:	46f2      	mov	sl, lr
 800a574:	f850 2b04 	ldr.w	r2, [r0], #4
 800a578:	b293      	uxth	r3, r2
 800a57a:	fb06 e303 	mla	r3, r6, r3, lr
 800a57e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a582:	b29b      	uxth	r3, r3
 800a584:	ebaa 0303 	sub.w	r3, sl, r3
 800a588:	f8dc a000 	ldr.w	sl, [ip]
 800a58c:	0c12      	lsrs	r2, r2, #16
 800a58e:	fa13 f38a 	uxtah	r3, r3, sl
 800a592:	fb06 e202 	mla	r2, r6, r2, lr
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	9b00      	ldr	r3, [sp, #0]
 800a59a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a59e:	b292      	uxth	r2, r2
 800a5a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5a8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a5ac:	4581      	cmp	r9, r0
 800a5ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5b2:	f84c 3b04 	str.w	r3, [ip], #4
 800a5b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5ba:	d2db      	bcs.n	800a574 <quorem+0x44>
 800a5bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5c0:	b92b      	cbnz	r3, 800a5ce <quorem+0x9e>
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	3b04      	subs	r3, #4
 800a5c6:	429d      	cmp	r5, r3
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	d32e      	bcc.n	800a62a <quorem+0xfa>
 800a5cc:	613c      	str	r4, [r7, #16]
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	f001 f8b6 	bl	800b740 <__mcmp>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	db24      	blt.n	800a622 <quorem+0xf2>
 800a5d8:	3601      	adds	r6, #1
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f04f 0c00 	mov.w	ip, #0
 800a5e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5e4:	f8d0 e000 	ldr.w	lr, [r0]
 800a5e8:	b293      	uxth	r3, r2
 800a5ea:	ebac 0303 	sub.w	r3, ip, r3
 800a5ee:	0c12      	lsrs	r2, r2, #16
 800a5f0:	fa13 f38e 	uxtah	r3, r3, lr
 800a5f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a602:	45c1      	cmp	r9, r8
 800a604:	f840 3b04 	str.w	r3, [r0], #4
 800a608:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a60c:	d2e8      	bcs.n	800a5e0 <quorem+0xb0>
 800a60e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a616:	b922      	cbnz	r2, 800a622 <quorem+0xf2>
 800a618:	3b04      	subs	r3, #4
 800a61a:	429d      	cmp	r5, r3
 800a61c:	461a      	mov	r2, r3
 800a61e:	d30a      	bcc.n	800a636 <quorem+0x106>
 800a620:	613c      	str	r4, [r7, #16]
 800a622:	4630      	mov	r0, r6
 800a624:	b003      	add	sp, #12
 800a626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62a:	6812      	ldr	r2, [r2, #0]
 800a62c:	3b04      	subs	r3, #4
 800a62e:	2a00      	cmp	r2, #0
 800a630:	d1cc      	bne.n	800a5cc <quorem+0x9c>
 800a632:	3c01      	subs	r4, #1
 800a634:	e7c7      	b.n	800a5c6 <quorem+0x96>
 800a636:	6812      	ldr	r2, [r2, #0]
 800a638:	3b04      	subs	r3, #4
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	d1f0      	bne.n	800a620 <quorem+0xf0>
 800a63e:	3c01      	subs	r4, #1
 800a640:	e7eb      	b.n	800a61a <quorem+0xea>
 800a642:	2000      	movs	r0, #0
 800a644:	e7ee      	b.n	800a624 <quorem+0xf4>
	...

0800a648 <_dtoa_r>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	ed2d 8b04 	vpush	{d8-d9}
 800a650:	ec57 6b10 	vmov	r6, r7, d0
 800a654:	b093      	sub	sp, #76	; 0x4c
 800a656:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a658:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a65c:	9106      	str	r1, [sp, #24]
 800a65e:	ee10 aa10 	vmov	sl, s0
 800a662:	4604      	mov	r4, r0
 800a664:	9209      	str	r2, [sp, #36]	; 0x24
 800a666:	930c      	str	r3, [sp, #48]	; 0x30
 800a668:	46bb      	mov	fp, r7
 800a66a:	b975      	cbnz	r5, 800a68a <_dtoa_r+0x42>
 800a66c:	2010      	movs	r0, #16
 800a66e:	f000 fddd 	bl	800b22c <malloc>
 800a672:	4602      	mov	r2, r0
 800a674:	6260      	str	r0, [r4, #36]	; 0x24
 800a676:	b920      	cbnz	r0, 800a682 <_dtoa_r+0x3a>
 800a678:	4ba7      	ldr	r3, [pc, #668]	; (800a918 <_dtoa_r+0x2d0>)
 800a67a:	21ea      	movs	r1, #234	; 0xea
 800a67c:	48a7      	ldr	r0, [pc, #668]	; (800a91c <_dtoa_r+0x2d4>)
 800a67e:	f001 fbc3 	bl	800be08 <__assert_func>
 800a682:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a686:	6005      	str	r5, [r0, #0]
 800a688:	60c5      	str	r5, [r0, #12]
 800a68a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a68c:	6819      	ldr	r1, [r3, #0]
 800a68e:	b151      	cbz	r1, 800a6a6 <_dtoa_r+0x5e>
 800a690:	685a      	ldr	r2, [r3, #4]
 800a692:	604a      	str	r2, [r1, #4]
 800a694:	2301      	movs	r3, #1
 800a696:	4093      	lsls	r3, r2
 800a698:	608b      	str	r3, [r1, #8]
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fe0e 	bl	800b2bc <_Bfree>
 800a6a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
 800a6a6:	1e3b      	subs	r3, r7, #0
 800a6a8:	bfaa      	itet	ge
 800a6aa:	2300      	movge	r3, #0
 800a6ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a6b0:	f8c8 3000 	strge.w	r3, [r8]
 800a6b4:	4b9a      	ldr	r3, [pc, #616]	; (800a920 <_dtoa_r+0x2d8>)
 800a6b6:	bfbc      	itt	lt
 800a6b8:	2201      	movlt	r2, #1
 800a6ba:	f8c8 2000 	strlt.w	r2, [r8]
 800a6be:	ea33 030b 	bics.w	r3, r3, fp
 800a6c2:	d11b      	bne.n	800a6fc <_dtoa_r+0xb4>
 800a6c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6d0:	4333      	orrs	r3, r6
 800a6d2:	f000 8592 	beq.w	800b1fa <_dtoa_r+0xbb2>
 800a6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6d8:	b963      	cbnz	r3, 800a6f4 <_dtoa_r+0xac>
 800a6da:	4b92      	ldr	r3, [pc, #584]	; (800a924 <_dtoa_r+0x2dc>)
 800a6dc:	e022      	b.n	800a724 <_dtoa_r+0xdc>
 800a6de:	4b92      	ldr	r3, [pc, #584]	; (800a928 <_dtoa_r+0x2e0>)
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6e6:	6013      	str	r3, [r2, #0]
 800a6e8:	9801      	ldr	r0, [sp, #4]
 800a6ea:	b013      	add	sp, #76	; 0x4c
 800a6ec:	ecbd 8b04 	vpop	{d8-d9}
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	4b8b      	ldr	r3, [pc, #556]	; (800a924 <_dtoa_r+0x2dc>)
 800a6f6:	9301      	str	r3, [sp, #4]
 800a6f8:	3303      	adds	r3, #3
 800a6fa:	e7f3      	b.n	800a6e4 <_dtoa_r+0x9c>
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2300      	movs	r3, #0
 800a700:	4650      	mov	r0, sl
 800a702:	4659      	mov	r1, fp
 800a704:	f7f6 f9b8 	bl	8000a78 <__aeabi_dcmpeq>
 800a708:	ec4b ab19 	vmov	d9, sl, fp
 800a70c:	4680      	mov	r8, r0
 800a70e:	b158      	cbz	r0, 800a728 <_dtoa_r+0xe0>
 800a710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a712:	2301      	movs	r3, #1
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 856b 	beq.w	800b1f4 <_dtoa_r+0xbac>
 800a71e:	4883      	ldr	r0, [pc, #524]	; (800a92c <_dtoa_r+0x2e4>)
 800a720:	6018      	str	r0, [r3, #0]
 800a722:	1e43      	subs	r3, r0, #1
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	e7df      	b.n	800a6e8 <_dtoa_r+0xa0>
 800a728:	ec4b ab10 	vmov	d0, sl, fp
 800a72c:	aa10      	add	r2, sp, #64	; 0x40
 800a72e:	a911      	add	r1, sp, #68	; 0x44
 800a730:	4620      	mov	r0, r4
 800a732:	f001 f8ab 	bl	800b88c <__d2b>
 800a736:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a73a:	ee08 0a10 	vmov	s16, r0
 800a73e:	2d00      	cmp	r5, #0
 800a740:	f000 8084 	beq.w	800a84c <_dtoa_r+0x204>
 800a744:	ee19 3a90 	vmov	r3, s19
 800a748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a74c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a750:	4656      	mov	r6, sl
 800a752:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a756:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a75a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a75e:	4b74      	ldr	r3, [pc, #464]	; (800a930 <_dtoa_r+0x2e8>)
 800a760:	2200      	movs	r2, #0
 800a762:	4630      	mov	r0, r6
 800a764:	4639      	mov	r1, r7
 800a766:	f7f5 fd67 	bl	8000238 <__aeabi_dsub>
 800a76a:	a365      	add	r3, pc, #404	; (adr r3, 800a900 <_dtoa_r+0x2b8>)
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	f7f5 ff1a 	bl	80005a8 <__aeabi_dmul>
 800a774:	a364      	add	r3, pc, #400	; (adr r3, 800a908 <_dtoa_r+0x2c0>)
 800a776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77a:	f7f5 fd5f 	bl	800023c <__adddf3>
 800a77e:	4606      	mov	r6, r0
 800a780:	4628      	mov	r0, r5
 800a782:	460f      	mov	r7, r1
 800a784:	f7f5 fea6 	bl	80004d4 <__aeabi_i2d>
 800a788:	a361      	add	r3, pc, #388	; (adr r3, 800a910 <_dtoa_r+0x2c8>)
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f7f5 ff0b 	bl	80005a8 <__aeabi_dmul>
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	4630      	mov	r0, r6
 800a798:	4639      	mov	r1, r7
 800a79a:	f7f5 fd4f 	bl	800023c <__adddf3>
 800a79e:	4606      	mov	r6, r0
 800a7a0:	460f      	mov	r7, r1
 800a7a2:	f7f6 f9b1 	bl	8000b08 <__aeabi_d2iz>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	9000      	str	r0, [sp, #0]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	f7f6 f96c 	bl	8000a8c <__aeabi_dcmplt>
 800a7b4:	b150      	cbz	r0, 800a7cc <_dtoa_r+0x184>
 800a7b6:	9800      	ldr	r0, [sp, #0]
 800a7b8:	f7f5 fe8c 	bl	80004d4 <__aeabi_i2d>
 800a7bc:	4632      	mov	r2, r6
 800a7be:	463b      	mov	r3, r7
 800a7c0:	f7f6 f95a 	bl	8000a78 <__aeabi_dcmpeq>
 800a7c4:	b910      	cbnz	r0, 800a7cc <_dtoa_r+0x184>
 800a7c6:	9b00      	ldr	r3, [sp, #0]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	9b00      	ldr	r3, [sp, #0]
 800a7ce:	2b16      	cmp	r3, #22
 800a7d0:	d85a      	bhi.n	800a888 <_dtoa_r+0x240>
 800a7d2:	9a00      	ldr	r2, [sp, #0]
 800a7d4:	4b57      	ldr	r3, [pc, #348]	; (800a934 <_dtoa_r+0x2ec>)
 800a7d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	ec51 0b19 	vmov	r0, r1, d9
 800a7e2:	f7f6 f953 	bl	8000a8c <__aeabi_dcmplt>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d050      	beq.n	800a88c <_dtoa_r+0x244>
 800a7ea:	9b00      	ldr	r3, [sp, #0]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7f6:	1b5d      	subs	r5, r3, r5
 800a7f8:	1e6b      	subs	r3, r5, #1
 800a7fa:	9305      	str	r3, [sp, #20]
 800a7fc:	bf45      	ittet	mi
 800a7fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800a802:	9304      	strmi	r3, [sp, #16]
 800a804:	2300      	movpl	r3, #0
 800a806:	2300      	movmi	r3, #0
 800a808:	bf4c      	ite	mi
 800a80a:	9305      	strmi	r3, [sp, #20]
 800a80c:	9304      	strpl	r3, [sp, #16]
 800a80e:	9b00      	ldr	r3, [sp, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	db3d      	blt.n	800a890 <_dtoa_r+0x248>
 800a814:	9b05      	ldr	r3, [sp, #20]
 800a816:	9a00      	ldr	r2, [sp, #0]
 800a818:	920a      	str	r2, [sp, #40]	; 0x28
 800a81a:	4413      	add	r3, r2
 800a81c:	9305      	str	r3, [sp, #20]
 800a81e:	2300      	movs	r3, #0
 800a820:	9307      	str	r3, [sp, #28]
 800a822:	9b06      	ldr	r3, [sp, #24]
 800a824:	2b09      	cmp	r3, #9
 800a826:	f200 8089 	bhi.w	800a93c <_dtoa_r+0x2f4>
 800a82a:	2b05      	cmp	r3, #5
 800a82c:	bfc4      	itt	gt
 800a82e:	3b04      	subgt	r3, #4
 800a830:	9306      	strgt	r3, [sp, #24]
 800a832:	9b06      	ldr	r3, [sp, #24]
 800a834:	f1a3 0302 	sub.w	r3, r3, #2
 800a838:	bfcc      	ite	gt
 800a83a:	2500      	movgt	r5, #0
 800a83c:	2501      	movle	r5, #1
 800a83e:	2b03      	cmp	r3, #3
 800a840:	f200 8087 	bhi.w	800a952 <_dtoa_r+0x30a>
 800a844:	e8df f003 	tbb	[pc, r3]
 800a848:	59383a2d 	.word	0x59383a2d
 800a84c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a850:	441d      	add	r5, r3
 800a852:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a856:	2b20      	cmp	r3, #32
 800a858:	bfc1      	itttt	gt
 800a85a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a85e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a862:	fa0b f303 	lslgt.w	r3, fp, r3
 800a866:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a86a:	bfda      	itte	le
 800a86c:	f1c3 0320 	rsble	r3, r3, #32
 800a870:	fa06 f003 	lslle.w	r0, r6, r3
 800a874:	4318      	orrgt	r0, r3
 800a876:	f7f5 fe1d 	bl	80004b4 <__aeabi_ui2d>
 800a87a:	2301      	movs	r3, #1
 800a87c:	4606      	mov	r6, r0
 800a87e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a882:	3d01      	subs	r5, #1
 800a884:	930e      	str	r3, [sp, #56]	; 0x38
 800a886:	e76a      	b.n	800a75e <_dtoa_r+0x116>
 800a888:	2301      	movs	r3, #1
 800a88a:	e7b2      	b.n	800a7f2 <_dtoa_r+0x1aa>
 800a88c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a88e:	e7b1      	b.n	800a7f4 <_dtoa_r+0x1ac>
 800a890:	9b04      	ldr	r3, [sp, #16]
 800a892:	9a00      	ldr	r2, [sp, #0]
 800a894:	1a9b      	subs	r3, r3, r2
 800a896:	9304      	str	r3, [sp, #16]
 800a898:	4253      	negs	r3, r2
 800a89a:	9307      	str	r3, [sp, #28]
 800a89c:	2300      	movs	r3, #0
 800a89e:	930a      	str	r3, [sp, #40]	; 0x28
 800a8a0:	e7bf      	b.n	800a822 <_dtoa_r+0x1da>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9308      	str	r3, [sp, #32]
 800a8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dc55      	bgt.n	800a958 <_dtoa_r+0x310>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a8b6:	e00c      	b.n	800a8d2 <_dtoa_r+0x28a>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e7f3      	b.n	800a8a4 <_dtoa_r+0x25c>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8c0:	9308      	str	r3, [sp, #32]
 800a8c2:	9b00      	ldr	r3, [sp, #0]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	9302      	str	r3, [sp, #8]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	9303      	str	r3, [sp, #12]
 800a8ce:	bfb8      	it	lt
 800a8d0:	2301      	movlt	r3, #1
 800a8d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	6042      	str	r2, [r0, #4]
 800a8d8:	2204      	movs	r2, #4
 800a8da:	f102 0614 	add.w	r6, r2, #20
 800a8de:	429e      	cmp	r6, r3
 800a8e0:	6841      	ldr	r1, [r0, #4]
 800a8e2:	d93d      	bls.n	800a960 <_dtoa_r+0x318>
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 fca9 	bl	800b23c <_Balloc>
 800a8ea:	9001      	str	r0, [sp, #4]
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d13b      	bne.n	800a968 <_dtoa_r+0x320>
 800a8f0:	4b11      	ldr	r3, [pc, #68]	; (800a938 <_dtoa_r+0x2f0>)
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8f8:	e6c0      	b.n	800a67c <_dtoa_r+0x34>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e7df      	b.n	800a8be <_dtoa_r+0x276>
 800a8fe:	bf00      	nop
 800a900:	636f4361 	.word	0x636f4361
 800a904:	3fd287a7 	.word	0x3fd287a7
 800a908:	8b60c8b3 	.word	0x8b60c8b3
 800a90c:	3fc68a28 	.word	0x3fc68a28
 800a910:	509f79fb 	.word	0x509f79fb
 800a914:	3fd34413 	.word	0x3fd34413
 800a918:	0800e48d 	.word	0x0800e48d
 800a91c:	0800e4a4 	.word	0x0800e4a4
 800a920:	7ff00000 	.word	0x7ff00000
 800a924:	0800e489 	.word	0x0800e489
 800a928:	0800e480 	.word	0x0800e480
 800a92c:	0800e45d 	.word	0x0800e45d
 800a930:	3ff80000 	.word	0x3ff80000
 800a934:	0800e598 	.word	0x0800e598
 800a938:	0800e4ff 	.word	0x0800e4ff
 800a93c:	2501      	movs	r5, #1
 800a93e:	2300      	movs	r3, #0
 800a940:	9306      	str	r3, [sp, #24]
 800a942:	9508      	str	r5, [sp, #32]
 800a944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a948:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a94c:	2200      	movs	r2, #0
 800a94e:	2312      	movs	r3, #18
 800a950:	e7b0      	b.n	800a8b4 <_dtoa_r+0x26c>
 800a952:	2301      	movs	r3, #1
 800a954:	9308      	str	r3, [sp, #32]
 800a956:	e7f5      	b.n	800a944 <_dtoa_r+0x2fc>
 800a958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a95e:	e7b8      	b.n	800a8d2 <_dtoa_r+0x28a>
 800a960:	3101      	adds	r1, #1
 800a962:	6041      	str	r1, [r0, #4]
 800a964:	0052      	lsls	r2, r2, #1
 800a966:	e7b8      	b.n	800a8da <_dtoa_r+0x292>
 800a968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a96a:	9a01      	ldr	r2, [sp, #4]
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	2b0e      	cmp	r3, #14
 800a972:	f200 809d 	bhi.w	800aab0 <_dtoa_r+0x468>
 800a976:	2d00      	cmp	r5, #0
 800a978:	f000 809a 	beq.w	800aab0 <_dtoa_r+0x468>
 800a97c:	9b00      	ldr	r3, [sp, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	dd32      	ble.n	800a9e8 <_dtoa_r+0x3a0>
 800a982:	4ab7      	ldr	r2, [pc, #732]	; (800ac60 <_dtoa_r+0x618>)
 800a984:	f003 030f 	and.w	r3, r3, #15
 800a988:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a98c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a990:	9b00      	ldr	r3, [sp, #0]
 800a992:	05d8      	lsls	r0, r3, #23
 800a994:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a998:	d516      	bpl.n	800a9c8 <_dtoa_r+0x380>
 800a99a:	4bb2      	ldr	r3, [pc, #712]	; (800ac64 <_dtoa_r+0x61c>)
 800a99c:	ec51 0b19 	vmov	r0, r1, d9
 800a9a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9a4:	f7f5 ff2a 	bl	80007fc <__aeabi_ddiv>
 800a9a8:	f007 070f 	and.w	r7, r7, #15
 800a9ac:	4682      	mov	sl, r0
 800a9ae:	468b      	mov	fp, r1
 800a9b0:	2503      	movs	r5, #3
 800a9b2:	4eac      	ldr	r6, [pc, #688]	; (800ac64 <_dtoa_r+0x61c>)
 800a9b4:	b957      	cbnz	r7, 800a9cc <_dtoa_r+0x384>
 800a9b6:	4642      	mov	r2, r8
 800a9b8:	464b      	mov	r3, r9
 800a9ba:	4650      	mov	r0, sl
 800a9bc:	4659      	mov	r1, fp
 800a9be:	f7f5 ff1d 	bl	80007fc <__aeabi_ddiv>
 800a9c2:	4682      	mov	sl, r0
 800a9c4:	468b      	mov	fp, r1
 800a9c6:	e028      	b.n	800aa1a <_dtoa_r+0x3d2>
 800a9c8:	2502      	movs	r5, #2
 800a9ca:	e7f2      	b.n	800a9b2 <_dtoa_r+0x36a>
 800a9cc:	07f9      	lsls	r1, r7, #31
 800a9ce:	d508      	bpl.n	800a9e2 <_dtoa_r+0x39a>
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9d8:	f7f5 fde6 	bl	80005a8 <__aeabi_dmul>
 800a9dc:	3501      	adds	r5, #1
 800a9de:	4680      	mov	r8, r0
 800a9e0:	4689      	mov	r9, r1
 800a9e2:	107f      	asrs	r7, r7, #1
 800a9e4:	3608      	adds	r6, #8
 800a9e6:	e7e5      	b.n	800a9b4 <_dtoa_r+0x36c>
 800a9e8:	f000 809b 	beq.w	800ab22 <_dtoa_r+0x4da>
 800a9ec:	9b00      	ldr	r3, [sp, #0]
 800a9ee:	4f9d      	ldr	r7, [pc, #628]	; (800ac64 <_dtoa_r+0x61c>)
 800a9f0:	425e      	negs	r6, r3
 800a9f2:	4b9b      	ldr	r3, [pc, #620]	; (800ac60 <_dtoa_r+0x618>)
 800a9f4:	f006 020f 	and.w	r2, r6, #15
 800a9f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	ec51 0b19 	vmov	r0, r1, d9
 800aa04:	f7f5 fdd0 	bl	80005a8 <__aeabi_dmul>
 800aa08:	1136      	asrs	r6, r6, #4
 800aa0a:	4682      	mov	sl, r0
 800aa0c:	468b      	mov	fp, r1
 800aa0e:	2300      	movs	r3, #0
 800aa10:	2502      	movs	r5, #2
 800aa12:	2e00      	cmp	r6, #0
 800aa14:	d17a      	bne.n	800ab0c <_dtoa_r+0x4c4>
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1d3      	bne.n	800a9c2 <_dtoa_r+0x37a>
 800aa1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 8082 	beq.w	800ab26 <_dtoa_r+0x4de>
 800aa22:	4b91      	ldr	r3, [pc, #580]	; (800ac68 <_dtoa_r+0x620>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	4650      	mov	r0, sl
 800aa28:	4659      	mov	r1, fp
 800aa2a:	f7f6 f82f 	bl	8000a8c <__aeabi_dcmplt>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d079      	beq.n	800ab26 <_dtoa_r+0x4de>
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d076      	beq.n	800ab26 <_dtoa_r+0x4de>
 800aa38:	9b02      	ldr	r3, [sp, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dd36      	ble.n	800aaac <_dtoa_r+0x464>
 800aa3e:	9b00      	ldr	r3, [sp, #0]
 800aa40:	4650      	mov	r0, sl
 800aa42:	4659      	mov	r1, fp
 800aa44:	1e5f      	subs	r7, r3, #1
 800aa46:	2200      	movs	r2, #0
 800aa48:	4b88      	ldr	r3, [pc, #544]	; (800ac6c <_dtoa_r+0x624>)
 800aa4a:	f7f5 fdad 	bl	80005a8 <__aeabi_dmul>
 800aa4e:	9e02      	ldr	r6, [sp, #8]
 800aa50:	4682      	mov	sl, r0
 800aa52:	468b      	mov	fp, r1
 800aa54:	3501      	adds	r5, #1
 800aa56:	4628      	mov	r0, r5
 800aa58:	f7f5 fd3c 	bl	80004d4 <__aeabi_i2d>
 800aa5c:	4652      	mov	r2, sl
 800aa5e:	465b      	mov	r3, fp
 800aa60:	f7f5 fda2 	bl	80005a8 <__aeabi_dmul>
 800aa64:	4b82      	ldr	r3, [pc, #520]	; (800ac70 <_dtoa_r+0x628>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	f7f5 fbe8 	bl	800023c <__adddf3>
 800aa6c:	46d0      	mov	r8, sl
 800aa6e:	46d9      	mov	r9, fp
 800aa70:	4682      	mov	sl, r0
 800aa72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aa76:	2e00      	cmp	r6, #0
 800aa78:	d158      	bne.n	800ab2c <_dtoa_r+0x4e4>
 800aa7a:	4b7e      	ldr	r3, [pc, #504]	; (800ac74 <_dtoa_r+0x62c>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	4640      	mov	r0, r8
 800aa80:	4649      	mov	r1, r9
 800aa82:	f7f5 fbd9 	bl	8000238 <__aeabi_dsub>
 800aa86:	4652      	mov	r2, sl
 800aa88:	465b      	mov	r3, fp
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	4689      	mov	r9, r1
 800aa8e:	f7f6 f81b 	bl	8000ac8 <__aeabi_dcmpgt>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f040 8295 	bne.w	800afc2 <_dtoa_r+0x97a>
 800aa98:	4652      	mov	r2, sl
 800aa9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	f7f5 fff3 	bl	8000a8c <__aeabi_dcmplt>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f040 8289 	bne.w	800afbe <_dtoa_r+0x976>
 800aaac:	ec5b ab19 	vmov	sl, fp, d9
 800aab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f2c0 8148 	blt.w	800ad48 <_dtoa_r+0x700>
 800aab8:	9a00      	ldr	r2, [sp, #0]
 800aaba:	2a0e      	cmp	r2, #14
 800aabc:	f300 8144 	bgt.w	800ad48 <_dtoa_r+0x700>
 800aac0:	4b67      	ldr	r3, [pc, #412]	; (800ac60 <_dtoa_r+0x618>)
 800aac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aac6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aaca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f280 80d5 	bge.w	800ac7c <_dtoa_r+0x634>
 800aad2:	9b03      	ldr	r3, [sp, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f300 80d1 	bgt.w	800ac7c <_dtoa_r+0x634>
 800aada:	f040 826f 	bne.w	800afbc <_dtoa_r+0x974>
 800aade:	4b65      	ldr	r3, [pc, #404]	; (800ac74 <_dtoa_r+0x62c>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	4640      	mov	r0, r8
 800aae4:	4649      	mov	r1, r9
 800aae6:	f7f5 fd5f 	bl	80005a8 <__aeabi_dmul>
 800aaea:	4652      	mov	r2, sl
 800aaec:	465b      	mov	r3, fp
 800aaee:	f7f5 ffe1 	bl	8000ab4 <__aeabi_dcmpge>
 800aaf2:	9e03      	ldr	r6, [sp, #12]
 800aaf4:	4637      	mov	r7, r6
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f040 8245 	bne.w	800af86 <_dtoa_r+0x93e>
 800aafc:	9d01      	ldr	r5, [sp, #4]
 800aafe:	2331      	movs	r3, #49	; 0x31
 800ab00:	f805 3b01 	strb.w	r3, [r5], #1
 800ab04:	9b00      	ldr	r3, [sp, #0]
 800ab06:	3301      	adds	r3, #1
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	e240      	b.n	800af8e <_dtoa_r+0x946>
 800ab0c:	07f2      	lsls	r2, r6, #31
 800ab0e:	d505      	bpl.n	800ab1c <_dtoa_r+0x4d4>
 800ab10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab14:	f7f5 fd48 	bl	80005a8 <__aeabi_dmul>
 800ab18:	3501      	adds	r5, #1
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	1076      	asrs	r6, r6, #1
 800ab1e:	3708      	adds	r7, #8
 800ab20:	e777      	b.n	800aa12 <_dtoa_r+0x3ca>
 800ab22:	2502      	movs	r5, #2
 800ab24:	e779      	b.n	800aa1a <_dtoa_r+0x3d2>
 800ab26:	9f00      	ldr	r7, [sp, #0]
 800ab28:	9e03      	ldr	r6, [sp, #12]
 800ab2a:	e794      	b.n	800aa56 <_dtoa_r+0x40e>
 800ab2c:	9901      	ldr	r1, [sp, #4]
 800ab2e:	4b4c      	ldr	r3, [pc, #304]	; (800ac60 <_dtoa_r+0x618>)
 800ab30:	4431      	add	r1, r6
 800ab32:	910d      	str	r1, [sp, #52]	; 0x34
 800ab34:	9908      	ldr	r1, [sp, #32]
 800ab36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab3e:	2900      	cmp	r1, #0
 800ab40:	d043      	beq.n	800abca <_dtoa_r+0x582>
 800ab42:	494d      	ldr	r1, [pc, #308]	; (800ac78 <_dtoa_r+0x630>)
 800ab44:	2000      	movs	r0, #0
 800ab46:	f7f5 fe59 	bl	80007fc <__aeabi_ddiv>
 800ab4a:	4652      	mov	r2, sl
 800ab4c:	465b      	mov	r3, fp
 800ab4e:	f7f5 fb73 	bl	8000238 <__aeabi_dsub>
 800ab52:	9d01      	ldr	r5, [sp, #4]
 800ab54:	4682      	mov	sl, r0
 800ab56:	468b      	mov	fp, r1
 800ab58:	4649      	mov	r1, r9
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	f7f5 ffd4 	bl	8000b08 <__aeabi_d2iz>
 800ab60:	4606      	mov	r6, r0
 800ab62:	f7f5 fcb7 	bl	80004d4 <__aeabi_i2d>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	f7f5 fb63 	bl	8000238 <__aeabi_dsub>
 800ab72:	3630      	adds	r6, #48	; 0x30
 800ab74:	f805 6b01 	strb.w	r6, [r5], #1
 800ab78:	4652      	mov	r2, sl
 800ab7a:	465b      	mov	r3, fp
 800ab7c:	4680      	mov	r8, r0
 800ab7e:	4689      	mov	r9, r1
 800ab80:	f7f5 ff84 	bl	8000a8c <__aeabi_dcmplt>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d163      	bne.n	800ac50 <_dtoa_r+0x608>
 800ab88:	4642      	mov	r2, r8
 800ab8a:	464b      	mov	r3, r9
 800ab8c:	4936      	ldr	r1, [pc, #216]	; (800ac68 <_dtoa_r+0x620>)
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f7f5 fb52 	bl	8000238 <__aeabi_dsub>
 800ab94:	4652      	mov	r2, sl
 800ab96:	465b      	mov	r3, fp
 800ab98:	f7f5 ff78 	bl	8000a8c <__aeabi_dcmplt>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f040 80b5 	bne.w	800ad0c <_dtoa_r+0x6c4>
 800aba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aba4:	429d      	cmp	r5, r3
 800aba6:	d081      	beq.n	800aaac <_dtoa_r+0x464>
 800aba8:	4b30      	ldr	r3, [pc, #192]	; (800ac6c <_dtoa_r+0x624>)
 800abaa:	2200      	movs	r2, #0
 800abac:	4650      	mov	r0, sl
 800abae:	4659      	mov	r1, fp
 800abb0:	f7f5 fcfa 	bl	80005a8 <__aeabi_dmul>
 800abb4:	4b2d      	ldr	r3, [pc, #180]	; (800ac6c <_dtoa_r+0x624>)
 800abb6:	4682      	mov	sl, r0
 800abb8:	468b      	mov	fp, r1
 800abba:	4640      	mov	r0, r8
 800abbc:	4649      	mov	r1, r9
 800abbe:	2200      	movs	r2, #0
 800abc0:	f7f5 fcf2 	bl	80005a8 <__aeabi_dmul>
 800abc4:	4680      	mov	r8, r0
 800abc6:	4689      	mov	r9, r1
 800abc8:	e7c6      	b.n	800ab58 <_dtoa_r+0x510>
 800abca:	4650      	mov	r0, sl
 800abcc:	4659      	mov	r1, fp
 800abce:	f7f5 fceb 	bl	80005a8 <__aeabi_dmul>
 800abd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd4:	9d01      	ldr	r5, [sp, #4]
 800abd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abd8:	4682      	mov	sl, r0
 800abda:	468b      	mov	fp, r1
 800abdc:	4649      	mov	r1, r9
 800abde:	4640      	mov	r0, r8
 800abe0:	f7f5 ff92 	bl	8000b08 <__aeabi_d2iz>
 800abe4:	4606      	mov	r6, r0
 800abe6:	f7f5 fc75 	bl	80004d4 <__aeabi_i2d>
 800abea:	3630      	adds	r6, #48	; 0x30
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4640      	mov	r0, r8
 800abf2:	4649      	mov	r1, r9
 800abf4:	f7f5 fb20 	bl	8000238 <__aeabi_dsub>
 800abf8:	f805 6b01 	strb.w	r6, [r5], #1
 800abfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abfe:	429d      	cmp	r5, r3
 800ac00:	4680      	mov	r8, r0
 800ac02:	4689      	mov	r9, r1
 800ac04:	f04f 0200 	mov.w	r2, #0
 800ac08:	d124      	bne.n	800ac54 <_dtoa_r+0x60c>
 800ac0a:	4b1b      	ldr	r3, [pc, #108]	; (800ac78 <_dtoa_r+0x630>)
 800ac0c:	4650      	mov	r0, sl
 800ac0e:	4659      	mov	r1, fp
 800ac10:	f7f5 fb14 	bl	800023c <__adddf3>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4640      	mov	r0, r8
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	f7f5 ff54 	bl	8000ac8 <__aeabi_dcmpgt>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d173      	bne.n	800ad0c <_dtoa_r+0x6c4>
 800ac24:	4652      	mov	r2, sl
 800ac26:	465b      	mov	r3, fp
 800ac28:	4913      	ldr	r1, [pc, #76]	; (800ac78 <_dtoa_r+0x630>)
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	f7f5 fb04 	bl	8000238 <__aeabi_dsub>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4640      	mov	r0, r8
 800ac36:	4649      	mov	r1, r9
 800ac38:	f7f5 ff28 	bl	8000a8c <__aeabi_dcmplt>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	f43f af35 	beq.w	800aaac <_dtoa_r+0x464>
 800ac42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac44:	1e6b      	subs	r3, r5, #1
 800ac46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac4c:	2b30      	cmp	r3, #48	; 0x30
 800ac4e:	d0f8      	beq.n	800ac42 <_dtoa_r+0x5fa>
 800ac50:	9700      	str	r7, [sp, #0]
 800ac52:	e049      	b.n	800ace8 <_dtoa_r+0x6a0>
 800ac54:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <_dtoa_r+0x624>)
 800ac56:	f7f5 fca7 	bl	80005a8 <__aeabi_dmul>
 800ac5a:	4680      	mov	r8, r0
 800ac5c:	4689      	mov	r9, r1
 800ac5e:	e7bd      	b.n	800abdc <_dtoa_r+0x594>
 800ac60:	0800e598 	.word	0x0800e598
 800ac64:	0800e570 	.word	0x0800e570
 800ac68:	3ff00000 	.word	0x3ff00000
 800ac6c:	40240000 	.word	0x40240000
 800ac70:	401c0000 	.word	0x401c0000
 800ac74:	40140000 	.word	0x40140000
 800ac78:	3fe00000 	.word	0x3fe00000
 800ac7c:	9d01      	ldr	r5, [sp, #4]
 800ac7e:	4656      	mov	r6, sl
 800ac80:	465f      	mov	r7, fp
 800ac82:	4642      	mov	r2, r8
 800ac84:	464b      	mov	r3, r9
 800ac86:	4630      	mov	r0, r6
 800ac88:	4639      	mov	r1, r7
 800ac8a:	f7f5 fdb7 	bl	80007fc <__aeabi_ddiv>
 800ac8e:	f7f5 ff3b 	bl	8000b08 <__aeabi_d2iz>
 800ac92:	4682      	mov	sl, r0
 800ac94:	f7f5 fc1e 	bl	80004d4 <__aeabi_i2d>
 800ac98:	4642      	mov	r2, r8
 800ac9a:	464b      	mov	r3, r9
 800ac9c:	f7f5 fc84 	bl	80005a8 <__aeabi_dmul>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	4630      	mov	r0, r6
 800aca6:	4639      	mov	r1, r7
 800aca8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800acac:	f7f5 fac4 	bl	8000238 <__aeabi_dsub>
 800acb0:	f805 6b01 	strb.w	r6, [r5], #1
 800acb4:	9e01      	ldr	r6, [sp, #4]
 800acb6:	9f03      	ldr	r7, [sp, #12]
 800acb8:	1bae      	subs	r6, r5, r6
 800acba:	42b7      	cmp	r7, r6
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	d135      	bne.n	800ad2e <_dtoa_r+0x6e6>
 800acc2:	f7f5 fabb 	bl	800023c <__adddf3>
 800acc6:	4642      	mov	r2, r8
 800acc8:	464b      	mov	r3, r9
 800acca:	4606      	mov	r6, r0
 800accc:	460f      	mov	r7, r1
 800acce:	f7f5 fefb 	bl	8000ac8 <__aeabi_dcmpgt>
 800acd2:	b9d0      	cbnz	r0, 800ad0a <_dtoa_r+0x6c2>
 800acd4:	4642      	mov	r2, r8
 800acd6:	464b      	mov	r3, r9
 800acd8:	4630      	mov	r0, r6
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f5 fecc 	bl	8000a78 <__aeabi_dcmpeq>
 800ace0:	b110      	cbz	r0, 800ace8 <_dtoa_r+0x6a0>
 800ace2:	f01a 0f01 	tst.w	sl, #1
 800ace6:	d110      	bne.n	800ad0a <_dtoa_r+0x6c2>
 800ace8:	4620      	mov	r0, r4
 800acea:	ee18 1a10 	vmov	r1, s16
 800acee:	f000 fae5 	bl	800b2bc <_Bfree>
 800acf2:	2300      	movs	r3, #0
 800acf4:	9800      	ldr	r0, [sp, #0]
 800acf6:	702b      	strb	r3, [r5, #0]
 800acf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acfa:	3001      	adds	r0, #1
 800acfc:	6018      	str	r0, [r3, #0]
 800acfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f43f acf1 	beq.w	800a6e8 <_dtoa_r+0xa0>
 800ad06:	601d      	str	r5, [r3, #0]
 800ad08:	e4ee      	b.n	800a6e8 <_dtoa_r+0xa0>
 800ad0a:	9f00      	ldr	r7, [sp, #0]
 800ad0c:	462b      	mov	r3, r5
 800ad0e:	461d      	mov	r5, r3
 800ad10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad14:	2a39      	cmp	r2, #57	; 0x39
 800ad16:	d106      	bne.n	800ad26 <_dtoa_r+0x6de>
 800ad18:	9a01      	ldr	r2, [sp, #4]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d1f7      	bne.n	800ad0e <_dtoa_r+0x6c6>
 800ad1e:	9901      	ldr	r1, [sp, #4]
 800ad20:	2230      	movs	r2, #48	; 0x30
 800ad22:	3701      	adds	r7, #1
 800ad24:	700a      	strb	r2, [r1, #0]
 800ad26:	781a      	ldrb	r2, [r3, #0]
 800ad28:	3201      	adds	r2, #1
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	e790      	b.n	800ac50 <_dtoa_r+0x608>
 800ad2e:	4ba6      	ldr	r3, [pc, #664]	; (800afc8 <_dtoa_r+0x980>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	f7f5 fc39 	bl	80005a8 <__aeabi_dmul>
 800ad36:	2200      	movs	r2, #0
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	f7f5 fe9b 	bl	8000a78 <__aeabi_dcmpeq>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d09d      	beq.n	800ac82 <_dtoa_r+0x63a>
 800ad46:	e7cf      	b.n	800ace8 <_dtoa_r+0x6a0>
 800ad48:	9a08      	ldr	r2, [sp, #32]
 800ad4a:	2a00      	cmp	r2, #0
 800ad4c:	f000 80d7 	beq.w	800aefe <_dtoa_r+0x8b6>
 800ad50:	9a06      	ldr	r2, [sp, #24]
 800ad52:	2a01      	cmp	r2, #1
 800ad54:	f300 80ba 	bgt.w	800aecc <_dtoa_r+0x884>
 800ad58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	f000 80b2 	beq.w	800aec4 <_dtoa_r+0x87c>
 800ad60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad64:	9e07      	ldr	r6, [sp, #28]
 800ad66:	9d04      	ldr	r5, [sp, #16]
 800ad68:	9a04      	ldr	r2, [sp, #16]
 800ad6a:	441a      	add	r2, r3
 800ad6c:	9204      	str	r2, [sp, #16]
 800ad6e:	9a05      	ldr	r2, [sp, #20]
 800ad70:	2101      	movs	r1, #1
 800ad72:	441a      	add	r2, r3
 800ad74:	4620      	mov	r0, r4
 800ad76:	9205      	str	r2, [sp, #20]
 800ad78:	f000 fb58 	bl	800b42c <__i2b>
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	2d00      	cmp	r5, #0
 800ad80:	dd0c      	ble.n	800ad9c <_dtoa_r+0x754>
 800ad82:	9b05      	ldr	r3, [sp, #20]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	dd09      	ble.n	800ad9c <_dtoa_r+0x754>
 800ad88:	42ab      	cmp	r3, r5
 800ad8a:	9a04      	ldr	r2, [sp, #16]
 800ad8c:	bfa8      	it	ge
 800ad8e:	462b      	movge	r3, r5
 800ad90:	1ad2      	subs	r2, r2, r3
 800ad92:	9204      	str	r2, [sp, #16]
 800ad94:	9a05      	ldr	r2, [sp, #20]
 800ad96:	1aed      	subs	r5, r5, r3
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	9305      	str	r3, [sp, #20]
 800ad9c:	9b07      	ldr	r3, [sp, #28]
 800ad9e:	b31b      	cbz	r3, 800ade8 <_dtoa_r+0x7a0>
 800ada0:	9b08      	ldr	r3, [sp, #32]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 80af 	beq.w	800af06 <_dtoa_r+0x8be>
 800ada8:	2e00      	cmp	r6, #0
 800adaa:	dd13      	ble.n	800add4 <_dtoa_r+0x78c>
 800adac:	4639      	mov	r1, r7
 800adae:	4632      	mov	r2, r6
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 fbfb 	bl	800b5ac <__pow5mult>
 800adb6:	ee18 2a10 	vmov	r2, s16
 800adba:	4601      	mov	r1, r0
 800adbc:	4607      	mov	r7, r0
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 fb4a 	bl	800b458 <__multiply>
 800adc4:	ee18 1a10 	vmov	r1, s16
 800adc8:	4680      	mov	r8, r0
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fa76 	bl	800b2bc <_Bfree>
 800add0:	ee08 8a10 	vmov	s16, r8
 800add4:	9b07      	ldr	r3, [sp, #28]
 800add6:	1b9a      	subs	r2, r3, r6
 800add8:	d006      	beq.n	800ade8 <_dtoa_r+0x7a0>
 800adda:	ee18 1a10 	vmov	r1, s16
 800adde:	4620      	mov	r0, r4
 800ade0:	f000 fbe4 	bl	800b5ac <__pow5mult>
 800ade4:	ee08 0a10 	vmov	s16, r0
 800ade8:	2101      	movs	r1, #1
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fb1e 	bl	800b42c <__i2b>
 800adf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	4606      	mov	r6, r0
 800adf6:	f340 8088 	ble.w	800af0a <_dtoa_r+0x8c2>
 800adfa:	461a      	mov	r2, r3
 800adfc:	4601      	mov	r1, r0
 800adfe:	4620      	mov	r0, r4
 800ae00:	f000 fbd4 	bl	800b5ac <__pow5mult>
 800ae04:	9b06      	ldr	r3, [sp, #24]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	4606      	mov	r6, r0
 800ae0a:	f340 8081 	ble.w	800af10 <_dtoa_r+0x8c8>
 800ae0e:	f04f 0800 	mov.w	r8, #0
 800ae12:	6933      	ldr	r3, [r6, #16]
 800ae14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae18:	6918      	ldr	r0, [r3, #16]
 800ae1a:	f000 fab7 	bl	800b38c <__hi0bits>
 800ae1e:	f1c0 0020 	rsb	r0, r0, #32
 800ae22:	9b05      	ldr	r3, [sp, #20]
 800ae24:	4418      	add	r0, r3
 800ae26:	f010 001f 	ands.w	r0, r0, #31
 800ae2a:	f000 8092 	beq.w	800af52 <_dtoa_r+0x90a>
 800ae2e:	f1c0 0320 	rsb	r3, r0, #32
 800ae32:	2b04      	cmp	r3, #4
 800ae34:	f340 808a 	ble.w	800af4c <_dtoa_r+0x904>
 800ae38:	f1c0 001c 	rsb	r0, r0, #28
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	4403      	add	r3, r0
 800ae40:	9304      	str	r3, [sp, #16]
 800ae42:	9b05      	ldr	r3, [sp, #20]
 800ae44:	4403      	add	r3, r0
 800ae46:	4405      	add	r5, r0
 800ae48:	9305      	str	r3, [sp, #20]
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dd07      	ble.n	800ae60 <_dtoa_r+0x818>
 800ae50:	ee18 1a10 	vmov	r1, s16
 800ae54:	461a      	mov	r2, r3
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 fc02 	bl	800b660 <__lshift>
 800ae5c:	ee08 0a10 	vmov	s16, r0
 800ae60:	9b05      	ldr	r3, [sp, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dd05      	ble.n	800ae72 <_dtoa_r+0x82a>
 800ae66:	4631      	mov	r1, r6
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 fbf8 	bl	800b660 <__lshift>
 800ae70:	4606      	mov	r6, r0
 800ae72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d06e      	beq.n	800af56 <_dtoa_r+0x90e>
 800ae78:	ee18 0a10 	vmov	r0, s16
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	f000 fc5f 	bl	800b740 <__mcmp>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	da67      	bge.n	800af56 <_dtoa_r+0x90e>
 800ae86:	9b00      	ldr	r3, [sp, #0]
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	ee18 1a10 	vmov	r1, s16
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	220a      	movs	r2, #10
 800ae92:	2300      	movs	r3, #0
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 fa33 	bl	800b300 <__multadd>
 800ae9a:	9b08      	ldr	r3, [sp, #32]
 800ae9c:	ee08 0a10 	vmov	s16, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 81b1 	beq.w	800b208 <_dtoa_r+0xbc0>
 800aea6:	2300      	movs	r3, #0
 800aea8:	4639      	mov	r1, r7
 800aeaa:	220a      	movs	r2, #10
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fa27 	bl	800b300 <__multadd>
 800aeb2:	9b02      	ldr	r3, [sp, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	f300 808e 	bgt.w	800afd8 <_dtoa_r+0x990>
 800aebc:	9b06      	ldr	r3, [sp, #24]
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	dc51      	bgt.n	800af66 <_dtoa_r+0x91e>
 800aec2:	e089      	b.n	800afd8 <_dtoa_r+0x990>
 800aec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aeca:	e74b      	b.n	800ad64 <_dtoa_r+0x71c>
 800aecc:	9b03      	ldr	r3, [sp, #12]
 800aece:	1e5e      	subs	r6, r3, #1
 800aed0:	9b07      	ldr	r3, [sp, #28]
 800aed2:	42b3      	cmp	r3, r6
 800aed4:	bfbf      	itttt	lt
 800aed6:	9b07      	ldrlt	r3, [sp, #28]
 800aed8:	9607      	strlt	r6, [sp, #28]
 800aeda:	1af2      	sublt	r2, r6, r3
 800aedc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aede:	bfb6      	itet	lt
 800aee0:	189b      	addlt	r3, r3, r2
 800aee2:	1b9e      	subge	r6, r3, r6
 800aee4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	bfb8      	it	lt
 800aeea:	2600      	movlt	r6, #0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	bfb7      	itett	lt
 800aef0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aef4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aef8:	1a9d      	sublt	r5, r3, r2
 800aefa:	2300      	movlt	r3, #0
 800aefc:	e734      	b.n	800ad68 <_dtoa_r+0x720>
 800aefe:	9e07      	ldr	r6, [sp, #28]
 800af00:	9d04      	ldr	r5, [sp, #16]
 800af02:	9f08      	ldr	r7, [sp, #32]
 800af04:	e73b      	b.n	800ad7e <_dtoa_r+0x736>
 800af06:	9a07      	ldr	r2, [sp, #28]
 800af08:	e767      	b.n	800adda <_dtoa_r+0x792>
 800af0a:	9b06      	ldr	r3, [sp, #24]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	dc18      	bgt.n	800af42 <_dtoa_r+0x8fa>
 800af10:	f1ba 0f00 	cmp.w	sl, #0
 800af14:	d115      	bne.n	800af42 <_dtoa_r+0x8fa>
 800af16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af1a:	b993      	cbnz	r3, 800af42 <_dtoa_r+0x8fa>
 800af1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af20:	0d1b      	lsrs	r3, r3, #20
 800af22:	051b      	lsls	r3, r3, #20
 800af24:	b183      	cbz	r3, 800af48 <_dtoa_r+0x900>
 800af26:	9b04      	ldr	r3, [sp, #16]
 800af28:	3301      	adds	r3, #1
 800af2a:	9304      	str	r3, [sp, #16]
 800af2c:	9b05      	ldr	r3, [sp, #20]
 800af2e:	3301      	adds	r3, #1
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	f04f 0801 	mov.w	r8, #1
 800af36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f47f af6a 	bne.w	800ae12 <_dtoa_r+0x7ca>
 800af3e:	2001      	movs	r0, #1
 800af40:	e76f      	b.n	800ae22 <_dtoa_r+0x7da>
 800af42:	f04f 0800 	mov.w	r8, #0
 800af46:	e7f6      	b.n	800af36 <_dtoa_r+0x8ee>
 800af48:	4698      	mov	r8, r3
 800af4a:	e7f4      	b.n	800af36 <_dtoa_r+0x8ee>
 800af4c:	f43f af7d 	beq.w	800ae4a <_dtoa_r+0x802>
 800af50:	4618      	mov	r0, r3
 800af52:	301c      	adds	r0, #28
 800af54:	e772      	b.n	800ae3c <_dtoa_r+0x7f4>
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dc37      	bgt.n	800afcc <_dtoa_r+0x984>
 800af5c:	9b06      	ldr	r3, [sp, #24]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	dd34      	ble.n	800afcc <_dtoa_r+0x984>
 800af62:	9b03      	ldr	r3, [sp, #12]
 800af64:	9302      	str	r3, [sp, #8]
 800af66:	9b02      	ldr	r3, [sp, #8]
 800af68:	b96b      	cbnz	r3, 800af86 <_dtoa_r+0x93e>
 800af6a:	4631      	mov	r1, r6
 800af6c:	2205      	movs	r2, #5
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 f9c6 	bl	800b300 <__multadd>
 800af74:	4601      	mov	r1, r0
 800af76:	4606      	mov	r6, r0
 800af78:	ee18 0a10 	vmov	r0, s16
 800af7c:	f000 fbe0 	bl	800b740 <__mcmp>
 800af80:	2800      	cmp	r0, #0
 800af82:	f73f adbb 	bgt.w	800aafc <_dtoa_r+0x4b4>
 800af86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af88:	9d01      	ldr	r5, [sp, #4]
 800af8a:	43db      	mvns	r3, r3
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	f04f 0800 	mov.w	r8, #0
 800af92:	4631      	mov	r1, r6
 800af94:	4620      	mov	r0, r4
 800af96:	f000 f991 	bl	800b2bc <_Bfree>
 800af9a:	2f00      	cmp	r7, #0
 800af9c:	f43f aea4 	beq.w	800ace8 <_dtoa_r+0x6a0>
 800afa0:	f1b8 0f00 	cmp.w	r8, #0
 800afa4:	d005      	beq.n	800afb2 <_dtoa_r+0x96a>
 800afa6:	45b8      	cmp	r8, r7
 800afa8:	d003      	beq.n	800afb2 <_dtoa_r+0x96a>
 800afaa:	4641      	mov	r1, r8
 800afac:	4620      	mov	r0, r4
 800afae:	f000 f985 	bl	800b2bc <_Bfree>
 800afb2:	4639      	mov	r1, r7
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 f981 	bl	800b2bc <_Bfree>
 800afba:	e695      	b.n	800ace8 <_dtoa_r+0x6a0>
 800afbc:	2600      	movs	r6, #0
 800afbe:	4637      	mov	r7, r6
 800afc0:	e7e1      	b.n	800af86 <_dtoa_r+0x93e>
 800afc2:	9700      	str	r7, [sp, #0]
 800afc4:	4637      	mov	r7, r6
 800afc6:	e599      	b.n	800aafc <_dtoa_r+0x4b4>
 800afc8:	40240000 	.word	0x40240000
 800afcc:	9b08      	ldr	r3, [sp, #32]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 80ca 	beq.w	800b168 <_dtoa_r+0xb20>
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	9302      	str	r3, [sp, #8]
 800afd8:	2d00      	cmp	r5, #0
 800afda:	dd05      	ble.n	800afe8 <_dtoa_r+0x9a0>
 800afdc:	4639      	mov	r1, r7
 800afde:	462a      	mov	r2, r5
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 fb3d 	bl	800b660 <__lshift>
 800afe6:	4607      	mov	r7, r0
 800afe8:	f1b8 0f00 	cmp.w	r8, #0
 800afec:	d05b      	beq.n	800b0a6 <_dtoa_r+0xa5e>
 800afee:	6879      	ldr	r1, [r7, #4]
 800aff0:	4620      	mov	r0, r4
 800aff2:	f000 f923 	bl	800b23c <_Balloc>
 800aff6:	4605      	mov	r5, r0
 800aff8:	b928      	cbnz	r0, 800b006 <_dtoa_r+0x9be>
 800affa:	4b87      	ldr	r3, [pc, #540]	; (800b218 <_dtoa_r+0xbd0>)
 800affc:	4602      	mov	r2, r0
 800affe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b002:	f7ff bb3b 	b.w	800a67c <_dtoa_r+0x34>
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	3202      	adds	r2, #2
 800b00a:	0092      	lsls	r2, r2, #2
 800b00c:	f107 010c 	add.w	r1, r7, #12
 800b010:	300c      	adds	r0, #12
 800b012:	f7fe fded 	bl	8009bf0 <memcpy>
 800b016:	2201      	movs	r2, #1
 800b018:	4629      	mov	r1, r5
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 fb20 	bl	800b660 <__lshift>
 800b020:	9b01      	ldr	r3, [sp, #4]
 800b022:	f103 0901 	add.w	r9, r3, #1
 800b026:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b02a:	4413      	add	r3, r2
 800b02c:	9305      	str	r3, [sp, #20]
 800b02e:	f00a 0301 	and.w	r3, sl, #1
 800b032:	46b8      	mov	r8, r7
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	4607      	mov	r7, r0
 800b038:	4631      	mov	r1, r6
 800b03a:	ee18 0a10 	vmov	r0, s16
 800b03e:	f7ff fa77 	bl	800a530 <quorem>
 800b042:	4641      	mov	r1, r8
 800b044:	9002      	str	r0, [sp, #8]
 800b046:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b04a:	ee18 0a10 	vmov	r0, s16
 800b04e:	f000 fb77 	bl	800b740 <__mcmp>
 800b052:	463a      	mov	r2, r7
 800b054:	9003      	str	r0, [sp, #12]
 800b056:	4631      	mov	r1, r6
 800b058:	4620      	mov	r0, r4
 800b05a:	f000 fb8d 	bl	800b778 <__mdiff>
 800b05e:	68c2      	ldr	r2, [r0, #12]
 800b060:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b064:	4605      	mov	r5, r0
 800b066:	bb02      	cbnz	r2, 800b0aa <_dtoa_r+0xa62>
 800b068:	4601      	mov	r1, r0
 800b06a:	ee18 0a10 	vmov	r0, s16
 800b06e:	f000 fb67 	bl	800b740 <__mcmp>
 800b072:	4602      	mov	r2, r0
 800b074:	4629      	mov	r1, r5
 800b076:	4620      	mov	r0, r4
 800b078:	9207      	str	r2, [sp, #28]
 800b07a:	f000 f91f 	bl	800b2bc <_Bfree>
 800b07e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b082:	ea43 0102 	orr.w	r1, r3, r2
 800b086:	9b04      	ldr	r3, [sp, #16]
 800b088:	430b      	orrs	r3, r1
 800b08a:	464d      	mov	r5, r9
 800b08c:	d10f      	bne.n	800b0ae <_dtoa_r+0xa66>
 800b08e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b092:	d02a      	beq.n	800b0ea <_dtoa_r+0xaa2>
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	dd02      	ble.n	800b0a0 <_dtoa_r+0xa58>
 800b09a:	9b02      	ldr	r3, [sp, #8]
 800b09c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b0a0:	f88b a000 	strb.w	sl, [fp]
 800b0a4:	e775      	b.n	800af92 <_dtoa_r+0x94a>
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	e7ba      	b.n	800b020 <_dtoa_r+0x9d8>
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	e7e2      	b.n	800b074 <_dtoa_r+0xa2c>
 800b0ae:	9b03      	ldr	r3, [sp, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	db04      	blt.n	800b0be <_dtoa_r+0xa76>
 800b0b4:	9906      	ldr	r1, [sp, #24]
 800b0b6:	430b      	orrs	r3, r1
 800b0b8:	9904      	ldr	r1, [sp, #16]
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	d122      	bne.n	800b104 <_dtoa_r+0xabc>
 800b0be:	2a00      	cmp	r2, #0
 800b0c0:	ddee      	ble.n	800b0a0 <_dtoa_r+0xa58>
 800b0c2:	ee18 1a10 	vmov	r1, s16
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fac9 	bl	800b660 <__lshift>
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	ee08 0a10 	vmov	s16, r0
 800b0d4:	f000 fb34 	bl	800b740 <__mcmp>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	dc03      	bgt.n	800b0e4 <_dtoa_r+0xa9c>
 800b0dc:	d1e0      	bne.n	800b0a0 <_dtoa_r+0xa58>
 800b0de:	f01a 0f01 	tst.w	sl, #1
 800b0e2:	d0dd      	beq.n	800b0a0 <_dtoa_r+0xa58>
 800b0e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0e8:	d1d7      	bne.n	800b09a <_dtoa_r+0xa52>
 800b0ea:	2339      	movs	r3, #57	; 0x39
 800b0ec:	f88b 3000 	strb.w	r3, [fp]
 800b0f0:	462b      	mov	r3, r5
 800b0f2:	461d      	mov	r5, r3
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0fa:	2a39      	cmp	r2, #57	; 0x39
 800b0fc:	d071      	beq.n	800b1e2 <_dtoa_r+0xb9a>
 800b0fe:	3201      	adds	r2, #1
 800b100:	701a      	strb	r2, [r3, #0]
 800b102:	e746      	b.n	800af92 <_dtoa_r+0x94a>
 800b104:	2a00      	cmp	r2, #0
 800b106:	dd07      	ble.n	800b118 <_dtoa_r+0xad0>
 800b108:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b10c:	d0ed      	beq.n	800b0ea <_dtoa_r+0xaa2>
 800b10e:	f10a 0301 	add.w	r3, sl, #1
 800b112:	f88b 3000 	strb.w	r3, [fp]
 800b116:	e73c      	b.n	800af92 <_dtoa_r+0x94a>
 800b118:	9b05      	ldr	r3, [sp, #20]
 800b11a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b11e:	4599      	cmp	r9, r3
 800b120:	d047      	beq.n	800b1b2 <_dtoa_r+0xb6a>
 800b122:	ee18 1a10 	vmov	r1, s16
 800b126:	2300      	movs	r3, #0
 800b128:	220a      	movs	r2, #10
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 f8e8 	bl	800b300 <__multadd>
 800b130:	45b8      	cmp	r8, r7
 800b132:	ee08 0a10 	vmov	s16, r0
 800b136:	f04f 0300 	mov.w	r3, #0
 800b13a:	f04f 020a 	mov.w	r2, #10
 800b13e:	4641      	mov	r1, r8
 800b140:	4620      	mov	r0, r4
 800b142:	d106      	bne.n	800b152 <_dtoa_r+0xb0a>
 800b144:	f000 f8dc 	bl	800b300 <__multadd>
 800b148:	4680      	mov	r8, r0
 800b14a:	4607      	mov	r7, r0
 800b14c:	f109 0901 	add.w	r9, r9, #1
 800b150:	e772      	b.n	800b038 <_dtoa_r+0x9f0>
 800b152:	f000 f8d5 	bl	800b300 <__multadd>
 800b156:	4639      	mov	r1, r7
 800b158:	4680      	mov	r8, r0
 800b15a:	2300      	movs	r3, #0
 800b15c:	220a      	movs	r2, #10
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 f8ce 	bl	800b300 <__multadd>
 800b164:	4607      	mov	r7, r0
 800b166:	e7f1      	b.n	800b14c <_dtoa_r+0xb04>
 800b168:	9b03      	ldr	r3, [sp, #12]
 800b16a:	9302      	str	r3, [sp, #8]
 800b16c:	9d01      	ldr	r5, [sp, #4]
 800b16e:	ee18 0a10 	vmov	r0, s16
 800b172:	4631      	mov	r1, r6
 800b174:	f7ff f9dc 	bl	800a530 <quorem>
 800b178:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b17c:	9b01      	ldr	r3, [sp, #4]
 800b17e:	f805 ab01 	strb.w	sl, [r5], #1
 800b182:	1aea      	subs	r2, r5, r3
 800b184:	9b02      	ldr	r3, [sp, #8]
 800b186:	4293      	cmp	r3, r2
 800b188:	dd09      	ble.n	800b19e <_dtoa_r+0xb56>
 800b18a:	ee18 1a10 	vmov	r1, s16
 800b18e:	2300      	movs	r3, #0
 800b190:	220a      	movs	r2, #10
 800b192:	4620      	mov	r0, r4
 800b194:	f000 f8b4 	bl	800b300 <__multadd>
 800b198:	ee08 0a10 	vmov	s16, r0
 800b19c:	e7e7      	b.n	800b16e <_dtoa_r+0xb26>
 800b19e:	9b02      	ldr	r3, [sp, #8]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	bfc8      	it	gt
 800b1a4:	461d      	movgt	r5, r3
 800b1a6:	9b01      	ldr	r3, [sp, #4]
 800b1a8:	bfd8      	it	le
 800b1aa:	2501      	movle	r5, #1
 800b1ac:	441d      	add	r5, r3
 800b1ae:	f04f 0800 	mov.w	r8, #0
 800b1b2:	ee18 1a10 	vmov	r1, s16
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f000 fa51 	bl	800b660 <__lshift>
 800b1be:	4631      	mov	r1, r6
 800b1c0:	ee08 0a10 	vmov	s16, r0
 800b1c4:	f000 fabc 	bl	800b740 <__mcmp>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	dc91      	bgt.n	800b0f0 <_dtoa_r+0xaa8>
 800b1cc:	d102      	bne.n	800b1d4 <_dtoa_r+0xb8c>
 800b1ce:	f01a 0f01 	tst.w	sl, #1
 800b1d2:	d18d      	bne.n	800b0f0 <_dtoa_r+0xaa8>
 800b1d4:	462b      	mov	r3, r5
 800b1d6:	461d      	mov	r5, r3
 800b1d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1dc:	2a30      	cmp	r2, #48	; 0x30
 800b1de:	d0fa      	beq.n	800b1d6 <_dtoa_r+0xb8e>
 800b1e0:	e6d7      	b.n	800af92 <_dtoa_r+0x94a>
 800b1e2:	9a01      	ldr	r2, [sp, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d184      	bne.n	800b0f2 <_dtoa_r+0xaaa>
 800b1e8:	9b00      	ldr	r3, [sp, #0]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	2331      	movs	r3, #49	; 0x31
 800b1f0:	7013      	strb	r3, [r2, #0]
 800b1f2:	e6ce      	b.n	800af92 <_dtoa_r+0x94a>
 800b1f4:	4b09      	ldr	r3, [pc, #36]	; (800b21c <_dtoa_r+0xbd4>)
 800b1f6:	f7ff ba95 	b.w	800a724 <_dtoa_r+0xdc>
 800b1fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f47f aa6e 	bne.w	800a6de <_dtoa_r+0x96>
 800b202:	4b07      	ldr	r3, [pc, #28]	; (800b220 <_dtoa_r+0xbd8>)
 800b204:	f7ff ba8e 	b.w	800a724 <_dtoa_r+0xdc>
 800b208:	9b02      	ldr	r3, [sp, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	dcae      	bgt.n	800b16c <_dtoa_r+0xb24>
 800b20e:	9b06      	ldr	r3, [sp, #24]
 800b210:	2b02      	cmp	r3, #2
 800b212:	f73f aea8 	bgt.w	800af66 <_dtoa_r+0x91e>
 800b216:	e7a9      	b.n	800b16c <_dtoa_r+0xb24>
 800b218:	0800e4ff 	.word	0x0800e4ff
 800b21c:	0800e45c 	.word	0x0800e45c
 800b220:	0800e480 	.word	0x0800e480

0800b224 <_localeconv_r>:
 800b224:	4800      	ldr	r0, [pc, #0]	; (800b228 <_localeconv_r+0x4>)
 800b226:	4770      	bx	lr
 800b228:	20000164 	.word	0x20000164

0800b22c <malloc>:
 800b22c:	4b02      	ldr	r3, [pc, #8]	; (800b238 <malloc+0xc>)
 800b22e:	4601      	mov	r1, r0
 800b230:	6818      	ldr	r0, [r3, #0]
 800b232:	f000 bc09 	b.w	800ba48 <_malloc_r>
 800b236:	bf00      	nop
 800b238:	20000010 	.word	0x20000010

0800b23c <_Balloc>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b240:	4604      	mov	r4, r0
 800b242:	460d      	mov	r5, r1
 800b244:	b976      	cbnz	r6, 800b264 <_Balloc+0x28>
 800b246:	2010      	movs	r0, #16
 800b248:	f7ff fff0 	bl	800b22c <malloc>
 800b24c:	4602      	mov	r2, r0
 800b24e:	6260      	str	r0, [r4, #36]	; 0x24
 800b250:	b920      	cbnz	r0, 800b25c <_Balloc+0x20>
 800b252:	4b18      	ldr	r3, [pc, #96]	; (800b2b4 <_Balloc+0x78>)
 800b254:	4818      	ldr	r0, [pc, #96]	; (800b2b8 <_Balloc+0x7c>)
 800b256:	2166      	movs	r1, #102	; 0x66
 800b258:	f000 fdd6 	bl	800be08 <__assert_func>
 800b25c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b260:	6006      	str	r6, [r0, #0]
 800b262:	60c6      	str	r6, [r0, #12]
 800b264:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b266:	68f3      	ldr	r3, [r6, #12]
 800b268:	b183      	cbz	r3, 800b28c <_Balloc+0x50>
 800b26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b272:	b9b8      	cbnz	r0, 800b2a4 <_Balloc+0x68>
 800b274:	2101      	movs	r1, #1
 800b276:	fa01 f605 	lsl.w	r6, r1, r5
 800b27a:	1d72      	adds	r2, r6, #5
 800b27c:	0092      	lsls	r2, r2, #2
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fb60 	bl	800b944 <_calloc_r>
 800b284:	b160      	cbz	r0, 800b2a0 <_Balloc+0x64>
 800b286:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b28a:	e00e      	b.n	800b2aa <_Balloc+0x6e>
 800b28c:	2221      	movs	r2, #33	; 0x21
 800b28e:	2104      	movs	r1, #4
 800b290:	4620      	mov	r0, r4
 800b292:	f000 fb57 	bl	800b944 <_calloc_r>
 800b296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b298:	60f0      	str	r0, [r6, #12]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1e4      	bne.n	800b26a <_Balloc+0x2e>
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}
 800b2a4:	6802      	ldr	r2, [r0, #0]
 800b2a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2b0:	e7f7      	b.n	800b2a2 <_Balloc+0x66>
 800b2b2:	bf00      	nop
 800b2b4:	0800e48d 	.word	0x0800e48d
 800b2b8:	0800e510 	.word	0x0800e510

0800b2bc <_Bfree>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	b976      	cbnz	r6, 800b2e4 <_Bfree+0x28>
 800b2c6:	2010      	movs	r0, #16
 800b2c8:	f7ff ffb0 	bl	800b22c <malloc>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	6268      	str	r0, [r5, #36]	; 0x24
 800b2d0:	b920      	cbnz	r0, 800b2dc <_Bfree+0x20>
 800b2d2:	4b09      	ldr	r3, [pc, #36]	; (800b2f8 <_Bfree+0x3c>)
 800b2d4:	4809      	ldr	r0, [pc, #36]	; (800b2fc <_Bfree+0x40>)
 800b2d6:	218a      	movs	r1, #138	; 0x8a
 800b2d8:	f000 fd96 	bl	800be08 <__assert_func>
 800b2dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2e0:	6006      	str	r6, [r0, #0]
 800b2e2:	60c6      	str	r6, [r0, #12]
 800b2e4:	b13c      	cbz	r4, 800b2f6 <_Bfree+0x3a>
 800b2e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2e8:	6862      	ldr	r2, [r4, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2f0:	6021      	str	r1, [r4, #0]
 800b2f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	0800e48d 	.word	0x0800e48d
 800b2fc:	0800e510 	.word	0x0800e510

0800b300 <__multadd>:
 800b300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b304:	690d      	ldr	r5, [r1, #16]
 800b306:	4607      	mov	r7, r0
 800b308:	460c      	mov	r4, r1
 800b30a:	461e      	mov	r6, r3
 800b30c:	f101 0c14 	add.w	ip, r1, #20
 800b310:	2000      	movs	r0, #0
 800b312:	f8dc 3000 	ldr.w	r3, [ip]
 800b316:	b299      	uxth	r1, r3
 800b318:	fb02 6101 	mla	r1, r2, r1, r6
 800b31c:	0c1e      	lsrs	r6, r3, #16
 800b31e:	0c0b      	lsrs	r3, r1, #16
 800b320:	fb02 3306 	mla	r3, r2, r6, r3
 800b324:	b289      	uxth	r1, r1
 800b326:	3001      	adds	r0, #1
 800b328:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b32c:	4285      	cmp	r5, r0
 800b32e:	f84c 1b04 	str.w	r1, [ip], #4
 800b332:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b336:	dcec      	bgt.n	800b312 <__multadd+0x12>
 800b338:	b30e      	cbz	r6, 800b37e <__multadd+0x7e>
 800b33a:	68a3      	ldr	r3, [r4, #8]
 800b33c:	42ab      	cmp	r3, r5
 800b33e:	dc19      	bgt.n	800b374 <__multadd+0x74>
 800b340:	6861      	ldr	r1, [r4, #4]
 800b342:	4638      	mov	r0, r7
 800b344:	3101      	adds	r1, #1
 800b346:	f7ff ff79 	bl	800b23c <_Balloc>
 800b34a:	4680      	mov	r8, r0
 800b34c:	b928      	cbnz	r0, 800b35a <__multadd+0x5a>
 800b34e:	4602      	mov	r2, r0
 800b350:	4b0c      	ldr	r3, [pc, #48]	; (800b384 <__multadd+0x84>)
 800b352:	480d      	ldr	r0, [pc, #52]	; (800b388 <__multadd+0x88>)
 800b354:	21b5      	movs	r1, #181	; 0xb5
 800b356:	f000 fd57 	bl	800be08 <__assert_func>
 800b35a:	6922      	ldr	r2, [r4, #16]
 800b35c:	3202      	adds	r2, #2
 800b35e:	f104 010c 	add.w	r1, r4, #12
 800b362:	0092      	lsls	r2, r2, #2
 800b364:	300c      	adds	r0, #12
 800b366:	f7fe fc43 	bl	8009bf0 <memcpy>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4638      	mov	r0, r7
 800b36e:	f7ff ffa5 	bl	800b2bc <_Bfree>
 800b372:	4644      	mov	r4, r8
 800b374:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b378:	3501      	adds	r5, #1
 800b37a:	615e      	str	r6, [r3, #20]
 800b37c:	6125      	str	r5, [r4, #16]
 800b37e:	4620      	mov	r0, r4
 800b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b384:	0800e4ff 	.word	0x0800e4ff
 800b388:	0800e510 	.word	0x0800e510

0800b38c <__hi0bits>:
 800b38c:	0c03      	lsrs	r3, r0, #16
 800b38e:	041b      	lsls	r3, r3, #16
 800b390:	b9d3      	cbnz	r3, 800b3c8 <__hi0bits+0x3c>
 800b392:	0400      	lsls	r0, r0, #16
 800b394:	2310      	movs	r3, #16
 800b396:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b39a:	bf04      	itt	eq
 800b39c:	0200      	lsleq	r0, r0, #8
 800b39e:	3308      	addeq	r3, #8
 800b3a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3a4:	bf04      	itt	eq
 800b3a6:	0100      	lsleq	r0, r0, #4
 800b3a8:	3304      	addeq	r3, #4
 800b3aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3ae:	bf04      	itt	eq
 800b3b0:	0080      	lsleq	r0, r0, #2
 800b3b2:	3302      	addeq	r3, #2
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	db05      	blt.n	800b3c4 <__hi0bits+0x38>
 800b3b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3bc:	f103 0301 	add.w	r3, r3, #1
 800b3c0:	bf08      	it	eq
 800b3c2:	2320      	moveq	r3, #32
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	4770      	bx	lr
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	e7e4      	b.n	800b396 <__hi0bits+0xa>

0800b3cc <__lo0bits>:
 800b3cc:	6803      	ldr	r3, [r0, #0]
 800b3ce:	f013 0207 	ands.w	r2, r3, #7
 800b3d2:	4601      	mov	r1, r0
 800b3d4:	d00b      	beq.n	800b3ee <__lo0bits+0x22>
 800b3d6:	07da      	lsls	r2, r3, #31
 800b3d8:	d423      	bmi.n	800b422 <__lo0bits+0x56>
 800b3da:	0798      	lsls	r0, r3, #30
 800b3dc:	bf49      	itett	mi
 800b3de:	085b      	lsrmi	r3, r3, #1
 800b3e0:	089b      	lsrpl	r3, r3, #2
 800b3e2:	2001      	movmi	r0, #1
 800b3e4:	600b      	strmi	r3, [r1, #0]
 800b3e6:	bf5c      	itt	pl
 800b3e8:	600b      	strpl	r3, [r1, #0]
 800b3ea:	2002      	movpl	r0, #2
 800b3ec:	4770      	bx	lr
 800b3ee:	b298      	uxth	r0, r3
 800b3f0:	b9a8      	cbnz	r0, 800b41e <__lo0bits+0x52>
 800b3f2:	0c1b      	lsrs	r3, r3, #16
 800b3f4:	2010      	movs	r0, #16
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	b90a      	cbnz	r2, 800b3fe <__lo0bits+0x32>
 800b3fa:	3008      	adds	r0, #8
 800b3fc:	0a1b      	lsrs	r3, r3, #8
 800b3fe:	071a      	lsls	r2, r3, #28
 800b400:	bf04      	itt	eq
 800b402:	091b      	lsreq	r3, r3, #4
 800b404:	3004      	addeq	r0, #4
 800b406:	079a      	lsls	r2, r3, #30
 800b408:	bf04      	itt	eq
 800b40a:	089b      	lsreq	r3, r3, #2
 800b40c:	3002      	addeq	r0, #2
 800b40e:	07da      	lsls	r2, r3, #31
 800b410:	d403      	bmi.n	800b41a <__lo0bits+0x4e>
 800b412:	085b      	lsrs	r3, r3, #1
 800b414:	f100 0001 	add.w	r0, r0, #1
 800b418:	d005      	beq.n	800b426 <__lo0bits+0x5a>
 800b41a:	600b      	str	r3, [r1, #0]
 800b41c:	4770      	bx	lr
 800b41e:	4610      	mov	r0, r2
 800b420:	e7e9      	b.n	800b3f6 <__lo0bits+0x2a>
 800b422:	2000      	movs	r0, #0
 800b424:	4770      	bx	lr
 800b426:	2020      	movs	r0, #32
 800b428:	4770      	bx	lr
	...

0800b42c <__i2b>:
 800b42c:	b510      	push	{r4, lr}
 800b42e:	460c      	mov	r4, r1
 800b430:	2101      	movs	r1, #1
 800b432:	f7ff ff03 	bl	800b23c <_Balloc>
 800b436:	4602      	mov	r2, r0
 800b438:	b928      	cbnz	r0, 800b446 <__i2b+0x1a>
 800b43a:	4b05      	ldr	r3, [pc, #20]	; (800b450 <__i2b+0x24>)
 800b43c:	4805      	ldr	r0, [pc, #20]	; (800b454 <__i2b+0x28>)
 800b43e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b442:	f000 fce1 	bl	800be08 <__assert_func>
 800b446:	2301      	movs	r3, #1
 800b448:	6144      	str	r4, [r0, #20]
 800b44a:	6103      	str	r3, [r0, #16]
 800b44c:	bd10      	pop	{r4, pc}
 800b44e:	bf00      	nop
 800b450:	0800e4ff 	.word	0x0800e4ff
 800b454:	0800e510 	.word	0x0800e510

0800b458 <__multiply>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	4691      	mov	r9, r2
 800b45e:	690a      	ldr	r2, [r1, #16]
 800b460:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b464:	429a      	cmp	r2, r3
 800b466:	bfb8      	it	lt
 800b468:	460b      	movlt	r3, r1
 800b46a:	460c      	mov	r4, r1
 800b46c:	bfbc      	itt	lt
 800b46e:	464c      	movlt	r4, r9
 800b470:	4699      	movlt	r9, r3
 800b472:	6927      	ldr	r7, [r4, #16]
 800b474:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b478:	68a3      	ldr	r3, [r4, #8]
 800b47a:	6861      	ldr	r1, [r4, #4]
 800b47c:	eb07 060a 	add.w	r6, r7, sl
 800b480:	42b3      	cmp	r3, r6
 800b482:	b085      	sub	sp, #20
 800b484:	bfb8      	it	lt
 800b486:	3101      	addlt	r1, #1
 800b488:	f7ff fed8 	bl	800b23c <_Balloc>
 800b48c:	b930      	cbnz	r0, 800b49c <__multiply+0x44>
 800b48e:	4602      	mov	r2, r0
 800b490:	4b44      	ldr	r3, [pc, #272]	; (800b5a4 <__multiply+0x14c>)
 800b492:	4845      	ldr	r0, [pc, #276]	; (800b5a8 <__multiply+0x150>)
 800b494:	f240 115d 	movw	r1, #349	; 0x15d
 800b498:	f000 fcb6 	bl	800be08 <__assert_func>
 800b49c:	f100 0514 	add.w	r5, r0, #20
 800b4a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4a4:	462b      	mov	r3, r5
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	4543      	cmp	r3, r8
 800b4aa:	d321      	bcc.n	800b4f0 <__multiply+0x98>
 800b4ac:	f104 0314 	add.w	r3, r4, #20
 800b4b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4b4:	f109 0314 	add.w	r3, r9, #20
 800b4b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4bc:	9202      	str	r2, [sp, #8]
 800b4be:	1b3a      	subs	r2, r7, r4
 800b4c0:	3a15      	subs	r2, #21
 800b4c2:	f022 0203 	bic.w	r2, r2, #3
 800b4c6:	3204      	adds	r2, #4
 800b4c8:	f104 0115 	add.w	r1, r4, #21
 800b4cc:	428f      	cmp	r7, r1
 800b4ce:	bf38      	it	cc
 800b4d0:	2204      	movcc	r2, #4
 800b4d2:	9201      	str	r2, [sp, #4]
 800b4d4:	9a02      	ldr	r2, [sp, #8]
 800b4d6:	9303      	str	r3, [sp, #12]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d80c      	bhi.n	800b4f6 <__multiply+0x9e>
 800b4dc:	2e00      	cmp	r6, #0
 800b4de:	dd03      	ble.n	800b4e8 <__multiply+0x90>
 800b4e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d05a      	beq.n	800b59e <__multiply+0x146>
 800b4e8:	6106      	str	r6, [r0, #16]
 800b4ea:	b005      	add	sp, #20
 800b4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f0:	f843 2b04 	str.w	r2, [r3], #4
 800b4f4:	e7d8      	b.n	800b4a8 <__multiply+0x50>
 800b4f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4fa:	f1ba 0f00 	cmp.w	sl, #0
 800b4fe:	d024      	beq.n	800b54a <__multiply+0xf2>
 800b500:	f104 0e14 	add.w	lr, r4, #20
 800b504:	46a9      	mov	r9, r5
 800b506:	f04f 0c00 	mov.w	ip, #0
 800b50a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b50e:	f8d9 1000 	ldr.w	r1, [r9]
 800b512:	fa1f fb82 	uxth.w	fp, r2
 800b516:	b289      	uxth	r1, r1
 800b518:	fb0a 110b 	mla	r1, sl, fp, r1
 800b51c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b520:	f8d9 2000 	ldr.w	r2, [r9]
 800b524:	4461      	add	r1, ip
 800b526:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b52a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b52e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b532:	b289      	uxth	r1, r1
 800b534:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b538:	4577      	cmp	r7, lr
 800b53a:	f849 1b04 	str.w	r1, [r9], #4
 800b53e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b542:	d8e2      	bhi.n	800b50a <__multiply+0xb2>
 800b544:	9a01      	ldr	r2, [sp, #4]
 800b546:	f845 c002 	str.w	ip, [r5, r2]
 800b54a:	9a03      	ldr	r2, [sp, #12]
 800b54c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b550:	3304      	adds	r3, #4
 800b552:	f1b9 0f00 	cmp.w	r9, #0
 800b556:	d020      	beq.n	800b59a <__multiply+0x142>
 800b558:	6829      	ldr	r1, [r5, #0]
 800b55a:	f104 0c14 	add.w	ip, r4, #20
 800b55e:	46ae      	mov	lr, r5
 800b560:	f04f 0a00 	mov.w	sl, #0
 800b564:	f8bc b000 	ldrh.w	fp, [ip]
 800b568:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b56c:	fb09 220b 	mla	r2, r9, fp, r2
 800b570:	4492      	add	sl, r2
 800b572:	b289      	uxth	r1, r1
 800b574:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b578:	f84e 1b04 	str.w	r1, [lr], #4
 800b57c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b580:	f8be 1000 	ldrh.w	r1, [lr]
 800b584:	0c12      	lsrs	r2, r2, #16
 800b586:	fb09 1102 	mla	r1, r9, r2, r1
 800b58a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b58e:	4567      	cmp	r7, ip
 800b590:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b594:	d8e6      	bhi.n	800b564 <__multiply+0x10c>
 800b596:	9a01      	ldr	r2, [sp, #4]
 800b598:	50a9      	str	r1, [r5, r2]
 800b59a:	3504      	adds	r5, #4
 800b59c:	e79a      	b.n	800b4d4 <__multiply+0x7c>
 800b59e:	3e01      	subs	r6, #1
 800b5a0:	e79c      	b.n	800b4dc <__multiply+0x84>
 800b5a2:	bf00      	nop
 800b5a4:	0800e4ff 	.word	0x0800e4ff
 800b5a8:	0800e510 	.word	0x0800e510

0800b5ac <__pow5mult>:
 800b5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b0:	4615      	mov	r5, r2
 800b5b2:	f012 0203 	ands.w	r2, r2, #3
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	460f      	mov	r7, r1
 800b5ba:	d007      	beq.n	800b5cc <__pow5mult+0x20>
 800b5bc:	4c25      	ldr	r4, [pc, #148]	; (800b654 <__pow5mult+0xa8>)
 800b5be:	3a01      	subs	r2, #1
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5c6:	f7ff fe9b 	bl	800b300 <__multadd>
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	10ad      	asrs	r5, r5, #2
 800b5ce:	d03d      	beq.n	800b64c <__pow5mult+0xa0>
 800b5d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5d2:	b97c      	cbnz	r4, 800b5f4 <__pow5mult+0x48>
 800b5d4:	2010      	movs	r0, #16
 800b5d6:	f7ff fe29 	bl	800b22c <malloc>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	6270      	str	r0, [r6, #36]	; 0x24
 800b5de:	b928      	cbnz	r0, 800b5ec <__pow5mult+0x40>
 800b5e0:	4b1d      	ldr	r3, [pc, #116]	; (800b658 <__pow5mult+0xac>)
 800b5e2:	481e      	ldr	r0, [pc, #120]	; (800b65c <__pow5mult+0xb0>)
 800b5e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5e8:	f000 fc0e 	bl	800be08 <__assert_func>
 800b5ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5f0:	6004      	str	r4, [r0, #0]
 800b5f2:	60c4      	str	r4, [r0, #12]
 800b5f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5fc:	b94c      	cbnz	r4, 800b612 <__pow5mult+0x66>
 800b5fe:	f240 2171 	movw	r1, #625	; 0x271
 800b602:	4630      	mov	r0, r6
 800b604:	f7ff ff12 	bl	800b42c <__i2b>
 800b608:	2300      	movs	r3, #0
 800b60a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b60e:	4604      	mov	r4, r0
 800b610:	6003      	str	r3, [r0, #0]
 800b612:	f04f 0900 	mov.w	r9, #0
 800b616:	07eb      	lsls	r3, r5, #31
 800b618:	d50a      	bpl.n	800b630 <__pow5mult+0x84>
 800b61a:	4639      	mov	r1, r7
 800b61c:	4622      	mov	r2, r4
 800b61e:	4630      	mov	r0, r6
 800b620:	f7ff ff1a 	bl	800b458 <__multiply>
 800b624:	4639      	mov	r1, r7
 800b626:	4680      	mov	r8, r0
 800b628:	4630      	mov	r0, r6
 800b62a:	f7ff fe47 	bl	800b2bc <_Bfree>
 800b62e:	4647      	mov	r7, r8
 800b630:	106d      	asrs	r5, r5, #1
 800b632:	d00b      	beq.n	800b64c <__pow5mult+0xa0>
 800b634:	6820      	ldr	r0, [r4, #0]
 800b636:	b938      	cbnz	r0, 800b648 <__pow5mult+0x9c>
 800b638:	4622      	mov	r2, r4
 800b63a:	4621      	mov	r1, r4
 800b63c:	4630      	mov	r0, r6
 800b63e:	f7ff ff0b 	bl	800b458 <__multiply>
 800b642:	6020      	str	r0, [r4, #0]
 800b644:	f8c0 9000 	str.w	r9, [r0]
 800b648:	4604      	mov	r4, r0
 800b64a:	e7e4      	b.n	800b616 <__pow5mult+0x6a>
 800b64c:	4638      	mov	r0, r7
 800b64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b652:	bf00      	nop
 800b654:	0800e660 	.word	0x0800e660
 800b658:	0800e48d 	.word	0x0800e48d
 800b65c:	0800e510 	.word	0x0800e510

0800b660 <__lshift>:
 800b660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b664:	460c      	mov	r4, r1
 800b666:	6849      	ldr	r1, [r1, #4]
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b66e:	68a3      	ldr	r3, [r4, #8]
 800b670:	4607      	mov	r7, r0
 800b672:	4691      	mov	r9, r2
 800b674:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b678:	f108 0601 	add.w	r6, r8, #1
 800b67c:	42b3      	cmp	r3, r6
 800b67e:	db0b      	blt.n	800b698 <__lshift+0x38>
 800b680:	4638      	mov	r0, r7
 800b682:	f7ff fddb 	bl	800b23c <_Balloc>
 800b686:	4605      	mov	r5, r0
 800b688:	b948      	cbnz	r0, 800b69e <__lshift+0x3e>
 800b68a:	4602      	mov	r2, r0
 800b68c:	4b2a      	ldr	r3, [pc, #168]	; (800b738 <__lshift+0xd8>)
 800b68e:	482b      	ldr	r0, [pc, #172]	; (800b73c <__lshift+0xdc>)
 800b690:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b694:	f000 fbb8 	bl	800be08 <__assert_func>
 800b698:	3101      	adds	r1, #1
 800b69a:	005b      	lsls	r3, r3, #1
 800b69c:	e7ee      	b.n	800b67c <__lshift+0x1c>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f100 0114 	add.w	r1, r0, #20
 800b6a4:	f100 0210 	add.w	r2, r0, #16
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	4553      	cmp	r3, sl
 800b6ac:	db37      	blt.n	800b71e <__lshift+0xbe>
 800b6ae:	6920      	ldr	r0, [r4, #16]
 800b6b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6b4:	f104 0314 	add.w	r3, r4, #20
 800b6b8:	f019 091f 	ands.w	r9, r9, #31
 800b6bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b6c4:	d02f      	beq.n	800b726 <__lshift+0xc6>
 800b6c6:	f1c9 0e20 	rsb	lr, r9, #32
 800b6ca:	468a      	mov	sl, r1
 800b6cc:	f04f 0c00 	mov.w	ip, #0
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	fa02 f209 	lsl.w	r2, r2, r9
 800b6d6:	ea42 020c 	orr.w	r2, r2, ip
 800b6da:	f84a 2b04 	str.w	r2, [sl], #4
 800b6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e2:	4298      	cmp	r0, r3
 800b6e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b6e8:	d8f2      	bhi.n	800b6d0 <__lshift+0x70>
 800b6ea:	1b03      	subs	r3, r0, r4
 800b6ec:	3b15      	subs	r3, #21
 800b6ee:	f023 0303 	bic.w	r3, r3, #3
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	f104 0215 	add.w	r2, r4, #21
 800b6f8:	4290      	cmp	r0, r2
 800b6fa:	bf38      	it	cc
 800b6fc:	2304      	movcc	r3, #4
 800b6fe:	f841 c003 	str.w	ip, [r1, r3]
 800b702:	f1bc 0f00 	cmp.w	ip, #0
 800b706:	d001      	beq.n	800b70c <__lshift+0xac>
 800b708:	f108 0602 	add.w	r6, r8, #2
 800b70c:	3e01      	subs	r6, #1
 800b70e:	4638      	mov	r0, r7
 800b710:	612e      	str	r6, [r5, #16]
 800b712:	4621      	mov	r1, r4
 800b714:	f7ff fdd2 	bl	800b2bc <_Bfree>
 800b718:	4628      	mov	r0, r5
 800b71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b722:	3301      	adds	r3, #1
 800b724:	e7c1      	b.n	800b6aa <__lshift+0x4a>
 800b726:	3904      	subs	r1, #4
 800b728:	f853 2b04 	ldr.w	r2, [r3], #4
 800b72c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b730:	4298      	cmp	r0, r3
 800b732:	d8f9      	bhi.n	800b728 <__lshift+0xc8>
 800b734:	e7ea      	b.n	800b70c <__lshift+0xac>
 800b736:	bf00      	nop
 800b738:	0800e4ff 	.word	0x0800e4ff
 800b73c:	0800e510 	.word	0x0800e510

0800b740 <__mcmp>:
 800b740:	b530      	push	{r4, r5, lr}
 800b742:	6902      	ldr	r2, [r0, #16]
 800b744:	690c      	ldr	r4, [r1, #16]
 800b746:	1b12      	subs	r2, r2, r4
 800b748:	d10e      	bne.n	800b768 <__mcmp+0x28>
 800b74a:	f100 0314 	add.w	r3, r0, #20
 800b74e:	3114      	adds	r1, #20
 800b750:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b754:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b758:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b75c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b760:	42a5      	cmp	r5, r4
 800b762:	d003      	beq.n	800b76c <__mcmp+0x2c>
 800b764:	d305      	bcc.n	800b772 <__mcmp+0x32>
 800b766:	2201      	movs	r2, #1
 800b768:	4610      	mov	r0, r2
 800b76a:	bd30      	pop	{r4, r5, pc}
 800b76c:	4283      	cmp	r3, r0
 800b76e:	d3f3      	bcc.n	800b758 <__mcmp+0x18>
 800b770:	e7fa      	b.n	800b768 <__mcmp+0x28>
 800b772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b776:	e7f7      	b.n	800b768 <__mcmp+0x28>

0800b778 <__mdiff>:
 800b778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77c:	460c      	mov	r4, r1
 800b77e:	4606      	mov	r6, r0
 800b780:	4611      	mov	r1, r2
 800b782:	4620      	mov	r0, r4
 800b784:	4690      	mov	r8, r2
 800b786:	f7ff ffdb 	bl	800b740 <__mcmp>
 800b78a:	1e05      	subs	r5, r0, #0
 800b78c:	d110      	bne.n	800b7b0 <__mdiff+0x38>
 800b78e:	4629      	mov	r1, r5
 800b790:	4630      	mov	r0, r6
 800b792:	f7ff fd53 	bl	800b23c <_Balloc>
 800b796:	b930      	cbnz	r0, 800b7a6 <__mdiff+0x2e>
 800b798:	4b3a      	ldr	r3, [pc, #232]	; (800b884 <__mdiff+0x10c>)
 800b79a:	4602      	mov	r2, r0
 800b79c:	f240 2132 	movw	r1, #562	; 0x232
 800b7a0:	4839      	ldr	r0, [pc, #228]	; (800b888 <__mdiff+0x110>)
 800b7a2:	f000 fb31 	bl	800be08 <__assert_func>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b0:	bfa4      	itt	ge
 800b7b2:	4643      	movge	r3, r8
 800b7b4:	46a0      	movge	r8, r4
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7bc:	bfa6      	itte	ge
 800b7be:	461c      	movge	r4, r3
 800b7c0:	2500      	movge	r5, #0
 800b7c2:	2501      	movlt	r5, #1
 800b7c4:	f7ff fd3a 	bl	800b23c <_Balloc>
 800b7c8:	b920      	cbnz	r0, 800b7d4 <__mdiff+0x5c>
 800b7ca:	4b2e      	ldr	r3, [pc, #184]	; (800b884 <__mdiff+0x10c>)
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7d2:	e7e5      	b.n	800b7a0 <__mdiff+0x28>
 800b7d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7d8:	6926      	ldr	r6, [r4, #16]
 800b7da:	60c5      	str	r5, [r0, #12]
 800b7dc:	f104 0914 	add.w	r9, r4, #20
 800b7e0:	f108 0514 	add.w	r5, r8, #20
 800b7e4:	f100 0e14 	add.w	lr, r0, #20
 800b7e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7f0:	f108 0210 	add.w	r2, r8, #16
 800b7f4:	46f2      	mov	sl, lr
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b800:	fa1f f883 	uxth.w	r8, r3
 800b804:	fa11 f18b 	uxtah	r1, r1, fp
 800b808:	0c1b      	lsrs	r3, r3, #16
 800b80a:	eba1 0808 	sub.w	r8, r1, r8
 800b80e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b812:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b816:	fa1f f888 	uxth.w	r8, r8
 800b81a:	1419      	asrs	r1, r3, #16
 800b81c:	454e      	cmp	r6, r9
 800b81e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b822:	f84a 3b04 	str.w	r3, [sl], #4
 800b826:	d8e7      	bhi.n	800b7f8 <__mdiff+0x80>
 800b828:	1b33      	subs	r3, r6, r4
 800b82a:	3b15      	subs	r3, #21
 800b82c:	f023 0303 	bic.w	r3, r3, #3
 800b830:	3304      	adds	r3, #4
 800b832:	3415      	adds	r4, #21
 800b834:	42a6      	cmp	r6, r4
 800b836:	bf38      	it	cc
 800b838:	2304      	movcc	r3, #4
 800b83a:	441d      	add	r5, r3
 800b83c:	4473      	add	r3, lr
 800b83e:	469e      	mov	lr, r3
 800b840:	462e      	mov	r6, r5
 800b842:	4566      	cmp	r6, ip
 800b844:	d30e      	bcc.n	800b864 <__mdiff+0xec>
 800b846:	f10c 0203 	add.w	r2, ip, #3
 800b84a:	1b52      	subs	r2, r2, r5
 800b84c:	f022 0203 	bic.w	r2, r2, #3
 800b850:	3d03      	subs	r5, #3
 800b852:	45ac      	cmp	ip, r5
 800b854:	bf38      	it	cc
 800b856:	2200      	movcc	r2, #0
 800b858:	441a      	add	r2, r3
 800b85a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b85e:	b17b      	cbz	r3, 800b880 <__mdiff+0x108>
 800b860:	6107      	str	r7, [r0, #16]
 800b862:	e7a3      	b.n	800b7ac <__mdiff+0x34>
 800b864:	f856 8b04 	ldr.w	r8, [r6], #4
 800b868:	fa11 f288 	uxtah	r2, r1, r8
 800b86c:	1414      	asrs	r4, r2, #16
 800b86e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b872:	b292      	uxth	r2, r2
 800b874:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b878:	f84e 2b04 	str.w	r2, [lr], #4
 800b87c:	1421      	asrs	r1, r4, #16
 800b87e:	e7e0      	b.n	800b842 <__mdiff+0xca>
 800b880:	3f01      	subs	r7, #1
 800b882:	e7ea      	b.n	800b85a <__mdiff+0xe2>
 800b884:	0800e4ff 	.word	0x0800e4ff
 800b888:	0800e510 	.word	0x0800e510

0800b88c <__d2b>:
 800b88c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b890:	4689      	mov	r9, r1
 800b892:	2101      	movs	r1, #1
 800b894:	ec57 6b10 	vmov	r6, r7, d0
 800b898:	4690      	mov	r8, r2
 800b89a:	f7ff fccf 	bl	800b23c <_Balloc>
 800b89e:	4604      	mov	r4, r0
 800b8a0:	b930      	cbnz	r0, 800b8b0 <__d2b+0x24>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	4b25      	ldr	r3, [pc, #148]	; (800b93c <__d2b+0xb0>)
 800b8a6:	4826      	ldr	r0, [pc, #152]	; (800b940 <__d2b+0xb4>)
 800b8a8:	f240 310a 	movw	r1, #778	; 0x30a
 800b8ac:	f000 faac 	bl	800be08 <__assert_func>
 800b8b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b8b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8b8:	bb35      	cbnz	r5, 800b908 <__d2b+0x7c>
 800b8ba:	2e00      	cmp	r6, #0
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	d028      	beq.n	800b912 <__d2b+0x86>
 800b8c0:	4668      	mov	r0, sp
 800b8c2:	9600      	str	r6, [sp, #0]
 800b8c4:	f7ff fd82 	bl	800b3cc <__lo0bits>
 800b8c8:	9900      	ldr	r1, [sp, #0]
 800b8ca:	b300      	cbz	r0, 800b90e <__d2b+0x82>
 800b8cc:	9a01      	ldr	r2, [sp, #4]
 800b8ce:	f1c0 0320 	rsb	r3, r0, #32
 800b8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d6:	430b      	orrs	r3, r1
 800b8d8:	40c2      	lsrs	r2, r0
 800b8da:	6163      	str	r3, [r4, #20]
 800b8dc:	9201      	str	r2, [sp, #4]
 800b8de:	9b01      	ldr	r3, [sp, #4]
 800b8e0:	61a3      	str	r3, [r4, #24]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bf14      	ite	ne
 800b8e6:	2202      	movne	r2, #2
 800b8e8:	2201      	moveq	r2, #1
 800b8ea:	6122      	str	r2, [r4, #16]
 800b8ec:	b1d5      	cbz	r5, 800b924 <__d2b+0x98>
 800b8ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8f2:	4405      	add	r5, r0
 800b8f4:	f8c9 5000 	str.w	r5, [r9]
 800b8f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8fc:	f8c8 0000 	str.w	r0, [r8]
 800b900:	4620      	mov	r0, r4
 800b902:	b003      	add	sp, #12
 800b904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b90c:	e7d5      	b.n	800b8ba <__d2b+0x2e>
 800b90e:	6161      	str	r1, [r4, #20]
 800b910:	e7e5      	b.n	800b8de <__d2b+0x52>
 800b912:	a801      	add	r0, sp, #4
 800b914:	f7ff fd5a 	bl	800b3cc <__lo0bits>
 800b918:	9b01      	ldr	r3, [sp, #4]
 800b91a:	6163      	str	r3, [r4, #20]
 800b91c:	2201      	movs	r2, #1
 800b91e:	6122      	str	r2, [r4, #16]
 800b920:	3020      	adds	r0, #32
 800b922:	e7e3      	b.n	800b8ec <__d2b+0x60>
 800b924:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b928:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b92c:	f8c9 0000 	str.w	r0, [r9]
 800b930:	6918      	ldr	r0, [r3, #16]
 800b932:	f7ff fd2b 	bl	800b38c <__hi0bits>
 800b936:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b93a:	e7df      	b.n	800b8fc <__d2b+0x70>
 800b93c:	0800e4ff 	.word	0x0800e4ff
 800b940:	0800e510 	.word	0x0800e510

0800b944 <_calloc_r>:
 800b944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b946:	fba1 2402 	umull	r2, r4, r1, r2
 800b94a:	b94c      	cbnz	r4, 800b960 <_calloc_r+0x1c>
 800b94c:	4611      	mov	r1, r2
 800b94e:	9201      	str	r2, [sp, #4]
 800b950:	f000 f87a 	bl	800ba48 <_malloc_r>
 800b954:	9a01      	ldr	r2, [sp, #4]
 800b956:	4605      	mov	r5, r0
 800b958:	b930      	cbnz	r0, 800b968 <_calloc_r+0x24>
 800b95a:	4628      	mov	r0, r5
 800b95c:	b003      	add	sp, #12
 800b95e:	bd30      	pop	{r4, r5, pc}
 800b960:	220c      	movs	r2, #12
 800b962:	6002      	str	r2, [r0, #0]
 800b964:	2500      	movs	r5, #0
 800b966:	e7f8      	b.n	800b95a <_calloc_r+0x16>
 800b968:	4621      	mov	r1, r4
 800b96a:	f7fe f94f 	bl	8009c0c <memset>
 800b96e:	e7f4      	b.n	800b95a <_calloc_r+0x16>

0800b970 <_free_r>:
 800b970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b972:	2900      	cmp	r1, #0
 800b974:	d044      	beq.n	800ba00 <_free_r+0x90>
 800b976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b97a:	9001      	str	r0, [sp, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f1a1 0404 	sub.w	r4, r1, #4
 800b982:	bfb8      	it	lt
 800b984:	18e4      	addlt	r4, r4, r3
 800b986:	f000 fa9b 	bl	800bec0 <__malloc_lock>
 800b98a:	4a1e      	ldr	r2, [pc, #120]	; (800ba04 <_free_r+0x94>)
 800b98c:	9801      	ldr	r0, [sp, #4]
 800b98e:	6813      	ldr	r3, [r2, #0]
 800b990:	b933      	cbnz	r3, 800b9a0 <_free_r+0x30>
 800b992:	6063      	str	r3, [r4, #4]
 800b994:	6014      	str	r4, [r2, #0]
 800b996:	b003      	add	sp, #12
 800b998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b99c:	f000 ba96 	b.w	800becc <__malloc_unlock>
 800b9a0:	42a3      	cmp	r3, r4
 800b9a2:	d908      	bls.n	800b9b6 <_free_r+0x46>
 800b9a4:	6825      	ldr	r5, [r4, #0]
 800b9a6:	1961      	adds	r1, r4, r5
 800b9a8:	428b      	cmp	r3, r1
 800b9aa:	bf01      	itttt	eq
 800b9ac:	6819      	ldreq	r1, [r3, #0]
 800b9ae:	685b      	ldreq	r3, [r3, #4]
 800b9b0:	1949      	addeq	r1, r1, r5
 800b9b2:	6021      	streq	r1, [r4, #0]
 800b9b4:	e7ed      	b.n	800b992 <_free_r+0x22>
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	b10b      	cbz	r3, 800b9c0 <_free_r+0x50>
 800b9bc:	42a3      	cmp	r3, r4
 800b9be:	d9fa      	bls.n	800b9b6 <_free_r+0x46>
 800b9c0:	6811      	ldr	r1, [r2, #0]
 800b9c2:	1855      	adds	r5, r2, r1
 800b9c4:	42a5      	cmp	r5, r4
 800b9c6:	d10b      	bne.n	800b9e0 <_free_r+0x70>
 800b9c8:	6824      	ldr	r4, [r4, #0]
 800b9ca:	4421      	add	r1, r4
 800b9cc:	1854      	adds	r4, r2, r1
 800b9ce:	42a3      	cmp	r3, r4
 800b9d0:	6011      	str	r1, [r2, #0]
 800b9d2:	d1e0      	bne.n	800b996 <_free_r+0x26>
 800b9d4:	681c      	ldr	r4, [r3, #0]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	6053      	str	r3, [r2, #4]
 800b9da:	4421      	add	r1, r4
 800b9dc:	6011      	str	r1, [r2, #0]
 800b9de:	e7da      	b.n	800b996 <_free_r+0x26>
 800b9e0:	d902      	bls.n	800b9e8 <_free_r+0x78>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	6003      	str	r3, [r0, #0]
 800b9e6:	e7d6      	b.n	800b996 <_free_r+0x26>
 800b9e8:	6825      	ldr	r5, [r4, #0]
 800b9ea:	1961      	adds	r1, r4, r5
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	bf04      	itt	eq
 800b9f0:	6819      	ldreq	r1, [r3, #0]
 800b9f2:	685b      	ldreq	r3, [r3, #4]
 800b9f4:	6063      	str	r3, [r4, #4]
 800b9f6:	bf04      	itt	eq
 800b9f8:	1949      	addeq	r1, r1, r5
 800b9fa:	6021      	streq	r1, [r4, #0]
 800b9fc:	6054      	str	r4, [r2, #4]
 800b9fe:	e7ca      	b.n	800b996 <_free_r+0x26>
 800ba00:	b003      	add	sp, #12
 800ba02:	bd30      	pop	{r4, r5, pc}
 800ba04:	20000548 	.word	0x20000548

0800ba08 <sbrk_aligned>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	4e0e      	ldr	r6, [pc, #56]	; (800ba44 <sbrk_aligned+0x3c>)
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	6831      	ldr	r1, [r6, #0]
 800ba10:	4605      	mov	r5, r0
 800ba12:	b911      	cbnz	r1, 800ba1a <sbrk_aligned+0x12>
 800ba14:	f000 f9e8 	bl	800bde8 <_sbrk_r>
 800ba18:	6030      	str	r0, [r6, #0]
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 f9e3 	bl	800bde8 <_sbrk_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d00a      	beq.n	800ba3c <sbrk_aligned+0x34>
 800ba26:	1cc4      	adds	r4, r0, #3
 800ba28:	f024 0403 	bic.w	r4, r4, #3
 800ba2c:	42a0      	cmp	r0, r4
 800ba2e:	d007      	beq.n	800ba40 <sbrk_aligned+0x38>
 800ba30:	1a21      	subs	r1, r4, r0
 800ba32:	4628      	mov	r0, r5
 800ba34:	f000 f9d8 	bl	800bde8 <_sbrk_r>
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d101      	bne.n	800ba40 <sbrk_aligned+0x38>
 800ba3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ba40:	4620      	mov	r0, r4
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	2000054c 	.word	0x2000054c

0800ba48 <_malloc_r>:
 800ba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4c:	1ccd      	adds	r5, r1, #3
 800ba4e:	f025 0503 	bic.w	r5, r5, #3
 800ba52:	3508      	adds	r5, #8
 800ba54:	2d0c      	cmp	r5, #12
 800ba56:	bf38      	it	cc
 800ba58:	250c      	movcc	r5, #12
 800ba5a:	2d00      	cmp	r5, #0
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	db01      	blt.n	800ba64 <_malloc_r+0x1c>
 800ba60:	42a9      	cmp	r1, r5
 800ba62:	d905      	bls.n	800ba70 <_malloc_r+0x28>
 800ba64:	230c      	movs	r3, #12
 800ba66:	603b      	str	r3, [r7, #0]
 800ba68:	2600      	movs	r6, #0
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba70:	4e2e      	ldr	r6, [pc, #184]	; (800bb2c <_malloc_r+0xe4>)
 800ba72:	f000 fa25 	bl	800bec0 <__malloc_lock>
 800ba76:	6833      	ldr	r3, [r6, #0]
 800ba78:	461c      	mov	r4, r3
 800ba7a:	bb34      	cbnz	r4, 800baca <_malloc_r+0x82>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4638      	mov	r0, r7
 800ba80:	f7ff ffc2 	bl	800ba08 <sbrk_aligned>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	4604      	mov	r4, r0
 800ba88:	d14d      	bne.n	800bb26 <_malloc_r+0xde>
 800ba8a:	6834      	ldr	r4, [r6, #0]
 800ba8c:	4626      	mov	r6, r4
 800ba8e:	2e00      	cmp	r6, #0
 800ba90:	d140      	bne.n	800bb14 <_malloc_r+0xcc>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	4631      	mov	r1, r6
 800ba96:	4638      	mov	r0, r7
 800ba98:	eb04 0803 	add.w	r8, r4, r3
 800ba9c:	f000 f9a4 	bl	800bde8 <_sbrk_r>
 800baa0:	4580      	cmp	r8, r0
 800baa2:	d13a      	bne.n	800bb1a <_malloc_r+0xd2>
 800baa4:	6821      	ldr	r1, [r4, #0]
 800baa6:	3503      	adds	r5, #3
 800baa8:	1a6d      	subs	r5, r5, r1
 800baaa:	f025 0503 	bic.w	r5, r5, #3
 800baae:	3508      	adds	r5, #8
 800bab0:	2d0c      	cmp	r5, #12
 800bab2:	bf38      	it	cc
 800bab4:	250c      	movcc	r5, #12
 800bab6:	4629      	mov	r1, r5
 800bab8:	4638      	mov	r0, r7
 800baba:	f7ff ffa5 	bl	800ba08 <sbrk_aligned>
 800babe:	3001      	adds	r0, #1
 800bac0:	d02b      	beq.n	800bb1a <_malloc_r+0xd2>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	442b      	add	r3, r5
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	e00e      	b.n	800bae8 <_malloc_r+0xa0>
 800baca:	6822      	ldr	r2, [r4, #0]
 800bacc:	1b52      	subs	r2, r2, r5
 800bace:	d41e      	bmi.n	800bb0e <_malloc_r+0xc6>
 800bad0:	2a0b      	cmp	r2, #11
 800bad2:	d916      	bls.n	800bb02 <_malloc_r+0xba>
 800bad4:	1961      	adds	r1, r4, r5
 800bad6:	42a3      	cmp	r3, r4
 800bad8:	6025      	str	r5, [r4, #0]
 800bada:	bf18      	it	ne
 800badc:	6059      	strne	r1, [r3, #4]
 800bade:	6863      	ldr	r3, [r4, #4]
 800bae0:	bf08      	it	eq
 800bae2:	6031      	streq	r1, [r6, #0]
 800bae4:	5162      	str	r2, [r4, r5]
 800bae6:	604b      	str	r3, [r1, #4]
 800bae8:	4638      	mov	r0, r7
 800baea:	f104 060b 	add.w	r6, r4, #11
 800baee:	f000 f9ed 	bl	800becc <__malloc_unlock>
 800baf2:	f026 0607 	bic.w	r6, r6, #7
 800baf6:	1d23      	adds	r3, r4, #4
 800baf8:	1af2      	subs	r2, r6, r3
 800bafa:	d0b6      	beq.n	800ba6a <_malloc_r+0x22>
 800bafc:	1b9b      	subs	r3, r3, r6
 800bafe:	50a3      	str	r3, [r4, r2]
 800bb00:	e7b3      	b.n	800ba6a <_malloc_r+0x22>
 800bb02:	6862      	ldr	r2, [r4, #4]
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	bf0c      	ite	eq
 800bb08:	6032      	streq	r2, [r6, #0]
 800bb0a:	605a      	strne	r2, [r3, #4]
 800bb0c:	e7ec      	b.n	800bae8 <_malloc_r+0xa0>
 800bb0e:	4623      	mov	r3, r4
 800bb10:	6864      	ldr	r4, [r4, #4]
 800bb12:	e7b2      	b.n	800ba7a <_malloc_r+0x32>
 800bb14:	4634      	mov	r4, r6
 800bb16:	6876      	ldr	r6, [r6, #4]
 800bb18:	e7b9      	b.n	800ba8e <_malloc_r+0x46>
 800bb1a:	230c      	movs	r3, #12
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	4638      	mov	r0, r7
 800bb20:	f000 f9d4 	bl	800becc <__malloc_unlock>
 800bb24:	e7a1      	b.n	800ba6a <_malloc_r+0x22>
 800bb26:	6025      	str	r5, [r4, #0]
 800bb28:	e7de      	b.n	800bae8 <_malloc_r+0xa0>
 800bb2a:	bf00      	nop
 800bb2c:	20000548 	.word	0x20000548

0800bb30 <__ssputs_r>:
 800bb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb34:	688e      	ldr	r6, [r1, #8]
 800bb36:	429e      	cmp	r6, r3
 800bb38:	4682      	mov	sl, r0
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	4690      	mov	r8, r2
 800bb3e:	461f      	mov	r7, r3
 800bb40:	d838      	bhi.n	800bbb4 <__ssputs_r+0x84>
 800bb42:	898a      	ldrh	r2, [r1, #12]
 800bb44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb48:	d032      	beq.n	800bbb0 <__ssputs_r+0x80>
 800bb4a:	6825      	ldr	r5, [r4, #0]
 800bb4c:	6909      	ldr	r1, [r1, #16]
 800bb4e:	eba5 0901 	sub.w	r9, r5, r1
 800bb52:	6965      	ldr	r5, [r4, #20]
 800bb54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	444b      	add	r3, r9
 800bb60:	106d      	asrs	r5, r5, #1
 800bb62:	429d      	cmp	r5, r3
 800bb64:	bf38      	it	cc
 800bb66:	461d      	movcc	r5, r3
 800bb68:	0553      	lsls	r3, r2, #21
 800bb6a:	d531      	bpl.n	800bbd0 <__ssputs_r+0xa0>
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	f7ff ff6b 	bl	800ba48 <_malloc_r>
 800bb72:	4606      	mov	r6, r0
 800bb74:	b950      	cbnz	r0, 800bb8c <__ssputs_r+0x5c>
 800bb76:	230c      	movs	r3, #12
 800bb78:	f8ca 3000 	str.w	r3, [sl]
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb82:	81a3      	strh	r3, [r4, #12]
 800bb84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb8c:	6921      	ldr	r1, [r4, #16]
 800bb8e:	464a      	mov	r2, r9
 800bb90:	f7fe f82e 	bl	8009bf0 <memcpy>
 800bb94:	89a3      	ldrh	r3, [r4, #12]
 800bb96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb9e:	81a3      	strh	r3, [r4, #12]
 800bba0:	6126      	str	r6, [r4, #16]
 800bba2:	6165      	str	r5, [r4, #20]
 800bba4:	444e      	add	r6, r9
 800bba6:	eba5 0509 	sub.w	r5, r5, r9
 800bbaa:	6026      	str	r6, [r4, #0]
 800bbac:	60a5      	str	r5, [r4, #8]
 800bbae:	463e      	mov	r6, r7
 800bbb0:	42be      	cmp	r6, r7
 800bbb2:	d900      	bls.n	800bbb6 <__ssputs_r+0x86>
 800bbb4:	463e      	mov	r6, r7
 800bbb6:	6820      	ldr	r0, [r4, #0]
 800bbb8:	4632      	mov	r2, r6
 800bbba:	4641      	mov	r1, r8
 800bbbc:	f000 f966 	bl	800be8c <memmove>
 800bbc0:	68a3      	ldr	r3, [r4, #8]
 800bbc2:	1b9b      	subs	r3, r3, r6
 800bbc4:	60a3      	str	r3, [r4, #8]
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	4433      	add	r3, r6
 800bbca:	6023      	str	r3, [r4, #0]
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e7db      	b.n	800bb88 <__ssputs_r+0x58>
 800bbd0:	462a      	mov	r2, r5
 800bbd2:	f000 f981 	bl	800bed8 <_realloc_r>
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d1e1      	bne.n	800bba0 <__ssputs_r+0x70>
 800bbdc:	6921      	ldr	r1, [r4, #16]
 800bbde:	4650      	mov	r0, sl
 800bbe0:	f7ff fec6 	bl	800b970 <_free_r>
 800bbe4:	e7c7      	b.n	800bb76 <__ssputs_r+0x46>
	...

0800bbe8 <_svfiprintf_r>:
 800bbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	4698      	mov	r8, r3
 800bbee:	898b      	ldrh	r3, [r1, #12]
 800bbf0:	061b      	lsls	r3, r3, #24
 800bbf2:	b09d      	sub	sp, #116	; 0x74
 800bbf4:	4607      	mov	r7, r0
 800bbf6:	460d      	mov	r5, r1
 800bbf8:	4614      	mov	r4, r2
 800bbfa:	d50e      	bpl.n	800bc1a <_svfiprintf_r+0x32>
 800bbfc:	690b      	ldr	r3, [r1, #16]
 800bbfe:	b963      	cbnz	r3, 800bc1a <_svfiprintf_r+0x32>
 800bc00:	2140      	movs	r1, #64	; 0x40
 800bc02:	f7ff ff21 	bl	800ba48 <_malloc_r>
 800bc06:	6028      	str	r0, [r5, #0]
 800bc08:	6128      	str	r0, [r5, #16]
 800bc0a:	b920      	cbnz	r0, 800bc16 <_svfiprintf_r+0x2e>
 800bc0c:	230c      	movs	r3, #12
 800bc0e:	603b      	str	r3, [r7, #0]
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc14:	e0d1      	b.n	800bdba <_svfiprintf_r+0x1d2>
 800bc16:	2340      	movs	r3, #64	; 0x40
 800bc18:	616b      	str	r3, [r5, #20]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc1e:	2320      	movs	r3, #32
 800bc20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc24:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc28:	2330      	movs	r3, #48	; 0x30
 800bc2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bdd4 <_svfiprintf_r+0x1ec>
 800bc2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc32:	f04f 0901 	mov.w	r9, #1
 800bc36:	4623      	mov	r3, r4
 800bc38:	469a      	mov	sl, r3
 800bc3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc3e:	b10a      	cbz	r2, 800bc44 <_svfiprintf_r+0x5c>
 800bc40:	2a25      	cmp	r2, #37	; 0x25
 800bc42:	d1f9      	bne.n	800bc38 <_svfiprintf_r+0x50>
 800bc44:	ebba 0b04 	subs.w	fp, sl, r4
 800bc48:	d00b      	beq.n	800bc62 <_svfiprintf_r+0x7a>
 800bc4a:	465b      	mov	r3, fp
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4638      	mov	r0, r7
 800bc52:	f7ff ff6d 	bl	800bb30 <__ssputs_r>
 800bc56:	3001      	adds	r0, #1
 800bc58:	f000 80aa 	beq.w	800bdb0 <_svfiprintf_r+0x1c8>
 800bc5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc5e:	445a      	add	r2, fp
 800bc60:	9209      	str	r2, [sp, #36]	; 0x24
 800bc62:	f89a 3000 	ldrb.w	r3, [sl]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 80a2 	beq.w	800bdb0 <_svfiprintf_r+0x1c8>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc76:	f10a 0a01 	add.w	sl, sl, #1
 800bc7a:	9304      	str	r3, [sp, #16]
 800bc7c:	9307      	str	r3, [sp, #28]
 800bc7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc82:	931a      	str	r3, [sp, #104]	; 0x68
 800bc84:	4654      	mov	r4, sl
 800bc86:	2205      	movs	r2, #5
 800bc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8c:	4851      	ldr	r0, [pc, #324]	; (800bdd4 <_svfiprintf_r+0x1ec>)
 800bc8e:	f7f4 fa7f 	bl	8000190 <memchr>
 800bc92:	9a04      	ldr	r2, [sp, #16]
 800bc94:	b9d8      	cbnz	r0, 800bcce <_svfiprintf_r+0xe6>
 800bc96:	06d0      	lsls	r0, r2, #27
 800bc98:	bf44      	itt	mi
 800bc9a:	2320      	movmi	r3, #32
 800bc9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bca0:	0711      	lsls	r1, r2, #28
 800bca2:	bf44      	itt	mi
 800bca4:	232b      	movmi	r3, #43	; 0x2b
 800bca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcaa:	f89a 3000 	ldrb.w	r3, [sl]
 800bcae:	2b2a      	cmp	r3, #42	; 0x2a
 800bcb0:	d015      	beq.n	800bcde <_svfiprintf_r+0xf6>
 800bcb2:	9a07      	ldr	r2, [sp, #28]
 800bcb4:	4654      	mov	r4, sl
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	f04f 0c0a 	mov.w	ip, #10
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcc2:	3b30      	subs	r3, #48	; 0x30
 800bcc4:	2b09      	cmp	r3, #9
 800bcc6:	d94e      	bls.n	800bd66 <_svfiprintf_r+0x17e>
 800bcc8:	b1b0      	cbz	r0, 800bcf8 <_svfiprintf_r+0x110>
 800bcca:	9207      	str	r2, [sp, #28]
 800bccc:	e014      	b.n	800bcf8 <_svfiprintf_r+0x110>
 800bcce:	eba0 0308 	sub.w	r3, r0, r8
 800bcd2:	fa09 f303 	lsl.w	r3, r9, r3
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	9304      	str	r3, [sp, #16]
 800bcda:	46a2      	mov	sl, r4
 800bcdc:	e7d2      	b.n	800bc84 <_svfiprintf_r+0x9c>
 800bcde:	9b03      	ldr	r3, [sp, #12]
 800bce0:	1d19      	adds	r1, r3, #4
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	9103      	str	r1, [sp, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bfbb      	ittet	lt
 800bcea:	425b      	neglt	r3, r3
 800bcec:	f042 0202 	orrlt.w	r2, r2, #2
 800bcf0:	9307      	strge	r3, [sp, #28]
 800bcf2:	9307      	strlt	r3, [sp, #28]
 800bcf4:	bfb8      	it	lt
 800bcf6:	9204      	strlt	r2, [sp, #16]
 800bcf8:	7823      	ldrb	r3, [r4, #0]
 800bcfa:	2b2e      	cmp	r3, #46	; 0x2e
 800bcfc:	d10c      	bne.n	800bd18 <_svfiprintf_r+0x130>
 800bcfe:	7863      	ldrb	r3, [r4, #1]
 800bd00:	2b2a      	cmp	r3, #42	; 0x2a
 800bd02:	d135      	bne.n	800bd70 <_svfiprintf_r+0x188>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	1d1a      	adds	r2, r3, #4
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	9203      	str	r2, [sp, #12]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	bfb8      	it	lt
 800bd10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bd14:	3402      	adds	r4, #2
 800bd16:	9305      	str	r3, [sp, #20]
 800bd18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bde4 <_svfiprintf_r+0x1fc>
 800bd1c:	7821      	ldrb	r1, [r4, #0]
 800bd1e:	2203      	movs	r2, #3
 800bd20:	4650      	mov	r0, sl
 800bd22:	f7f4 fa35 	bl	8000190 <memchr>
 800bd26:	b140      	cbz	r0, 800bd3a <_svfiprintf_r+0x152>
 800bd28:	2340      	movs	r3, #64	; 0x40
 800bd2a:	eba0 000a 	sub.w	r0, r0, sl
 800bd2e:	fa03 f000 	lsl.w	r0, r3, r0
 800bd32:	9b04      	ldr	r3, [sp, #16]
 800bd34:	4303      	orrs	r3, r0
 800bd36:	3401      	adds	r4, #1
 800bd38:	9304      	str	r3, [sp, #16]
 800bd3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd3e:	4826      	ldr	r0, [pc, #152]	; (800bdd8 <_svfiprintf_r+0x1f0>)
 800bd40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd44:	2206      	movs	r2, #6
 800bd46:	f7f4 fa23 	bl	8000190 <memchr>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d038      	beq.n	800bdc0 <_svfiprintf_r+0x1d8>
 800bd4e:	4b23      	ldr	r3, [pc, #140]	; (800bddc <_svfiprintf_r+0x1f4>)
 800bd50:	bb1b      	cbnz	r3, 800bd9a <_svfiprintf_r+0x1b2>
 800bd52:	9b03      	ldr	r3, [sp, #12]
 800bd54:	3307      	adds	r3, #7
 800bd56:	f023 0307 	bic.w	r3, r3, #7
 800bd5a:	3308      	adds	r3, #8
 800bd5c:	9303      	str	r3, [sp, #12]
 800bd5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd60:	4433      	add	r3, r6
 800bd62:	9309      	str	r3, [sp, #36]	; 0x24
 800bd64:	e767      	b.n	800bc36 <_svfiprintf_r+0x4e>
 800bd66:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	2001      	movs	r0, #1
 800bd6e:	e7a5      	b.n	800bcbc <_svfiprintf_r+0xd4>
 800bd70:	2300      	movs	r3, #0
 800bd72:	3401      	adds	r4, #1
 800bd74:	9305      	str	r3, [sp, #20]
 800bd76:	4619      	mov	r1, r3
 800bd78:	f04f 0c0a 	mov.w	ip, #10
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd82:	3a30      	subs	r2, #48	; 0x30
 800bd84:	2a09      	cmp	r2, #9
 800bd86:	d903      	bls.n	800bd90 <_svfiprintf_r+0x1a8>
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d0c5      	beq.n	800bd18 <_svfiprintf_r+0x130>
 800bd8c:	9105      	str	r1, [sp, #20]
 800bd8e:	e7c3      	b.n	800bd18 <_svfiprintf_r+0x130>
 800bd90:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd94:	4604      	mov	r4, r0
 800bd96:	2301      	movs	r3, #1
 800bd98:	e7f0      	b.n	800bd7c <_svfiprintf_r+0x194>
 800bd9a:	ab03      	add	r3, sp, #12
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	462a      	mov	r2, r5
 800bda0:	4b0f      	ldr	r3, [pc, #60]	; (800bde0 <_svfiprintf_r+0x1f8>)
 800bda2:	a904      	add	r1, sp, #16
 800bda4:	4638      	mov	r0, r7
 800bda6:	f7fd ffd9 	bl	8009d5c <_printf_float>
 800bdaa:	1c42      	adds	r2, r0, #1
 800bdac:	4606      	mov	r6, r0
 800bdae:	d1d6      	bne.n	800bd5e <_svfiprintf_r+0x176>
 800bdb0:	89ab      	ldrh	r3, [r5, #12]
 800bdb2:	065b      	lsls	r3, r3, #25
 800bdb4:	f53f af2c 	bmi.w	800bc10 <_svfiprintf_r+0x28>
 800bdb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdba:	b01d      	add	sp, #116	; 0x74
 800bdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc0:	ab03      	add	r3, sp, #12
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	462a      	mov	r2, r5
 800bdc6:	4b06      	ldr	r3, [pc, #24]	; (800bde0 <_svfiprintf_r+0x1f8>)
 800bdc8:	a904      	add	r1, sp, #16
 800bdca:	4638      	mov	r0, r7
 800bdcc:	f7fe fa6a 	bl	800a2a4 <_printf_i>
 800bdd0:	e7eb      	b.n	800bdaa <_svfiprintf_r+0x1c2>
 800bdd2:	bf00      	nop
 800bdd4:	0800e66c 	.word	0x0800e66c
 800bdd8:	0800e676 	.word	0x0800e676
 800bddc:	08009d5d 	.word	0x08009d5d
 800bde0:	0800bb31 	.word	0x0800bb31
 800bde4:	0800e672 	.word	0x0800e672

0800bde8 <_sbrk_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d06      	ldr	r5, [pc, #24]	; (800be04 <_sbrk_r+0x1c>)
 800bdec:	2300      	movs	r3, #0
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	602b      	str	r3, [r5, #0]
 800bdf4:	f7f8 fcaa 	bl	800474c <_sbrk>
 800bdf8:	1c43      	adds	r3, r0, #1
 800bdfa:	d102      	bne.n	800be02 <_sbrk_r+0x1a>
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	b103      	cbz	r3, 800be02 <_sbrk_r+0x1a>
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	bd38      	pop	{r3, r4, r5, pc}
 800be04:	20000550 	.word	0x20000550

0800be08 <__assert_func>:
 800be08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be0a:	4614      	mov	r4, r2
 800be0c:	461a      	mov	r2, r3
 800be0e:	4b09      	ldr	r3, [pc, #36]	; (800be34 <__assert_func+0x2c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4605      	mov	r5, r0
 800be14:	68d8      	ldr	r0, [r3, #12]
 800be16:	b14c      	cbz	r4, 800be2c <__assert_func+0x24>
 800be18:	4b07      	ldr	r3, [pc, #28]	; (800be38 <__assert_func+0x30>)
 800be1a:	9100      	str	r1, [sp, #0]
 800be1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be20:	4906      	ldr	r1, [pc, #24]	; (800be3c <__assert_func+0x34>)
 800be22:	462b      	mov	r3, r5
 800be24:	f000 f80e 	bl	800be44 <fiprintf>
 800be28:	f000 faac 	bl	800c384 <abort>
 800be2c:	4b04      	ldr	r3, [pc, #16]	; (800be40 <__assert_func+0x38>)
 800be2e:	461c      	mov	r4, r3
 800be30:	e7f3      	b.n	800be1a <__assert_func+0x12>
 800be32:	bf00      	nop
 800be34:	20000010 	.word	0x20000010
 800be38:	0800e67d 	.word	0x0800e67d
 800be3c:	0800e68a 	.word	0x0800e68a
 800be40:	0800e6b8 	.word	0x0800e6b8

0800be44 <fiprintf>:
 800be44:	b40e      	push	{r1, r2, r3}
 800be46:	b503      	push	{r0, r1, lr}
 800be48:	4601      	mov	r1, r0
 800be4a:	ab03      	add	r3, sp, #12
 800be4c:	4805      	ldr	r0, [pc, #20]	; (800be64 <fiprintf+0x20>)
 800be4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be52:	6800      	ldr	r0, [r0, #0]
 800be54:	9301      	str	r3, [sp, #4]
 800be56:	f000 f897 	bl	800bf88 <_vfiprintf_r>
 800be5a:	b002      	add	sp, #8
 800be5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be60:	b003      	add	sp, #12
 800be62:	4770      	bx	lr
 800be64:	20000010 	.word	0x20000010

0800be68 <__ascii_mbtowc>:
 800be68:	b082      	sub	sp, #8
 800be6a:	b901      	cbnz	r1, 800be6e <__ascii_mbtowc+0x6>
 800be6c:	a901      	add	r1, sp, #4
 800be6e:	b142      	cbz	r2, 800be82 <__ascii_mbtowc+0x1a>
 800be70:	b14b      	cbz	r3, 800be86 <__ascii_mbtowc+0x1e>
 800be72:	7813      	ldrb	r3, [r2, #0]
 800be74:	600b      	str	r3, [r1, #0]
 800be76:	7812      	ldrb	r2, [r2, #0]
 800be78:	1e10      	subs	r0, r2, #0
 800be7a:	bf18      	it	ne
 800be7c:	2001      	movne	r0, #1
 800be7e:	b002      	add	sp, #8
 800be80:	4770      	bx	lr
 800be82:	4610      	mov	r0, r2
 800be84:	e7fb      	b.n	800be7e <__ascii_mbtowc+0x16>
 800be86:	f06f 0001 	mvn.w	r0, #1
 800be8a:	e7f8      	b.n	800be7e <__ascii_mbtowc+0x16>

0800be8c <memmove>:
 800be8c:	4288      	cmp	r0, r1
 800be8e:	b510      	push	{r4, lr}
 800be90:	eb01 0402 	add.w	r4, r1, r2
 800be94:	d902      	bls.n	800be9c <memmove+0x10>
 800be96:	4284      	cmp	r4, r0
 800be98:	4623      	mov	r3, r4
 800be9a:	d807      	bhi.n	800beac <memmove+0x20>
 800be9c:	1e43      	subs	r3, r0, #1
 800be9e:	42a1      	cmp	r1, r4
 800bea0:	d008      	beq.n	800beb4 <memmove+0x28>
 800bea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beaa:	e7f8      	b.n	800be9e <memmove+0x12>
 800beac:	4402      	add	r2, r0
 800beae:	4601      	mov	r1, r0
 800beb0:	428a      	cmp	r2, r1
 800beb2:	d100      	bne.n	800beb6 <memmove+0x2a>
 800beb4:	bd10      	pop	{r4, pc}
 800beb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bebe:	e7f7      	b.n	800beb0 <memmove+0x24>

0800bec0 <__malloc_lock>:
 800bec0:	4801      	ldr	r0, [pc, #4]	; (800bec8 <__malloc_lock+0x8>)
 800bec2:	f000 bc1f 	b.w	800c704 <__retarget_lock_acquire_recursive>
 800bec6:	bf00      	nop
 800bec8:	20000554 	.word	0x20000554

0800becc <__malloc_unlock>:
 800becc:	4801      	ldr	r0, [pc, #4]	; (800bed4 <__malloc_unlock+0x8>)
 800bece:	f000 bc1a 	b.w	800c706 <__retarget_lock_release_recursive>
 800bed2:	bf00      	nop
 800bed4:	20000554 	.word	0x20000554

0800bed8 <_realloc_r>:
 800bed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bedc:	4680      	mov	r8, r0
 800bede:	4614      	mov	r4, r2
 800bee0:	460e      	mov	r6, r1
 800bee2:	b921      	cbnz	r1, 800beee <_realloc_r+0x16>
 800bee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bee8:	4611      	mov	r1, r2
 800beea:	f7ff bdad 	b.w	800ba48 <_malloc_r>
 800beee:	b92a      	cbnz	r2, 800befc <_realloc_r+0x24>
 800bef0:	f7ff fd3e 	bl	800b970 <_free_r>
 800bef4:	4625      	mov	r5, r4
 800bef6:	4628      	mov	r0, r5
 800bef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befc:	f000 fc6a 	bl	800c7d4 <_malloc_usable_size_r>
 800bf00:	4284      	cmp	r4, r0
 800bf02:	4607      	mov	r7, r0
 800bf04:	d802      	bhi.n	800bf0c <_realloc_r+0x34>
 800bf06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf0a:	d812      	bhi.n	800bf32 <_realloc_r+0x5a>
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	4640      	mov	r0, r8
 800bf10:	f7ff fd9a 	bl	800ba48 <_malloc_r>
 800bf14:	4605      	mov	r5, r0
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d0ed      	beq.n	800bef6 <_realloc_r+0x1e>
 800bf1a:	42bc      	cmp	r4, r7
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	4631      	mov	r1, r6
 800bf20:	bf28      	it	cs
 800bf22:	463a      	movcs	r2, r7
 800bf24:	f7fd fe64 	bl	8009bf0 <memcpy>
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	f7ff fd20 	bl	800b970 <_free_r>
 800bf30:	e7e1      	b.n	800bef6 <_realloc_r+0x1e>
 800bf32:	4635      	mov	r5, r6
 800bf34:	e7df      	b.n	800bef6 <_realloc_r+0x1e>

0800bf36 <__sfputc_r>:
 800bf36:	6893      	ldr	r3, [r2, #8]
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	b410      	push	{r4}
 800bf3e:	6093      	str	r3, [r2, #8]
 800bf40:	da08      	bge.n	800bf54 <__sfputc_r+0x1e>
 800bf42:	6994      	ldr	r4, [r2, #24]
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	db01      	blt.n	800bf4c <__sfputc_r+0x16>
 800bf48:	290a      	cmp	r1, #10
 800bf4a:	d103      	bne.n	800bf54 <__sfputc_r+0x1e>
 800bf4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf50:	f000 b94a 	b.w	800c1e8 <__swbuf_r>
 800bf54:	6813      	ldr	r3, [r2, #0]
 800bf56:	1c58      	adds	r0, r3, #1
 800bf58:	6010      	str	r0, [r2, #0]
 800bf5a:	7019      	strb	r1, [r3, #0]
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <__sfputs_r>:
 800bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf66:	4606      	mov	r6, r0
 800bf68:	460f      	mov	r7, r1
 800bf6a:	4614      	mov	r4, r2
 800bf6c:	18d5      	adds	r5, r2, r3
 800bf6e:	42ac      	cmp	r4, r5
 800bf70:	d101      	bne.n	800bf76 <__sfputs_r+0x12>
 800bf72:	2000      	movs	r0, #0
 800bf74:	e007      	b.n	800bf86 <__sfputs_r+0x22>
 800bf76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf7a:	463a      	mov	r2, r7
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7ff ffda 	bl	800bf36 <__sfputc_r>
 800bf82:	1c43      	adds	r3, r0, #1
 800bf84:	d1f3      	bne.n	800bf6e <__sfputs_r+0xa>
 800bf86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf88 <_vfiprintf_r>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	460d      	mov	r5, r1
 800bf8e:	b09d      	sub	sp, #116	; 0x74
 800bf90:	4614      	mov	r4, r2
 800bf92:	4698      	mov	r8, r3
 800bf94:	4606      	mov	r6, r0
 800bf96:	b118      	cbz	r0, 800bfa0 <_vfiprintf_r+0x18>
 800bf98:	6983      	ldr	r3, [r0, #24]
 800bf9a:	b90b      	cbnz	r3, 800bfa0 <_vfiprintf_r+0x18>
 800bf9c:	f000 fb14 	bl	800c5c8 <__sinit>
 800bfa0:	4b89      	ldr	r3, [pc, #548]	; (800c1c8 <_vfiprintf_r+0x240>)
 800bfa2:	429d      	cmp	r5, r3
 800bfa4:	d11b      	bne.n	800bfde <_vfiprintf_r+0x56>
 800bfa6:	6875      	ldr	r5, [r6, #4]
 800bfa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfaa:	07d9      	lsls	r1, r3, #31
 800bfac:	d405      	bmi.n	800bfba <_vfiprintf_r+0x32>
 800bfae:	89ab      	ldrh	r3, [r5, #12]
 800bfb0:	059a      	lsls	r2, r3, #22
 800bfb2:	d402      	bmi.n	800bfba <_vfiprintf_r+0x32>
 800bfb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfb6:	f000 fba5 	bl	800c704 <__retarget_lock_acquire_recursive>
 800bfba:	89ab      	ldrh	r3, [r5, #12]
 800bfbc:	071b      	lsls	r3, r3, #28
 800bfbe:	d501      	bpl.n	800bfc4 <_vfiprintf_r+0x3c>
 800bfc0:	692b      	ldr	r3, [r5, #16]
 800bfc2:	b9eb      	cbnz	r3, 800c000 <_vfiprintf_r+0x78>
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f000 f96e 	bl	800c2a8 <__swsetup_r>
 800bfcc:	b1c0      	cbz	r0, 800c000 <_vfiprintf_r+0x78>
 800bfce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd0:	07dc      	lsls	r4, r3, #31
 800bfd2:	d50e      	bpl.n	800bff2 <_vfiprintf_r+0x6a>
 800bfd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfd8:	b01d      	add	sp, #116	; 0x74
 800bfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfde:	4b7b      	ldr	r3, [pc, #492]	; (800c1cc <_vfiprintf_r+0x244>)
 800bfe0:	429d      	cmp	r5, r3
 800bfe2:	d101      	bne.n	800bfe8 <_vfiprintf_r+0x60>
 800bfe4:	68b5      	ldr	r5, [r6, #8]
 800bfe6:	e7df      	b.n	800bfa8 <_vfiprintf_r+0x20>
 800bfe8:	4b79      	ldr	r3, [pc, #484]	; (800c1d0 <_vfiprintf_r+0x248>)
 800bfea:	429d      	cmp	r5, r3
 800bfec:	bf08      	it	eq
 800bfee:	68f5      	ldreq	r5, [r6, #12]
 800bff0:	e7da      	b.n	800bfa8 <_vfiprintf_r+0x20>
 800bff2:	89ab      	ldrh	r3, [r5, #12]
 800bff4:	0598      	lsls	r0, r3, #22
 800bff6:	d4ed      	bmi.n	800bfd4 <_vfiprintf_r+0x4c>
 800bff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bffa:	f000 fb84 	bl	800c706 <__retarget_lock_release_recursive>
 800bffe:	e7e9      	b.n	800bfd4 <_vfiprintf_r+0x4c>
 800c000:	2300      	movs	r3, #0
 800c002:	9309      	str	r3, [sp, #36]	; 0x24
 800c004:	2320      	movs	r3, #32
 800c006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c00a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c00e:	2330      	movs	r3, #48	; 0x30
 800c010:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c1d4 <_vfiprintf_r+0x24c>
 800c014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c018:	f04f 0901 	mov.w	r9, #1
 800c01c:	4623      	mov	r3, r4
 800c01e:	469a      	mov	sl, r3
 800c020:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c024:	b10a      	cbz	r2, 800c02a <_vfiprintf_r+0xa2>
 800c026:	2a25      	cmp	r2, #37	; 0x25
 800c028:	d1f9      	bne.n	800c01e <_vfiprintf_r+0x96>
 800c02a:	ebba 0b04 	subs.w	fp, sl, r4
 800c02e:	d00b      	beq.n	800c048 <_vfiprintf_r+0xc0>
 800c030:	465b      	mov	r3, fp
 800c032:	4622      	mov	r2, r4
 800c034:	4629      	mov	r1, r5
 800c036:	4630      	mov	r0, r6
 800c038:	f7ff ff94 	bl	800bf64 <__sfputs_r>
 800c03c:	3001      	adds	r0, #1
 800c03e:	f000 80aa 	beq.w	800c196 <_vfiprintf_r+0x20e>
 800c042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c044:	445a      	add	r2, fp
 800c046:	9209      	str	r2, [sp, #36]	; 0x24
 800c048:	f89a 3000 	ldrb.w	r3, [sl]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 80a2 	beq.w	800c196 <_vfiprintf_r+0x20e>
 800c052:	2300      	movs	r3, #0
 800c054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c05c:	f10a 0a01 	add.w	sl, sl, #1
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	9307      	str	r3, [sp, #28]
 800c064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c068:	931a      	str	r3, [sp, #104]	; 0x68
 800c06a:	4654      	mov	r4, sl
 800c06c:	2205      	movs	r2, #5
 800c06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c072:	4858      	ldr	r0, [pc, #352]	; (800c1d4 <_vfiprintf_r+0x24c>)
 800c074:	f7f4 f88c 	bl	8000190 <memchr>
 800c078:	9a04      	ldr	r2, [sp, #16]
 800c07a:	b9d8      	cbnz	r0, 800c0b4 <_vfiprintf_r+0x12c>
 800c07c:	06d1      	lsls	r1, r2, #27
 800c07e:	bf44      	itt	mi
 800c080:	2320      	movmi	r3, #32
 800c082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c086:	0713      	lsls	r3, r2, #28
 800c088:	bf44      	itt	mi
 800c08a:	232b      	movmi	r3, #43	; 0x2b
 800c08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c090:	f89a 3000 	ldrb.w	r3, [sl]
 800c094:	2b2a      	cmp	r3, #42	; 0x2a
 800c096:	d015      	beq.n	800c0c4 <_vfiprintf_r+0x13c>
 800c098:	9a07      	ldr	r2, [sp, #28]
 800c09a:	4654      	mov	r4, sl
 800c09c:	2000      	movs	r0, #0
 800c09e:	f04f 0c0a 	mov.w	ip, #10
 800c0a2:	4621      	mov	r1, r4
 800c0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0a8:	3b30      	subs	r3, #48	; 0x30
 800c0aa:	2b09      	cmp	r3, #9
 800c0ac:	d94e      	bls.n	800c14c <_vfiprintf_r+0x1c4>
 800c0ae:	b1b0      	cbz	r0, 800c0de <_vfiprintf_r+0x156>
 800c0b0:	9207      	str	r2, [sp, #28]
 800c0b2:	e014      	b.n	800c0de <_vfiprintf_r+0x156>
 800c0b4:	eba0 0308 	sub.w	r3, r0, r8
 800c0b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	9304      	str	r3, [sp, #16]
 800c0c0:	46a2      	mov	sl, r4
 800c0c2:	e7d2      	b.n	800c06a <_vfiprintf_r+0xe2>
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	1d19      	adds	r1, r3, #4
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	9103      	str	r1, [sp, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfbb      	ittet	lt
 800c0d0:	425b      	neglt	r3, r3
 800c0d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c0d6:	9307      	strge	r3, [sp, #28]
 800c0d8:	9307      	strlt	r3, [sp, #28]
 800c0da:	bfb8      	it	lt
 800c0dc:	9204      	strlt	r2, [sp, #16]
 800c0de:	7823      	ldrb	r3, [r4, #0]
 800c0e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c0e2:	d10c      	bne.n	800c0fe <_vfiprintf_r+0x176>
 800c0e4:	7863      	ldrb	r3, [r4, #1]
 800c0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0e8:	d135      	bne.n	800c156 <_vfiprintf_r+0x1ce>
 800c0ea:	9b03      	ldr	r3, [sp, #12]
 800c0ec:	1d1a      	adds	r2, r3, #4
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	9203      	str	r2, [sp, #12]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	bfb8      	it	lt
 800c0f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c0fa:	3402      	adds	r4, #2
 800c0fc:	9305      	str	r3, [sp, #20]
 800c0fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c1e4 <_vfiprintf_r+0x25c>
 800c102:	7821      	ldrb	r1, [r4, #0]
 800c104:	2203      	movs	r2, #3
 800c106:	4650      	mov	r0, sl
 800c108:	f7f4 f842 	bl	8000190 <memchr>
 800c10c:	b140      	cbz	r0, 800c120 <_vfiprintf_r+0x198>
 800c10e:	2340      	movs	r3, #64	; 0x40
 800c110:	eba0 000a 	sub.w	r0, r0, sl
 800c114:	fa03 f000 	lsl.w	r0, r3, r0
 800c118:	9b04      	ldr	r3, [sp, #16]
 800c11a:	4303      	orrs	r3, r0
 800c11c:	3401      	adds	r4, #1
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c124:	482c      	ldr	r0, [pc, #176]	; (800c1d8 <_vfiprintf_r+0x250>)
 800c126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c12a:	2206      	movs	r2, #6
 800c12c:	f7f4 f830 	bl	8000190 <memchr>
 800c130:	2800      	cmp	r0, #0
 800c132:	d03f      	beq.n	800c1b4 <_vfiprintf_r+0x22c>
 800c134:	4b29      	ldr	r3, [pc, #164]	; (800c1dc <_vfiprintf_r+0x254>)
 800c136:	bb1b      	cbnz	r3, 800c180 <_vfiprintf_r+0x1f8>
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	3307      	adds	r3, #7
 800c13c:	f023 0307 	bic.w	r3, r3, #7
 800c140:	3308      	adds	r3, #8
 800c142:	9303      	str	r3, [sp, #12]
 800c144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c146:	443b      	add	r3, r7
 800c148:	9309      	str	r3, [sp, #36]	; 0x24
 800c14a:	e767      	b.n	800c01c <_vfiprintf_r+0x94>
 800c14c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c150:	460c      	mov	r4, r1
 800c152:	2001      	movs	r0, #1
 800c154:	e7a5      	b.n	800c0a2 <_vfiprintf_r+0x11a>
 800c156:	2300      	movs	r3, #0
 800c158:	3401      	adds	r4, #1
 800c15a:	9305      	str	r3, [sp, #20]
 800c15c:	4619      	mov	r1, r3
 800c15e:	f04f 0c0a 	mov.w	ip, #10
 800c162:	4620      	mov	r0, r4
 800c164:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c168:	3a30      	subs	r2, #48	; 0x30
 800c16a:	2a09      	cmp	r2, #9
 800c16c:	d903      	bls.n	800c176 <_vfiprintf_r+0x1ee>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0c5      	beq.n	800c0fe <_vfiprintf_r+0x176>
 800c172:	9105      	str	r1, [sp, #20]
 800c174:	e7c3      	b.n	800c0fe <_vfiprintf_r+0x176>
 800c176:	fb0c 2101 	mla	r1, ip, r1, r2
 800c17a:	4604      	mov	r4, r0
 800c17c:	2301      	movs	r3, #1
 800c17e:	e7f0      	b.n	800c162 <_vfiprintf_r+0x1da>
 800c180:	ab03      	add	r3, sp, #12
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	462a      	mov	r2, r5
 800c186:	4b16      	ldr	r3, [pc, #88]	; (800c1e0 <_vfiprintf_r+0x258>)
 800c188:	a904      	add	r1, sp, #16
 800c18a:	4630      	mov	r0, r6
 800c18c:	f7fd fde6 	bl	8009d5c <_printf_float>
 800c190:	4607      	mov	r7, r0
 800c192:	1c78      	adds	r0, r7, #1
 800c194:	d1d6      	bne.n	800c144 <_vfiprintf_r+0x1bc>
 800c196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c198:	07d9      	lsls	r1, r3, #31
 800c19a:	d405      	bmi.n	800c1a8 <_vfiprintf_r+0x220>
 800c19c:	89ab      	ldrh	r3, [r5, #12]
 800c19e:	059a      	lsls	r2, r3, #22
 800c1a0:	d402      	bmi.n	800c1a8 <_vfiprintf_r+0x220>
 800c1a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1a4:	f000 faaf 	bl	800c706 <__retarget_lock_release_recursive>
 800c1a8:	89ab      	ldrh	r3, [r5, #12]
 800c1aa:	065b      	lsls	r3, r3, #25
 800c1ac:	f53f af12 	bmi.w	800bfd4 <_vfiprintf_r+0x4c>
 800c1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1b2:	e711      	b.n	800bfd8 <_vfiprintf_r+0x50>
 800c1b4:	ab03      	add	r3, sp, #12
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	4b09      	ldr	r3, [pc, #36]	; (800c1e0 <_vfiprintf_r+0x258>)
 800c1bc:	a904      	add	r1, sp, #16
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7fe f870 	bl	800a2a4 <_printf_i>
 800c1c4:	e7e4      	b.n	800c190 <_vfiprintf_r+0x208>
 800c1c6:	bf00      	nop
 800c1c8:	0800e7e4 	.word	0x0800e7e4
 800c1cc:	0800e804 	.word	0x0800e804
 800c1d0:	0800e7c4 	.word	0x0800e7c4
 800c1d4:	0800e66c 	.word	0x0800e66c
 800c1d8:	0800e676 	.word	0x0800e676
 800c1dc:	08009d5d 	.word	0x08009d5d
 800c1e0:	0800bf65 	.word	0x0800bf65
 800c1e4:	0800e672 	.word	0x0800e672

0800c1e8 <__swbuf_r>:
 800c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ea:	460e      	mov	r6, r1
 800c1ec:	4614      	mov	r4, r2
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	b118      	cbz	r0, 800c1fa <__swbuf_r+0x12>
 800c1f2:	6983      	ldr	r3, [r0, #24]
 800c1f4:	b90b      	cbnz	r3, 800c1fa <__swbuf_r+0x12>
 800c1f6:	f000 f9e7 	bl	800c5c8 <__sinit>
 800c1fa:	4b21      	ldr	r3, [pc, #132]	; (800c280 <__swbuf_r+0x98>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	d12b      	bne.n	800c258 <__swbuf_r+0x70>
 800c200:	686c      	ldr	r4, [r5, #4]
 800c202:	69a3      	ldr	r3, [r4, #24]
 800c204:	60a3      	str	r3, [r4, #8]
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	071a      	lsls	r2, r3, #28
 800c20a:	d52f      	bpl.n	800c26c <__swbuf_r+0x84>
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	b36b      	cbz	r3, 800c26c <__swbuf_r+0x84>
 800c210:	6923      	ldr	r3, [r4, #16]
 800c212:	6820      	ldr	r0, [r4, #0]
 800c214:	1ac0      	subs	r0, r0, r3
 800c216:	6963      	ldr	r3, [r4, #20]
 800c218:	b2f6      	uxtb	r6, r6
 800c21a:	4283      	cmp	r3, r0
 800c21c:	4637      	mov	r7, r6
 800c21e:	dc04      	bgt.n	800c22a <__swbuf_r+0x42>
 800c220:	4621      	mov	r1, r4
 800c222:	4628      	mov	r0, r5
 800c224:	f000 f93c 	bl	800c4a0 <_fflush_r>
 800c228:	bb30      	cbnz	r0, 800c278 <__swbuf_r+0x90>
 800c22a:	68a3      	ldr	r3, [r4, #8]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	60a3      	str	r3, [r4, #8]
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	6022      	str	r2, [r4, #0]
 800c236:	701e      	strb	r6, [r3, #0]
 800c238:	6963      	ldr	r3, [r4, #20]
 800c23a:	3001      	adds	r0, #1
 800c23c:	4283      	cmp	r3, r0
 800c23e:	d004      	beq.n	800c24a <__swbuf_r+0x62>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	07db      	lsls	r3, r3, #31
 800c244:	d506      	bpl.n	800c254 <__swbuf_r+0x6c>
 800c246:	2e0a      	cmp	r6, #10
 800c248:	d104      	bne.n	800c254 <__swbuf_r+0x6c>
 800c24a:	4621      	mov	r1, r4
 800c24c:	4628      	mov	r0, r5
 800c24e:	f000 f927 	bl	800c4a0 <_fflush_r>
 800c252:	b988      	cbnz	r0, 800c278 <__swbuf_r+0x90>
 800c254:	4638      	mov	r0, r7
 800c256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <__swbuf_r+0x9c>)
 800c25a:	429c      	cmp	r4, r3
 800c25c:	d101      	bne.n	800c262 <__swbuf_r+0x7a>
 800c25e:	68ac      	ldr	r4, [r5, #8]
 800c260:	e7cf      	b.n	800c202 <__swbuf_r+0x1a>
 800c262:	4b09      	ldr	r3, [pc, #36]	; (800c288 <__swbuf_r+0xa0>)
 800c264:	429c      	cmp	r4, r3
 800c266:	bf08      	it	eq
 800c268:	68ec      	ldreq	r4, [r5, #12]
 800c26a:	e7ca      	b.n	800c202 <__swbuf_r+0x1a>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4628      	mov	r0, r5
 800c270:	f000 f81a 	bl	800c2a8 <__swsetup_r>
 800c274:	2800      	cmp	r0, #0
 800c276:	d0cb      	beq.n	800c210 <__swbuf_r+0x28>
 800c278:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c27c:	e7ea      	b.n	800c254 <__swbuf_r+0x6c>
 800c27e:	bf00      	nop
 800c280:	0800e7e4 	.word	0x0800e7e4
 800c284:	0800e804 	.word	0x0800e804
 800c288:	0800e7c4 	.word	0x0800e7c4

0800c28c <__ascii_wctomb>:
 800c28c:	b149      	cbz	r1, 800c2a2 <__ascii_wctomb+0x16>
 800c28e:	2aff      	cmp	r2, #255	; 0xff
 800c290:	bf85      	ittet	hi
 800c292:	238a      	movhi	r3, #138	; 0x8a
 800c294:	6003      	strhi	r3, [r0, #0]
 800c296:	700a      	strbls	r2, [r1, #0]
 800c298:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c29c:	bf98      	it	ls
 800c29e:	2001      	movls	r0, #1
 800c2a0:	4770      	bx	lr
 800c2a2:	4608      	mov	r0, r1
 800c2a4:	4770      	bx	lr
	...

0800c2a8 <__swsetup_r>:
 800c2a8:	4b32      	ldr	r3, [pc, #200]	; (800c374 <__swsetup_r+0xcc>)
 800c2aa:	b570      	push	{r4, r5, r6, lr}
 800c2ac:	681d      	ldr	r5, [r3, #0]
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	b125      	cbz	r5, 800c2be <__swsetup_r+0x16>
 800c2b4:	69ab      	ldr	r3, [r5, #24]
 800c2b6:	b913      	cbnz	r3, 800c2be <__swsetup_r+0x16>
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f000 f985 	bl	800c5c8 <__sinit>
 800c2be:	4b2e      	ldr	r3, [pc, #184]	; (800c378 <__swsetup_r+0xd0>)
 800c2c0:	429c      	cmp	r4, r3
 800c2c2:	d10f      	bne.n	800c2e4 <__swsetup_r+0x3c>
 800c2c4:	686c      	ldr	r4, [r5, #4]
 800c2c6:	89a3      	ldrh	r3, [r4, #12]
 800c2c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2cc:	0719      	lsls	r1, r3, #28
 800c2ce:	d42c      	bmi.n	800c32a <__swsetup_r+0x82>
 800c2d0:	06dd      	lsls	r5, r3, #27
 800c2d2:	d411      	bmi.n	800c2f8 <__swsetup_r+0x50>
 800c2d4:	2309      	movs	r3, #9
 800c2d6:	6033      	str	r3, [r6, #0]
 800c2d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2e2:	e03e      	b.n	800c362 <__swsetup_r+0xba>
 800c2e4:	4b25      	ldr	r3, [pc, #148]	; (800c37c <__swsetup_r+0xd4>)
 800c2e6:	429c      	cmp	r4, r3
 800c2e8:	d101      	bne.n	800c2ee <__swsetup_r+0x46>
 800c2ea:	68ac      	ldr	r4, [r5, #8]
 800c2ec:	e7eb      	b.n	800c2c6 <__swsetup_r+0x1e>
 800c2ee:	4b24      	ldr	r3, [pc, #144]	; (800c380 <__swsetup_r+0xd8>)
 800c2f0:	429c      	cmp	r4, r3
 800c2f2:	bf08      	it	eq
 800c2f4:	68ec      	ldreq	r4, [r5, #12]
 800c2f6:	e7e6      	b.n	800c2c6 <__swsetup_r+0x1e>
 800c2f8:	0758      	lsls	r0, r3, #29
 800c2fa:	d512      	bpl.n	800c322 <__swsetup_r+0x7a>
 800c2fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2fe:	b141      	cbz	r1, 800c312 <__swsetup_r+0x6a>
 800c300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c304:	4299      	cmp	r1, r3
 800c306:	d002      	beq.n	800c30e <__swsetup_r+0x66>
 800c308:	4630      	mov	r0, r6
 800c30a:	f7ff fb31 	bl	800b970 <_free_r>
 800c30e:	2300      	movs	r3, #0
 800c310:	6363      	str	r3, [r4, #52]	; 0x34
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c318:	81a3      	strh	r3, [r4, #12]
 800c31a:	2300      	movs	r3, #0
 800c31c:	6063      	str	r3, [r4, #4]
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	f043 0308 	orr.w	r3, r3, #8
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	6923      	ldr	r3, [r4, #16]
 800c32c:	b94b      	cbnz	r3, 800c342 <__swsetup_r+0x9a>
 800c32e:	89a3      	ldrh	r3, [r4, #12]
 800c330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c338:	d003      	beq.n	800c342 <__swsetup_r+0x9a>
 800c33a:	4621      	mov	r1, r4
 800c33c:	4630      	mov	r0, r6
 800c33e:	f000 fa09 	bl	800c754 <__smakebuf_r>
 800c342:	89a0      	ldrh	r0, [r4, #12]
 800c344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c348:	f010 0301 	ands.w	r3, r0, #1
 800c34c:	d00a      	beq.n	800c364 <__swsetup_r+0xbc>
 800c34e:	2300      	movs	r3, #0
 800c350:	60a3      	str	r3, [r4, #8]
 800c352:	6963      	ldr	r3, [r4, #20]
 800c354:	425b      	negs	r3, r3
 800c356:	61a3      	str	r3, [r4, #24]
 800c358:	6923      	ldr	r3, [r4, #16]
 800c35a:	b943      	cbnz	r3, 800c36e <__swsetup_r+0xc6>
 800c35c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c360:	d1ba      	bne.n	800c2d8 <__swsetup_r+0x30>
 800c362:	bd70      	pop	{r4, r5, r6, pc}
 800c364:	0781      	lsls	r1, r0, #30
 800c366:	bf58      	it	pl
 800c368:	6963      	ldrpl	r3, [r4, #20]
 800c36a:	60a3      	str	r3, [r4, #8]
 800c36c:	e7f4      	b.n	800c358 <__swsetup_r+0xb0>
 800c36e:	2000      	movs	r0, #0
 800c370:	e7f7      	b.n	800c362 <__swsetup_r+0xba>
 800c372:	bf00      	nop
 800c374:	20000010 	.word	0x20000010
 800c378:	0800e7e4 	.word	0x0800e7e4
 800c37c:	0800e804 	.word	0x0800e804
 800c380:	0800e7c4 	.word	0x0800e7c4

0800c384 <abort>:
 800c384:	b508      	push	{r3, lr}
 800c386:	2006      	movs	r0, #6
 800c388:	f000 fa54 	bl	800c834 <raise>
 800c38c:	2001      	movs	r0, #1
 800c38e:	f7f8 f965 	bl	800465c <_exit>
	...

0800c394 <__sflush_r>:
 800c394:	898a      	ldrh	r2, [r1, #12]
 800c396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c39a:	4605      	mov	r5, r0
 800c39c:	0710      	lsls	r0, r2, #28
 800c39e:	460c      	mov	r4, r1
 800c3a0:	d458      	bmi.n	800c454 <__sflush_r+0xc0>
 800c3a2:	684b      	ldr	r3, [r1, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	dc05      	bgt.n	800c3b4 <__sflush_r+0x20>
 800c3a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	dc02      	bgt.n	800c3b4 <__sflush_r+0x20>
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3b6:	2e00      	cmp	r6, #0
 800c3b8:	d0f9      	beq.n	800c3ae <__sflush_r+0x1a>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3c0:	682f      	ldr	r7, [r5, #0]
 800c3c2:	602b      	str	r3, [r5, #0]
 800c3c4:	d032      	beq.n	800c42c <__sflush_r+0x98>
 800c3c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	075a      	lsls	r2, r3, #29
 800c3cc:	d505      	bpl.n	800c3da <__sflush_r+0x46>
 800c3ce:	6863      	ldr	r3, [r4, #4]
 800c3d0:	1ac0      	subs	r0, r0, r3
 800c3d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3d4:	b10b      	cbz	r3, 800c3da <__sflush_r+0x46>
 800c3d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3d8:	1ac0      	subs	r0, r0, r3
 800c3da:	2300      	movs	r3, #0
 800c3dc:	4602      	mov	r2, r0
 800c3de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3e0:	6a21      	ldr	r1, [r4, #32]
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	47b0      	blx	r6
 800c3e6:	1c43      	adds	r3, r0, #1
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	d106      	bne.n	800c3fa <__sflush_r+0x66>
 800c3ec:	6829      	ldr	r1, [r5, #0]
 800c3ee:	291d      	cmp	r1, #29
 800c3f0:	d82c      	bhi.n	800c44c <__sflush_r+0xb8>
 800c3f2:	4a2a      	ldr	r2, [pc, #168]	; (800c49c <__sflush_r+0x108>)
 800c3f4:	40ca      	lsrs	r2, r1
 800c3f6:	07d6      	lsls	r6, r2, #31
 800c3f8:	d528      	bpl.n	800c44c <__sflush_r+0xb8>
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	6062      	str	r2, [r4, #4]
 800c3fe:	04d9      	lsls	r1, r3, #19
 800c400:	6922      	ldr	r2, [r4, #16]
 800c402:	6022      	str	r2, [r4, #0]
 800c404:	d504      	bpl.n	800c410 <__sflush_r+0x7c>
 800c406:	1c42      	adds	r2, r0, #1
 800c408:	d101      	bne.n	800c40e <__sflush_r+0x7a>
 800c40a:	682b      	ldr	r3, [r5, #0]
 800c40c:	b903      	cbnz	r3, 800c410 <__sflush_r+0x7c>
 800c40e:	6560      	str	r0, [r4, #84]	; 0x54
 800c410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c412:	602f      	str	r7, [r5, #0]
 800c414:	2900      	cmp	r1, #0
 800c416:	d0ca      	beq.n	800c3ae <__sflush_r+0x1a>
 800c418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c41c:	4299      	cmp	r1, r3
 800c41e:	d002      	beq.n	800c426 <__sflush_r+0x92>
 800c420:	4628      	mov	r0, r5
 800c422:	f7ff faa5 	bl	800b970 <_free_r>
 800c426:	2000      	movs	r0, #0
 800c428:	6360      	str	r0, [r4, #52]	; 0x34
 800c42a:	e7c1      	b.n	800c3b0 <__sflush_r+0x1c>
 800c42c:	6a21      	ldr	r1, [r4, #32]
 800c42e:	2301      	movs	r3, #1
 800c430:	4628      	mov	r0, r5
 800c432:	47b0      	blx	r6
 800c434:	1c41      	adds	r1, r0, #1
 800c436:	d1c7      	bne.n	800c3c8 <__sflush_r+0x34>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0c4      	beq.n	800c3c8 <__sflush_r+0x34>
 800c43e:	2b1d      	cmp	r3, #29
 800c440:	d001      	beq.n	800c446 <__sflush_r+0xb2>
 800c442:	2b16      	cmp	r3, #22
 800c444:	d101      	bne.n	800c44a <__sflush_r+0xb6>
 800c446:	602f      	str	r7, [r5, #0]
 800c448:	e7b1      	b.n	800c3ae <__sflush_r+0x1a>
 800c44a:	89a3      	ldrh	r3, [r4, #12]
 800c44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c450:	81a3      	strh	r3, [r4, #12]
 800c452:	e7ad      	b.n	800c3b0 <__sflush_r+0x1c>
 800c454:	690f      	ldr	r7, [r1, #16]
 800c456:	2f00      	cmp	r7, #0
 800c458:	d0a9      	beq.n	800c3ae <__sflush_r+0x1a>
 800c45a:	0793      	lsls	r3, r2, #30
 800c45c:	680e      	ldr	r6, [r1, #0]
 800c45e:	bf08      	it	eq
 800c460:	694b      	ldreq	r3, [r1, #20]
 800c462:	600f      	str	r7, [r1, #0]
 800c464:	bf18      	it	ne
 800c466:	2300      	movne	r3, #0
 800c468:	eba6 0807 	sub.w	r8, r6, r7
 800c46c:	608b      	str	r3, [r1, #8]
 800c46e:	f1b8 0f00 	cmp.w	r8, #0
 800c472:	dd9c      	ble.n	800c3ae <__sflush_r+0x1a>
 800c474:	6a21      	ldr	r1, [r4, #32]
 800c476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c478:	4643      	mov	r3, r8
 800c47a:	463a      	mov	r2, r7
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b0      	blx	r6
 800c480:	2800      	cmp	r0, #0
 800c482:	dc06      	bgt.n	800c492 <__sflush_r+0xfe>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c48a:	81a3      	strh	r3, [r4, #12]
 800c48c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c490:	e78e      	b.n	800c3b0 <__sflush_r+0x1c>
 800c492:	4407      	add	r7, r0
 800c494:	eba8 0800 	sub.w	r8, r8, r0
 800c498:	e7e9      	b.n	800c46e <__sflush_r+0xda>
 800c49a:	bf00      	nop
 800c49c:	20400001 	.word	0x20400001

0800c4a0 <_fflush_r>:
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	690b      	ldr	r3, [r1, #16]
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	b913      	cbnz	r3, 800c4b0 <_fflush_r+0x10>
 800c4aa:	2500      	movs	r5, #0
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	b118      	cbz	r0, 800c4ba <_fflush_r+0x1a>
 800c4b2:	6983      	ldr	r3, [r0, #24]
 800c4b4:	b90b      	cbnz	r3, 800c4ba <_fflush_r+0x1a>
 800c4b6:	f000 f887 	bl	800c5c8 <__sinit>
 800c4ba:	4b14      	ldr	r3, [pc, #80]	; (800c50c <_fflush_r+0x6c>)
 800c4bc:	429c      	cmp	r4, r3
 800c4be:	d11b      	bne.n	800c4f8 <_fflush_r+0x58>
 800c4c0:	686c      	ldr	r4, [r5, #4]
 800c4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d0ef      	beq.n	800c4aa <_fflush_r+0xa>
 800c4ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4cc:	07d0      	lsls	r0, r2, #31
 800c4ce:	d404      	bmi.n	800c4da <_fflush_r+0x3a>
 800c4d0:	0599      	lsls	r1, r3, #22
 800c4d2:	d402      	bmi.n	800c4da <_fflush_r+0x3a>
 800c4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4d6:	f000 f915 	bl	800c704 <__retarget_lock_acquire_recursive>
 800c4da:	4628      	mov	r0, r5
 800c4dc:	4621      	mov	r1, r4
 800c4de:	f7ff ff59 	bl	800c394 <__sflush_r>
 800c4e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4e4:	07da      	lsls	r2, r3, #31
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	d4e0      	bmi.n	800c4ac <_fflush_r+0xc>
 800c4ea:	89a3      	ldrh	r3, [r4, #12]
 800c4ec:	059b      	lsls	r3, r3, #22
 800c4ee:	d4dd      	bmi.n	800c4ac <_fflush_r+0xc>
 800c4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4f2:	f000 f908 	bl	800c706 <__retarget_lock_release_recursive>
 800c4f6:	e7d9      	b.n	800c4ac <_fflush_r+0xc>
 800c4f8:	4b05      	ldr	r3, [pc, #20]	; (800c510 <_fflush_r+0x70>)
 800c4fa:	429c      	cmp	r4, r3
 800c4fc:	d101      	bne.n	800c502 <_fflush_r+0x62>
 800c4fe:	68ac      	ldr	r4, [r5, #8]
 800c500:	e7df      	b.n	800c4c2 <_fflush_r+0x22>
 800c502:	4b04      	ldr	r3, [pc, #16]	; (800c514 <_fflush_r+0x74>)
 800c504:	429c      	cmp	r4, r3
 800c506:	bf08      	it	eq
 800c508:	68ec      	ldreq	r4, [r5, #12]
 800c50a:	e7da      	b.n	800c4c2 <_fflush_r+0x22>
 800c50c:	0800e7e4 	.word	0x0800e7e4
 800c510:	0800e804 	.word	0x0800e804
 800c514:	0800e7c4 	.word	0x0800e7c4

0800c518 <std>:
 800c518:	2300      	movs	r3, #0
 800c51a:	b510      	push	{r4, lr}
 800c51c:	4604      	mov	r4, r0
 800c51e:	e9c0 3300 	strd	r3, r3, [r0]
 800c522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c526:	6083      	str	r3, [r0, #8]
 800c528:	8181      	strh	r1, [r0, #12]
 800c52a:	6643      	str	r3, [r0, #100]	; 0x64
 800c52c:	81c2      	strh	r2, [r0, #14]
 800c52e:	6183      	str	r3, [r0, #24]
 800c530:	4619      	mov	r1, r3
 800c532:	2208      	movs	r2, #8
 800c534:	305c      	adds	r0, #92	; 0x5c
 800c536:	f7fd fb69 	bl	8009c0c <memset>
 800c53a:	4b05      	ldr	r3, [pc, #20]	; (800c550 <std+0x38>)
 800c53c:	6263      	str	r3, [r4, #36]	; 0x24
 800c53e:	4b05      	ldr	r3, [pc, #20]	; (800c554 <std+0x3c>)
 800c540:	62a3      	str	r3, [r4, #40]	; 0x28
 800c542:	4b05      	ldr	r3, [pc, #20]	; (800c558 <std+0x40>)
 800c544:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c546:	4b05      	ldr	r3, [pc, #20]	; (800c55c <std+0x44>)
 800c548:	6224      	str	r4, [r4, #32]
 800c54a:	6323      	str	r3, [r4, #48]	; 0x30
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	bf00      	nop
 800c550:	0800c86d 	.word	0x0800c86d
 800c554:	0800c88f 	.word	0x0800c88f
 800c558:	0800c8c7 	.word	0x0800c8c7
 800c55c:	0800c8eb 	.word	0x0800c8eb

0800c560 <_cleanup_r>:
 800c560:	4901      	ldr	r1, [pc, #4]	; (800c568 <_cleanup_r+0x8>)
 800c562:	f000 b8af 	b.w	800c6c4 <_fwalk_reent>
 800c566:	bf00      	nop
 800c568:	0800c4a1 	.word	0x0800c4a1

0800c56c <__sfmoreglue>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	2268      	movs	r2, #104	; 0x68
 800c570:	1e4d      	subs	r5, r1, #1
 800c572:	4355      	muls	r5, r2
 800c574:	460e      	mov	r6, r1
 800c576:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c57a:	f7ff fa65 	bl	800ba48 <_malloc_r>
 800c57e:	4604      	mov	r4, r0
 800c580:	b140      	cbz	r0, 800c594 <__sfmoreglue+0x28>
 800c582:	2100      	movs	r1, #0
 800c584:	e9c0 1600 	strd	r1, r6, [r0]
 800c588:	300c      	adds	r0, #12
 800c58a:	60a0      	str	r0, [r4, #8]
 800c58c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c590:	f7fd fb3c 	bl	8009c0c <memset>
 800c594:	4620      	mov	r0, r4
 800c596:	bd70      	pop	{r4, r5, r6, pc}

0800c598 <__sfp_lock_acquire>:
 800c598:	4801      	ldr	r0, [pc, #4]	; (800c5a0 <__sfp_lock_acquire+0x8>)
 800c59a:	f000 b8b3 	b.w	800c704 <__retarget_lock_acquire_recursive>
 800c59e:	bf00      	nop
 800c5a0:	20000555 	.word	0x20000555

0800c5a4 <__sfp_lock_release>:
 800c5a4:	4801      	ldr	r0, [pc, #4]	; (800c5ac <__sfp_lock_release+0x8>)
 800c5a6:	f000 b8ae 	b.w	800c706 <__retarget_lock_release_recursive>
 800c5aa:	bf00      	nop
 800c5ac:	20000555 	.word	0x20000555

0800c5b0 <__sinit_lock_acquire>:
 800c5b0:	4801      	ldr	r0, [pc, #4]	; (800c5b8 <__sinit_lock_acquire+0x8>)
 800c5b2:	f000 b8a7 	b.w	800c704 <__retarget_lock_acquire_recursive>
 800c5b6:	bf00      	nop
 800c5b8:	20000556 	.word	0x20000556

0800c5bc <__sinit_lock_release>:
 800c5bc:	4801      	ldr	r0, [pc, #4]	; (800c5c4 <__sinit_lock_release+0x8>)
 800c5be:	f000 b8a2 	b.w	800c706 <__retarget_lock_release_recursive>
 800c5c2:	bf00      	nop
 800c5c4:	20000556 	.word	0x20000556

0800c5c8 <__sinit>:
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	f7ff fff0 	bl	800c5b0 <__sinit_lock_acquire>
 800c5d0:	69a3      	ldr	r3, [r4, #24]
 800c5d2:	b11b      	cbz	r3, 800c5dc <__sinit+0x14>
 800c5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d8:	f7ff bff0 	b.w	800c5bc <__sinit_lock_release>
 800c5dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5e0:	6523      	str	r3, [r4, #80]	; 0x50
 800c5e2:	4b13      	ldr	r3, [pc, #76]	; (800c630 <__sinit+0x68>)
 800c5e4:	4a13      	ldr	r2, [pc, #76]	; (800c634 <__sinit+0x6c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5ea:	42a3      	cmp	r3, r4
 800c5ec:	bf04      	itt	eq
 800c5ee:	2301      	moveq	r3, #1
 800c5f0:	61a3      	streq	r3, [r4, #24]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 f820 	bl	800c638 <__sfp>
 800c5f8:	6060      	str	r0, [r4, #4]
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 f81c 	bl	800c638 <__sfp>
 800c600:	60a0      	str	r0, [r4, #8]
 800c602:	4620      	mov	r0, r4
 800c604:	f000 f818 	bl	800c638 <__sfp>
 800c608:	2200      	movs	r2, #0
 800c60a:	60e0      	str	r0, [r4, #12]
 800c60c:	2104      	movs	r1, #4
 800c60e:	6860      	ldr	r0, [r4, #4]
 800c610:	f7ff ff82 	bl	800c518 <std>
 800c614:	68a0      	ldr	r0, [r4, #8]
 800c616:	2201      	movs	r2, #1
 800c618:	2109      	movs	r1, #9
 800c61a:	f7ff ff7d 	bl	800c518 <std>
 800c61e:	68e0      	ldr	r0, [r4, #12]
 800c620:	2202      	movs	r2, #2
 800c622:	2112      	movs	r1, #18
 800c624:	f7ff ff78 	bl	800c518 <std>
 800c628:	2301      	movs	r3, #1
 800c62a:	61a3      	str	r3, [r4, #24]
 800c62c:	e7d2      	b.n	800c5d4 <__sinit+0xc>
 800c62e:	bf00      	nop
 800c630:	0800e448 	.word	0x0800e448
 800c634:	0800c561 	.word	0x0800c561

0800c638 <__sfp>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	4607      	mov	r7, r0
 800c63c:	f7ff ffac 	bl	800c598 <__sfp_lock_acquire>
 800c640:	4b1e      	ldr	r3, [pc, #120]	; (800c6bc <__sfp+0x84>)
 800c642:	681e      	ldr	r6, [r3, #0]
 800c644:	69b3      	ldr	r3, [r6, #24]
 800c646:	b913      	cbnz	r3, 800c64e <__sfp+0x16>
 800c648:	4630      	mov	r0, r6
 800c64a:	f7ff ffbd 	bl	800c5c8 <__sinit>
 800c64e:	3648      	adds	r6, #72	; 0x48
 800c650:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c654:	3b01      	subs	r3, #1
 800c656:	d503      	bpl.n	800c660 <__sfp+0x28>
 800c658:	6833      	ldr	r3, [r6, #0]
 800c65a:	b30b      	cbz	r3, 800c6a0 <__sfp+0x68>
 800c65c:	6836      	ldr	r6, [r6, #0]
 800c65e:	e7f7      	b.n	800c650 <__sfp+0x18>
 800c660:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c664:	b9d5      	cbnz	r5, 800c69c <__sfp+0x64>
 800c666:	4b16      	ldr	r3, [pc, #88]	; (800c6c0 <__sfp+0x88>)
 800c668:	60e3      	str	r3, [r4, #12]
 800c66a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c66e:	6665      	str	r5, [r4, #100]	; 0x64
 800c670:	f000 f847 	bl	800c702 <__retarget_lock_init_recursive>
 800c674:	f7ff ff96 	bl	800c5a4 <__sfp_lock_release>
 800c678:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c67c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c680:	6025      	str	r5, [r4, #0]
 800c682:	61a5      	str	r5, [r4, #24]
 800c684:	2208      	movs	r2, #8
 800c686:	4629      	mov	r1, r5
 800c688:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c68c:	f7fd fabe 	bl	8009c0c <memset>
 800c690:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c694:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c698:	4620      	mov	r0, r4
 800c69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c69c:	3468      	adds	r4, #104	; 0x68
 800c69e:	e7d9      	b.n	800c654 <__sfp+0x1c>
 800c6a0:	2104      	movs	r1, #4
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	f7ff ff62 	bl	800c56c <__sfmoreglue>
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	6030      	str	r0, [r6, #0]
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d1d5      	bne.n	800c65c <__sfp+0x24>
 800c6b0:	f7ff ff78 	bl	800c5a4 <__sfp_lock_release>
 800c6b4:	230c      	movs	r3, #12
 800c6b6:	603b      	str	r3, [r7, #0]
 800c6b8:	e7ee      	b.n	800c698 <__sfp+0x60>
 800c6ba:	bf00      	nop
 800c6bc:	0800e448 	.word	0x0800e448
 800c6c0:	ffff0001 	.word	0xffff0001

0800c6c4 <_fwalk_reent>:
 800c6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	4688      	mov	r8, r1
 800c6cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6d0:	2700      	movs	r7, #0
 800c6d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6d6:	f1b9 0901 	subs.w	r9, r9, #1
 800c6da:	d505      	bpl.n	800c6e8 <_fwalk_reent+0x24>
 800c6dc:	6824      	ldr	r4, [r4, #0]
 800c6de:	2c00      	cmp	r4, #0
 800c6e0:	d1f7      	bne.n	800c6d2 <_fwalk_reent+0xe>
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6e8:	89ab      	ldrh	r3, [r5, #12]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d907      	bls.n	800c6fe <_fwalk_reent+0x3a>
 800c6ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	d003      	beq.n	800c6fe <_fwalk_reent+0x3a>
 800c6f6:	4629      	mov	r1, r5
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	47c0      	blx	r8
 800c6fc:	4307      	orrs	r7, r0
 800c6fe:	3568      	adds	r5, #104	; 0x68
 800c700:	e7e9      	b.n	800c6d6 <_fwalk_reent+0x12>

0800c702 <__retarget_lock_init_recursive>:
 800c702:	4770      	bx	lr

0800c704 <__retarget_lock_acquire_recursive>:
 800c704:	4770      	bx	lr

0800c706 <__retarget_lock_release_recursive>:
 800c706:	4770      	bx	lr

0800c708 <__swhatbuf_r>:
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	460e      	mov	r6, r1
 800c70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c710:	2900      	cmp	r1, #0
 800c712:	b096      	sub	sp, #88	; 0x58
 800c714:	4614      	mov	r4, r2
 800c716:	461d      	mov	r5, r3
 800c718:	da08      	bge.n	800c72c <__swhatbuf_r+0x24>
 800c71a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c71e:	2200      	movs	r2, #0
 800c720:	602a      	str	r2, [r5, #0]
 800c722:	061a      	lsls	r2, r3, #24
 800c724:	d410      	bmi.n	800c748 <__swhatbuf_r+0x40>
 800c726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c72a:	e00e      	b.n	800c74a <__swhatbuf_r+0x42>
 800c72c:	466a      	mov	r2, sp
 800c72e:	f000 f903 	bl	800c938 <_fstat_r>
 800c732:	2800      	cmp	r0, #0
 800c734:	dbf1      	blt.n	800c71a <__swhatbuf_r+0x12>
 800c736:	9a01      	ldr	r2, [sp, #4]
 800c738:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c73c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c740:	425a      	negs	r2, r3
 800c742:	415a      	adcs	r2, r3
 800c744:	602a      	str	r2, [r5, #0]
 800c746:	e7ee      	b.n	800c726 <__swhatbuf_r+0x1e>
 800c748:	2340      	movs	r3, #64	; 0x40
 800c74a:	2000      	movs	r0, #0
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	b016      	add	sp, #88	; 0x58
 800c750:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c754 <__smakebuf_r>:
 800c754:	898b      	ldrh	r3, [r1, #12]
 800c756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c758:	079d      	lsls	r5, r3, #30
 800c75a:	4606      	mov	r6, r0
 800c75c:	460c      	mov	r4, r1
 800c75e:	d507      	bpl.n	800c770 <__smakebuf_r+0x1c>
 800c760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c764:	6023      	str	r3, [r4, #0]
 800c766:	6123      	str	r3, [r4, #16]
 800c768:	2301      	movs	r3, #1
 800c76a:	6163      	str	r3, [r4, #20]
 800c76c:	b002      	add	sp, #8
 800c76e:	bd70      	pop	{r4, r5, r6, pc}
 800c770:	ab01      	add	r3, sp, #4
 800c772:	466a      	mov	r2, sp
 800c774:	f7ff ffc8 	bl	800c708 <__swhatbuf_r>
 800c778:	9900      	ldr	r1, [sp, #0]
 800c77a:	4605      	mov	r5, r0
 800c77c:	4630      	mov	r0, r6
 800c77e:	f7ff f963 	bl	800ba48 <_malloc_r>
 800c782:	b948      	cbnz	r0, 800c798 <__smakebuf_r+0x44>
 800c784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c788:	059a      	lsls	r2, r3, #22
 800c78a:	d4ef      	bmi.n	800c76c <__smakebuf_r+0x18>
 800c78c:	f023 0303 	bic.w	r3, r3, #3
 800c790:	f043 0302 	orr.w	r3, r3, #2
 800c794:	81a3      	strh	r3, [r4, #12]
 800c796:	e7e3      	b.n	800c760 <__smakebuf_r+0xc>
 800c798:	4b0d      	ldr	r3, [pc, #52]	; (800c7d0 <__smakebuf_r+0x7c>)
 800c79a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c79c:	89a3      	ldrh	r3, [r4, #12]
 800c79e:	6020      	str	r0, [r4, #0]
 800c7a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a4:	81a3      	strh	r3, [r4, #12]
 800c7a6:	9b00      	ldr	r3, [sp, #0]
 800c7a8:	6163      	str	r3, [r4, #20]
 800c7aa:	9b01      	ldr	r3, [sp, #4]
 800c7ac:	6120      	str	r0, [r4, #16]
 800c7ae:	b15b      	cbz	r3, 800c7c8 <__smakebuf_r+0x74>
 800c7b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f000 f8d1 	bl	800c95c <_isatty_r>
 800c7ba:	b128      	cbz	r0, 800c7c8 <__smakebuf_r+0x74>
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	f023 0303 	bic.w	r3, r3, #3
 800c7c2:	f043 0301 	orr.w	r3, r3, #1
 800c7c6:	81a3      	strh	r3, [r4, #12]
 800c7c8:	89a0      	ldrh	r0, [r4, #12]
 800c7ca:	4305      	orrs	r5, r0
 800c7cc:	81a5      	strh	r5, [r4, #12]
 800c7ce:	e7cd      	b.n	800c76c <__smakebuf_r+0x18>
 800c7d0:	0800c561 	.word	0x0800c561

0800c7d4 <_malloc_usable_size_r>:
 800c7d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7d8:	1f18      	subs	r0, r3, #4
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	bfbc      	itt	lt
 800c7de:	580b      	ldrlt	r3, [r1, r0]
 800c7e0:	18c0      	addlt	r0, r0, r3
 800c7e2:	4770      	bx	lr

0800c7e4 <_raise_r>:
 800c7e4:	291f      	cmp	r1, #31
 800c7e6:	b538      	push	{r3, r4, r5, lr}
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	d904      	bls.n	800c7f8 <_raise_r+0x14>
 800c7ee:	2316      	movs	r3, #22
 800c7f0:	6003      	str	r3, [r0, #0]
 800c7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
 800c7f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7fa:	b112      	cbz	r2, 800c802 <_raise_r+0x1e>
 800c7fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c800:	b94b      	cbnz	r3, 800c816 <_raise_r+0x32>
 800c802:	4620      	mov	r0, r4
 800c804:	f000 f830 	bl	800c868 <_getpid_r>
 800c808:	462a      	mov	r2, r5
 800c80a:	4601      	mov	r1, r0
 800c80c:	4620      	mov	r0, r4
 800c80e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c812:	f000 b817 	b.w	800c844 <_kill_r>
 800c816:	2b01      	cmp	r3, #1
 800c818:	d00a      	beq.n	800c830 <_raise_r+0x4c>
 800c81a:	1c59      	adds	r1, r3, #1
 800c81c:	d103      	bne.n	800c826 <_raise_r+0x42>
 800c81e:	2316      	movs	r3, #22
 800c820:	6003      	str	r3, [r0, #0]
 800c822:	2001      	movs	r0, #1
 800c824:	e7e7      	b.n	800c7f6 <_raise_r+0x12>
 800c826:	2400      	movs	r4, #0
 800c828:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c82c:	4628      	mov	r0, r5
 800c82e:	4798      	blx	r3
 800c830:	2000      	movs	r0, #0
 800c832:	e7e0      	b.n	800c7f6 <_raise_r+0x12>

0800c834 <raise>:
 800c834:	4b02      	ldr	r3, [pc, #8]	; (800c840 <raise+0xc>)
 800c836:	4601      	mov	r1, r0
 800c838:	6818      	ldr	r0, [r3, #0]
 800c83a:	f7ff bfd3 	b.w	800c7e4 <_raise_r>
 800c83e:	bf00      	nop
 800c840:	20000010 	.word	0x20000010

0800c844 <_kill_r>:
 800c844:	b538      	push	{r3, r4, r5, lr}
 800c846:	4d07      	ldr	r5, [pc, #28]	; (800c864 <_kill_r+0x20>)
 800c848:	2300      	movs	r3, #0
 800c84a:	4604      	mov	r4, r0
 800c84c:	4608      	mov	r0, r1
 800c84e:	4611      	mov	r1, r2
 800c850:	602b      	str	r3, [r5, #0]
 800c852:	f7f7 fef3 	bl	800463c <_kill>
 800c856:	1c43      	adds	r3, r0, #1
 800c858:	d102      	bne.n	800c860 <_kill_r+0x1c>
 800c85a:	682b      	ldr	r3, [r5, #0]
 800c85c:	b103      	cbz	r3, 800c860 <_kill_r+0x1c>
 800c85e:	6023      	str	r3, [r4, #0]
 800c860:	bd38      	pop	{r3, r4, r5, pc}
 800c862:	bf00      	nop
 800c864:	20000550 	.word	0x20000550

0800c868 <_getpid_r>:
 800c868:	f7f7 bee0 	b.w	800462c <_getpid>

0800c86c <__sread>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	460c      	mov	r4, r1
 800c870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c874:	f000 f894 	bl	800c9a0 <_read_r>
 800c878:	2800      	cmp	r0, #0
 800c87a:	bfab      	itete	ge
 800c87c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c87e:	89a3      	ldrhlt	r3, [r4, #12]
 800c880:	181b      	addge	r3, r3, r0
 800c882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c886:	bfac      	ite	ge
 800c888:	6563      	strge	r3, [r4, #84]	; 0x54
 800c88a:	81a3      	strhlt	r3, [r4, #12]
 800c88c:	bd10      	pop	{r4, pc}

0800c88e <__swrite>:
 800c88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c892:	461f      	mov	r7, r3
 800c894:	898b      	ldrh	r3, [r1, #12]
 800c896:	05db      	lsls	r3, r3, #23
 800c898:	4605      	mov	r5, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	4616      	mov	r6, r2
 800c89e:	d505      	bpl.n	800c8ac <__swrite+0x1e>
 800c8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f000 f868 	bl	800c97c <_lseek_r>
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8b6:	81a3      	strh	r3, [r4, #12]
 800c8b8:	4632      	mov	r2, r6
 800c8ba:	463b      	mov	r3, r7
 800c8bc:	4628      	mov	r0, r5
 800c8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c2:	f000 b817 	b.w	800c8f4 <_write_r>

0800c8c6 <__sseek>:
 800c8c6:	b510      	push	{r4, lr}
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ce:	f000 f855 	bl	800c97c <_lseek_r>
 800c8d2:	1c43      	adds	r3, r0, #1
 800c8d4:	89a3      	ldrh	r3, [r4, #12]
 800c8d6:	bf15      	itete	ne
 800c8d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8e2:	81a3      	strheq	r3, [r4, #12]
 800c8e4:	bf18      	it	ne
 800c8e6:	81a3      	strhne	r3, [r4, #12]
 800c8e8:	bd10      	pop	{r4, pc}

0800c8ea <__sclose>:
 800c8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ee:	f000 b813 	b.w	800c918 <_close_r>
	...

0800c8f4 <_write_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4d07      	ldr	r5, [pc, #28]	; (800c914 <_write_r+0x20>)
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	4608      	mov	r0, r1
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	2200      	movs	r2, #0
 800c900:	602a      	str	r2, [r5, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	f7f7 fed1 	bl	80046aa <_write>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_write_r+0x1e>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_write_r+0x1e>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	20000550 	.word	0x20000550

0800c918 <_close_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4d06      	ldr	r5, [pc, #24]	; (800c934 <_close_r+0x1c>)
 800c91c:	2300      	movs	r3, #0
 800c91e:	4604      	mov	r4, r0
 800c920:	4608      	mov	r0, r1
 800c922:	602b      	str	r3, [r5, #0]
 800c924:	f7f7 fedd 	bl	80046e2 <_close>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_close_r+0x1a>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_close_r+0x1a>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	20000550 	.word	0x20000550

0800c938 <_fstat_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4d07      	ldr	r5, [pc, #28]	; (800c958 <_fstat_r+0x20>)
 800c93c:	2300      	movs	r3, #0
 800c93e:	4604      	mov	r4, r0
 800c940:	4608      	mov	r0, r1
 800c942:	4611      	mov	r1, r2
 800c944:	602b      	str	r3, [r5, #0]
 800c946:	f7f7 fed8 	bl	80046fa <_fstat>
 800c94a:	1c43      	adds	r3, r0, #1
 800c94c:	d102      	bne.n	800c954 <_fstat_r+0x1c>
 800c94e:	682b      	ldr	r3, [r5, #0]
 800c950:	b103      	cbz	r3, 800c954 <_fstat_r+0x1c>
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	bd38      	pop	{r3, r4, r5, pc}
 800c956:	bf00      	nop
 800c958:	20000550 	.word	0x20000550

0800c95c <_isatty_r>:
 800c95c:	b538      	push	{r3, r4, r5, lr}
 800c95e:	4d06      	ldr	r5, [pc, #24]	; (800c978 <_isatty_r+0x1c>)
 800c960:	2300      	movs	r3, #0
 800c962:	4604      	mov	r4, r0
 800c964:	4608      	mov	r0, r1
 800c966:	602b      	str	r3, [r5, #0]
 800c968:	f7f7 fed7 	bl	800471a <_isatty>
 800c96c:	1c43      	adds	r3, r0, #1
 800c96e:	d102      	bne.n	800c976 <_isatty_r+0x1a>
 800c970:	682b      	ldr	r3, [r5, #0]
 800c972:	b103      	cbz	r3, 800c976 <_isatty_r+0x1a>
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	20000550 	.word	0x20000550

0800c97c <_lseek_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4d07      	ldr	r5, [pc, #28]	; (800c99c <_lseek_r+0x20>)
 800c980:	4604      	mov	r4, r0
 800c982:	4608      	mov	r0, r1
 800c984:	4611      	mov	r1, r2
 800c986:	2200      	movs	r2, #0
 800c988:	602a      	str	r2, [r5, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	f7f7 fed0 	bl	8004730 <_lseek>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_lseek_r+0x1e>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b103      	cbz	r3, 800c99a <_lseek_r+0x1e>
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	20000550 	.word	0x20000550

0800c9a0 <_read_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4d07      	ldr	r5, [pc, #28]	; (800c9c0 <_read_r+0x20>)
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	4608      	mov	r0, r1
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	602a      	str	r2, [r5, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f7f7 fe5e 	bl	8004670 <_read>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d102      	bne.n	800c9be <_read_r+0x1e>
 800c9b8:	682b      	ldr	r3, [r5, #0]
 800c9ba:	b103      	cbz	r3, 800c9be <_read_r+0x1e>
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	20000550 	.word	0x20000550

0800c9c4 <cosf>:
 800c9c4:	ee10 3a10 	vmov	r3, s0
 800c9c8:	b507      	push	{r0, r1, r2, lr}
 800c9ca:	4a1e      	ldr	r2, [pc, #120]	; (800ca44 <cosf+0x80>)
 800c9cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	dc06      	bgt.n	800c9e2 <cosf+0x1e>
 800c9d4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ca48 <cosf+0x84>
 800c9d8:	b003      	add	sp, #12
 800c9da:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9de:	f000 be95 	b.w	800d70c <__kernel_cosf>
 800c9e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c9e6:	db04      	blt.n	800c9f2 <cosf+0x2e>
 800c9e8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c9ec:	b003      	add	sp, #12
 800c9ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9f2:	4668      	mov	r0, sp
 800c9f4:	f000 fd4a 	bl	800d48c <__ieee754_rem_pio2f>
 800c9f8:	f000 0003 	and.w	r0, r0, #3
 800c9fc:	2801      	cmp	r0, #1
 800c9fe:	d009      	beq.n	800ca14 <cosf+0x50>
 800ca00:	2802      	cmp	r0, #2
 800ca02:	d010      	beq.n	800ca26 <cosf+0x62>
 800ca04:	b9b0      	cbnz	r0, 800ca34 <cosf+0x70>
 800ca06:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca0a:	ed9d 0a00 	vldr	s0, [sp]
 800ca0e:	f000 fe7d 	bl	800d70c <__kernel_cosf>
 800ca12:	e7eb      	b.n	800c9ec <cosf+0x28>
 800ca14:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca18:	ed9d 0a00 	vldr	s0, [sp]
 800ca1c:	f001 f94c 	bl	800dcb8 <__kernel_sinf>
 800ca20:	eeb1 0a40 	vneg.f32	s0, s0
 800ca24:	e7e2      	b.n	800c9ec <cosf+0x28>
 800ca26:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca2a:	ed9d 0a00 	vldr	s0, [sp]
 800ca2e:	f000 fe6d 	bl	800d70c <__kernel_cosf>
 800ca32:	e7f5      	b.n	800ca20 <cosf+0x5c>
 800ca34:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca38:	ed9d 0a00 	vldr	s0, [sp]
 800ca3c:	2001      	movs	r0, #1
 800ca3e:	f001 f93b 	bl	800dcb8 <__kernel_sinf>
 800ca42:	e7d3      	b.n	800c9ec <cosf+0x28>
 800ca44:	3f490fd8 	.word	0x3f490fd8
 800ca48:	00000000 	.word	0x00000000

0800ca4c <sinf>:
 800ca4c:	ee10 3a10 	vmov	r3, s0
 800ca50:	b507      	push	{r0, r1, r2, lr}
 800ca52:	4a1f      	ldr	r2, [pc, #124]	; (800cad0 <sinf+0x84>)
 800ca54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	dc07      	bgt.n	800ca6c <sinf+0x20>
 800ca5c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800cad4 <sinf+0x88>
 800ca60:	2000      	movs	r0, #0
 800ca62:	b003      	add	sp, #12
 800ca64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca68:	f001 b926 	b.w	800dcb8 <__kernel_sinf>
 800ca6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca70:	db04      	blt.n	800ca7c <sinf+0x30>
 800ca72:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ca76:	b003      	add	sp, #12
 800ca78:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca7c:	4668      	mov	r0, sp
 800ca7e:	f000 fd05 	bl	800d48c <__ieee754_rem_pio2f>
 800ca82:	f000 0003 	and.w	r0, r0, #3
 800ca86:	2801      	cmp	r0, #1
 800ca88:	d00a      	beq.n	800caa0 <sinf+0x54>
 800ca8a:	2802      	cmp	r0, #2
 800ca8c:	d00f      	beq.n	800caae <sinf+0x62>
 800ca8e:	b9c0      	cbnz	r0, 800cac2 <sinf+0x76>
 800ca90:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca94:	ed9d 0a00 	vldr	s0, [sp]
 800ca98:	2001      	movs	r0, #1
 800ca9a:	f001 f90d 	bl	800dcb8 <__kernel_sinf>
 800ca9e:	e7ea      	b.n	800ca76 <sinf+0x2a>
 800caa0:	eddd 0a01 	vldr	s1, [sp, #4]
 800caa4:	ed9d 0a00 	vldr	s0, [sp]
 800caa8:	f000 fe30 	bl	800d70c <__kernel_cosf>
 800caac:	e7e3      	b.n	800ca76 <sinf+0x2a>
 800caae:	eddd 0a01 	vldr	s1, [sp, #4]
 800cab2:	ed9d 0a00 	vldr	s0, [sp]
 800cab6:	2001      	movs	r0, #1
 800cab8:	f001 f8fe 	bl	800dcb8 <__kernel_sinf>
 800cabc:	eeb1 0a40 	vneg.f32	s0, s0
 800cac0:	e7d9      	b.n	800ca76 <sinf+0x2a>
 800cac2:	eddd 0a01 	vldr	s1, [sp, #4]
 800cac6:	ed9d 0a00 	vldr	s0, [sp]
 800caca:	f000 fe1f 	bl	800d70c <__kernel_cosf>
 800cace:	e7f5      	b.n	800cabc <sinf+0x70>
 800cad0:	3f490fd8 	.word	0x3f490fd8
 800cad4:	00000000 	.word	0x00000000

0800cad8 <asinf>:
 800cad8:	b508      	push	{r3, lr}
 800cada:	ed2d 8b02 	vpush	{d8}
 800cade:	eeb0 8a40 	vmov.f32	s16, s0
 800cae2:	f000 f87f 	bl	800cbe4 <__ieee754_asinf>
 800cae6:	eeb4 8a48 	vcmp.f32	s16, s16
 800caea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caee:	eef0 8a40 	vmov.f32	s17, s0
 800caf2:	d615      	bvs.n	800cb20 <asinf+0x48>
 800caf4:	eeb0 0a48 	vmov.f32	s0, s16
 800caf8:	f001 fa1c 	bl	800df34 <fabsf>
 800cafc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cb00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb08:	dd0a      	ble.n	800cb20 <asinf+0x48>
 800cb0a:	f7fd f847 	bl	8009b9c <__errno>
 800cb0e:	ecbd 8b02 	vpop	{d8}
 800cb12:	2321      	movs	r3, #33	; 0x21
 800cb14:	6003      	str	r3, [r0, #0]
 800cb16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cb1a:	4804      	ldr	r0, [pc, #16]	; (800cb2c <asinf+0x54>)
 800cb1c:	f001 ba60 	b.w	800dfe0 <nanf>
 800cb20:	eeb0 0a68 	vmov.f32	s0, s17
 800cb24:	ecbd 8b02 	vpop	{d8}
 800cb28:	bd08      	pop	{r3, pc}
 800cb2a:	bf00      	nop
 800cb2c:	0800e6b8 	.word	0x0800e6b8

0800cb30 <atan2f>:
 800cb30:	f000 b93e 	b.w	800cdb0 <__ieee754_atan2f>

0800cb34 <powf>:
 800cb34:	b508      	push	{r3, lr}
 800cb36:	ed2d 8b04 	vpush	{d8-d9}
 800cb3a:	eeb0 8a60 	vmov.f32	s16, s1
 800cb3e:	eeb0 9a40 	vmov.f32	s18, s0
 800cb42:	f000 f9d5 	bl	800cef0 <__ieee754_powf>
 800cb46:	eeb4 8a48 	vcmp.f32	s16, s16
 800cb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4e:	eef0 8a40 	vmov.f32	s17, s0
 800cb52:	d63e      	bvs.n	800cbd2 <powf+0x9e>
 800cb54:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800cb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5c:	d112      	bne.n	800cb84 <powf+0x50>
 800cb5e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb66:	d039      	beq.n	800cbdc <powf+0xa8>
 800cb68:	eeb0 0a48 	vmov.f32	s0, s16
 800cb6c:	f001 f9e9 	bl	800df42 <finitef>
 800cb70:	b378      	cbz	r0, 800cbd2 <powf+0x9e>
 800cb72:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb7a:	d52a      	bpl.n	800cbd2 <powf+0x9e>
 800cb7c:	f7fd f80e 	bl	8009b9c <__errno>
 800cb80:	2322      	movs	r3, #34	; 0x22
 800cb82:	e014      	b.n	800cbae <powf+0x7a>
 800cb84:	f001 f9dd 	bl	800df42 <finitef>
 800cb88:	b998      	cbnz	r0, 800cbb2 <powf+0x7e>
 800cb8a:	eeb0 0a49 	vmov.f32	s0, s18
 800cb8e:	f001 f9d8 	bl	800df42 <finitef>
 800cb92:	b170      	cbz	r0, 800cbb2 <powf+0x7e>
 800cb94:	eeb0 0a48 	vmov.f32	s0, s16
 800cb98:	f001 f9d3 	bl	800df42 <finitef>
 800cb9c:	b148      	cbz	r0, 800cbb2 <powf+0x7e>
 800cb9e:	eef4 8a68 	vcmp.f32	s17, s17
 800cba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba6:	d7e9      	bvc.n	800cb7c <powf+0x48>
 800cba8:	f7fc fff8 	bl	8009b9c <__errno>
 800cbac:	2321      	movs	r3, #33	; 0x21
 800cbae:	6003      	str	r3, [r0, #0]
 800cbb0:	e00f      	b.n	800cbd2 <powf+0x9e>
 800cbb2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800cbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbba:	d10a      	bne.n	800cbd2 <powf+0x9e>
 800cbbc:	eeb0 0a49 	vmov.f32	s0, s18
 800cbc0:	f001 f9bf 	bl	800df42 <finitef>
 800cbc4:	b128      	cbz	r0, 800cbd2 <powf+0x9e>
 800cbc6:	eeb0 0a48 	vmov.f32	s0, s16
 800cbca:	f001 f9ba 	bl	800df42 <finitef>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d1d4      	bne.n	800cb7c <powf+0x48>
 800cbd2:	eeb0 0a68 	vmov.f32	s0, s17
 800cbd6:	ecbd 8b04 	vpop	{d8-d9}
 800cbda:	bd08      	pop	{r3, pc}
 800cbdc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800cbe0:	e7f7      	b.n	800cbd2 <powf+0x9e>
	...

0800cbe4 <__ieee754_asinf>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	ee10 5a10 	vmov	r5, s0
 800cbea:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cbee:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cbf2:	ed2d 8b04 	vpush	{d8-d9}
 800cbf6:	d10c      	bne.n	800cc12 <__ieee754_asinf+0x2e>
 800cbf8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800cd70 <__ieee754_asinf+0x18c>
 800cbfc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800cd74 <__ieee754_asinf+0x190>
 800cc00:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cc04:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cc08:	eeb0 0a67 	vmov.f32	s0, s15
 800cc0c:	ecbd 8b04 	vpop	{d8-d9}
 800cc10:	bd38      	pop	{r3, r4, r5, pc}
 800cc12:	dd04      	ble.n	800cc1e <__ieee754_asinf+0x3a>
 800cc14:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cc18:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cc1c:	e7f6      	b.n	800cc0c <__ieee754_asinf+0x28>
 800cc1e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800cc22:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800cc26:	da0b      	bge.n	800cc40 <__ieee754_asinf+0x5c>
 800cc28:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800cc2c:	da52      	bge.n	800ccd4 <__ieee754_asinf+0xf0>
 800cc2e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800cd78 <__ieee754_asinf+0x194>
 800cc32:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cc36:	eef4 7ae8 	vcmpe.f32	s15, s17
 800cc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3e:	dce5      	bgt.n	800cc0c <__ieee754_asinf+0x28>
 800cc40:	f001 f978 	bl	800df34 <fabsf>
 800cc44:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800cc48:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800cc4c:	ee20 8a08 	vmul.f32	s16, s0, s16
 800cc50:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800cd7c <__ieee754_asinf+0x198>
 800cc54:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800cd80 <__ieee754_asinf+0x19c>
 800cc58:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800cd84 <__ieee754_asinf+0x1a0>
 800cc5c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800cc60:	eddf 7a49 	vldr	s15, [pc, #292]	; 800cd88 <__ieee754_asinf+0x1a4>
 800cc64:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cc68:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800cd8c <__ieee754_asinf+0x1a8>
 800cc6c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cc70:	eddf 7a47 	vldr	s15, [pc, #284]	; 800cd90 <__ieee754_asinf+0x1ac>
 800cc74:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cc78:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800cd94 <__ieee754_asinf+0x1b0>
 800cc7c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800cc80:	eddf 7a45 	vldr	s15, [pc, #276]	; 800cd98 <__ieee754_asinf+0x1b4>
 800cc84:	eee8 7a07 	vfma.f32	s15, s16, s14
 800cc88:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800cd9c <__ieee754_asinf+0x1b8>
 800cc8c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cc90:	eddf 7a43 	vldr	s15, [pc, #268]	; 800cda0 <__ieee754_asinf+0x1bc>
 800cc94:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cc98:	eeb0 0a48 	vmov.f32	s0, s16
 800cc9c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800cca0:	f000 fd30 	bl	800d704 <__ieee754_sqrtf>
 800cca4:	4b3f      	ldr	r3, [pc, #252]	; (800cda4 <__ieee754_asinf+0x1c0>)
 800cca6:	ee29 9a08 	vmul.f32	s18, s18, s16
 800ccaa:	429c      	cmp	r4, r3
 800ccac:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ccb0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ccb4:	dd3d      	ble.n	800cd32 <__ieee754_asinf+0x14e>
 800ccb6:	eea0 0a06 	vfma.f32	s0, s0, s12
 800ccba:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800cda8 <__ieee754_asinf+0x1c4>
 800ccbe:	eee0 7a26 	vfma.f32	s15, s0, s13
 800ccc2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800cd74 <__ieee754_asinf+0x190>
 800ccc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ccca:	2d00      	cmp	r5, #0
 800cccc:	bfd8      	it	le
 800ccce:	eeb1 0a40 	vnegle.f32	s0, s0
 800ccd2:	e79b      	b.n	800cc0c <__ieee754_asinf+0x28>
 800ccd4:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ccd8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800cd7c <__ieee754_asinf+0x198>
 800ccdc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800cd80 <__ieee754_asinf+0x19c>
 800cce0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800cd94 <__ieee754_asinf+0x1b0>
 800cce4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cce8:	eddf 6a27 	vldr	s13, [pc, #156]	; 800cd88 <__ieee754_asinf+0x1a4>
 800ccec:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ccf0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800cd8c <__ieee754_asinf+0x1a8>
 800ccf4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ccf8:	eddf 6a25 	vldr	s13, [pc, #148]	; 800cd90 <__ieee754_asinf+0x1ac>
 800ccfc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd00:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800cd84 <__ieee754_asinf+0x1a0>
 800cd04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd08:	eddf 6a23 	vldr	s13, [pc, #140]	; 800cd98 <__ieee754_asinf+0x1b4>
 800cd0c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800cd10:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800cd9c <__ieee754_asinf+0x1b8>
 800cd14:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800cd18:	eddf 6a21 	vldr	s13, [pc, #132]	; 800cda0 <__ieee754_asinf+0x1bc>
 800cd1c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800cd20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd24:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800cd28:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800cd2c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800cd30:	e76c      	b.n	800cc0c <__ieee754_asinf+0x28>
 800cd32:	ee10 3a10 	vmov	r3, s0
 800cd36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cd3a:	f023 030f 	bic.w	r3, r3, #15
 800cd3e:	ee07 3a10 	vmov	s14, r3
 800cd42:	eea7 8a47 	vfms.f32	s16, s14, s14
 800cd46:	ee70 7a07 	vadd.f32	s15, s0, s14
 800cd4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cd4e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800cd52:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cd70 <__ieee754_asinf+0x18c>
 800cd56:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800cd5a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800cd5e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800cdac <__ieee754_asinf+0x1c8>
 800cd62:	eeb0 6a40 	vmov.f32	s12, s0
 800cd66:	eea7 6a66 	vfms.f32	s12, s14, s13
 800cd6a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cd6e:	e7aa      	b.n	800ccc6 <__ieee754_asinf+0xe2>
 800cd70:	b33bbd2e 	.word	0xb33bbd2e
 800cd74:	3fc90fdb 	.word	0x3fc90fdb
 800cd78:	7149f2ca 	.word	0x7149f2ca
 800cd7c:	3811ef08 	.word	0x3811ef08
 800cd80:	3a4f7f04 	.word	0x3a4f7f04
 800cd84:	3e2aaaab 	.word	0x3e2aaaab
 800cd88:	bd241146 	.word	0xbd241146
 800cd8c:	3e4e0aa8 	.word	0x3e4e0aa8
 800cd90:	bea6b090 	.word	0xbea6b090
 800cd94:	3d9dc62e 	.word	0x3d9dc62e
 800cd98:	bf303361 	.word	0xbf303361
 800cd9c:	4001572d 	.word	0x4001572d
 800cda0:	c019d139 	.word	0xc019d139
 800cda4:	3f799999 	.word	0x3f799999
 800cda8:	333bbd2e 	.word	0x333bbd2e
 800cdac:	3f490fdb 	.word	0x3f490fdb

0800cdb0 <__ieee754_atan2f>:
 800cdb0:	ee10 2a90 	vmov	r2, s1
 800cdb4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800cdb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cdbc:	b510      	push	{r4, lr}
 800cdbe:	eef0 7a40 	vmov.f32	s15, s0
 800cdc2:	dc06      	bgt.n	800cdd2 <__ieee754_atan2f+0x22>
 800cdc4:	ee10 0a10 	vmov	r0, s0
 800cdc8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cdcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cdd0:	dd04      	ble.n	800cddc <__ieee754_atan2f+0x2c>
 800cdd2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cdd6:	eeb0 0a67 	vmov.f32	s0, s15
 800cdda:	bd10      	pop	{r4, pc}
 800cddc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800cde0:	d103      	bne.n	800cdea <__ieee754_atan2f+0x3a>
 800cde2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cde6:	f000 bfd1 	b.w	800dd8c <atanf>
 800cdea:	1794      	asrs	r4, r2, #30
 800cdec:	f004 0402 	and.w	r4, r4, #2
 800cdf0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cdf4:	b943      	cbnz	r3, 800ce08 <__ieee754_atan2f+0x58>
 800cdf6:	2c02      	cmp	r4, #2
 800cdf8:	d05e      	beq.n	800ceb8 <__ieee754_atan2f+0x108>
 800cdfa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800cecc <__ieee754_atan2f+0x11c>
 800cdfe:	2c03      	cmp	r4, #3
 800ce00:	bf08      	it	eq
 800ce02:	eef0 7a47 	vmoveq.f32	s15, s14
 800ce06:	e7e6      	b.n	800cdd6 <__ieee754_atan2f+0x26>
 800ce08:	b941      	cbnz	r1, 800ce1c <__ieee754_atan2f+0x6c>
 800ce0a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800ced0 <__ieee754_atan2f+0x120>
 800ce0e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800ced4 <__ieee754_atan2f+0x124>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	bfb8      	it	lt
 800ce16:	eef0 7a40 	vmovlt.f32	s15, s0
 800ce1a:	e7dc      	b.n	800cdd6 <__ieee754_atan2f+0x26>
 800ce1c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ce20:	d110      	bne.n	800ce44 <__ieee754_atan2f+0x94>
 800ce22:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ce26:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ce2a:	d107      	bne.n	800ce3c <__ieee754_atan2f+0x8c>
 800ce2c:	2c02      	cmp	r4, #2
 800ce2e:	d846      	bhi.n	800cebe <__ieee754_atan2f+0x10e>
 800ce30:	4b29      	ldr	r3, [pc, #164]	; (800ced8 <__ieee754_atan2f+0x128>)
 800ce32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce36:	edd4 7a00 	vldr	s15, [r4]
 800ce3a:	e7cc      	b.n	800cdd6 <__ieee754_atan2f+0x26>
 800ce3c:	2c02      	cmp	r4, #2
 800ce3e:	d841      	bhi.n	800cec4 <__ieee754_atan2f+0x114>
 800ce40:	4b26      	ldr	r3, [pc, #152]	; (800cedc <__ieee754_atan2f+0x12c>)
 800ce42:	e7f6      	b.n	800ce32 <__ieee754_atan2f+0x82>
 800ce44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ce48:	d0df      	beq.n	800ce0a <__ieee754_atan2f+0x5a>
 800ce4a:	1a5b      	subs	r3, r3, r1
 800ce4c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800ce50:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ce54:	da1a      	bge.n	800ce8c <__ieee754_atan2f+0xdc>
 800ce56:	2a00      	cmp	r2, #0
 800ce58:	da01      	bge.n	800ce5e <__ieee754_atan2f+0xae>
 800ce5a:	313c      	adds	r1, #60	; 0x3c
 800ce5c:	db19      	blt.n	800ce92 <__ieee754_atan2f+0xe2>
 800ce5e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ce62:	f001 f867 	bl	800df34 <fabsf>
 800ce66:	f000 ff91 	bl	800dd8c <atanf>
 800ce6a:	eef0 7a40 	vmov.f32	s15, s0
 800ce6e:	2c01      	cmp	r4, #1
 800ce70:	d012      	beq.n	800ce98 <__ieee754_atan2f+0xe8>
 800ce72:	2c02      	cmp	r4, #2
 800ce74:	d017      	beq.n	800cea6 <__ieee754_atan2f+0xf6>
 800ce76:	2c00      	cmp	r4, #0
 800ce78:	d0ad      	beq.n	800cdd6 <__ieee754_atan2f+0x26>
 800ce7a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800cee0 <__ieee754_atan2f+0x130>
 800ce7e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ce82:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800cee4 <__ieee754_atan2f+0x134>
 800ce86:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ce8a:	e7a4      	b.n	800cdd6 <__ieee754_atan2f+0x26>
 800ce8c:	eddf 7a10 	vldr	s15, [pc, #64]	; 800ced0 <__ieee754_atan2f+0x120>
 800ce90:	e7ed      	b.n	800ce6e <__ieee754_atan2f+0xbe>
 800ce92:	eddf 7a15 	vldr	s15, [pc, #84]	; 800cee8 <__ieee754_atan2f+0x138>
 800ce96:	e7ea      	b.n	800ce6e <__ieee754_atan2f+0xbe>
 800ce98:	ee17 3a90 	vmov	r3, s15
 800ce9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cea0:	ee07 3a90 	vmov	s15, r3
 800cea4:	e797      	b.n	800cdd6 <__ieee754_atan2f+0x26>
 800cea6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800cee0 <__ieee754_atan2f+0x130>
 800ceaa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ceae:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800cee4 <__ieee754_atan2f+0x134>
 800ceb2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ceb6:	e78e      	b.n	800cdd6 <__ieee754_atan2f+0x26>
 800ceb8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800cee4 <__ieee754_atan2f+0x134>
 800cebc:	e78b      	b.n	800cdd6 <__ieee754_atan2f+0x26>
 800cebe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800ceec <__ieee754_atan2f+0x13c>
 800cec2:	e788      	b.n	800cdd6 <__ieee754_atan2f+0x26>
 800cec4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cee8 <__ieee754_atan2f+0x138>
 800cec8:	e785      	b.n	800cdd6 <__ieee754_atan2f+0x26>
 800ceca:	bf00      	nop
 800cecc:	c0490fdb 	.word	0xc0490fdb
 800ced0:	3fc90fdb 	.word	0x3fc90fdb
 800ced4:	bfc90fdb 	.word	0xbfc90fdb
 800ced8:	0800e824 	.word	0x0800e824
 800cedc:	0800e830 	.word	0x0800e830
 800cee0:	33bbbd2e 	.word	0x33bbbd2e
 800cee4:	40490fdb 	.word	0x40490fdb
 800cee8:	00000000 	.word	0x00000000
 800ceec:	3f490fdb 	.word	0x3f490fdb

0800cef0 <__ieee754_powf>:
 800cef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef4:	ee10 4a90 	vmov	r4, s1
 800cef8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800cefc:	ed2d 8b02 	vpush	{d8}
 800cf00:	ee10 6a10 	vmov	r6, s0
 800cf04:	eeb0 8a40 	vmov.f32	s16, s0
 800cf08:	eef0 8a60 	vmov.f32	s17, s1
 800cf0c:	d10c      	bne.n	800cf28 <__ieee754_powf+0x38>
 800cf0e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800cf12:	0076      	lsls	r6, r6, #1
 800cf14:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800cf18:	f240 8296 	bls.w	800d448 <__ieee754_powf+0x558>
 800cf1c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800cf20:	ecbd 8b02 	vpop	{d8}
 800cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf28:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cf2c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cf30:	dcf4      	bgt.n	800cf1c <__ieee754_powf+0x2c>
 800cf32:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800cf36:	dd08      	ble.n	800cf4a <__ieee754_powf+0x5a>
 800cf38:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800cf3c:	d1ee      	bne.n	800cf1c <__ieee754_powf+0x2c>
 800cf3e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800cf42:	0064      	lsls	r4, r4, #1
 800cf44:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800cf48:	e7e6      	b.n	800cf18 <__ieee754_powf+0x28>
 800cf4a:	2e00      	cmp	r6, #0
 800cf4c:	da20      	bge.n	800cf90 <__ieee754_powf+0xa0>
 800cf4e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800cf52:	da2d      	bge.n	800cfb0 <__ieee754_powf+0xc0>
 800cf54:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800cf58:	f2c0 827f 	blt.w	800d45a <__ieee754_powf+0x56a>
 800cf5c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800cf60:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cf64:	fa48 f703 	asr.w	r7, r8, r3
 800cf68:	fa07 f303 	lsl.w	r3, r7, r3
 800cf6c:	4543      	cmp	r3, r8
 800cf6e:	f040 8274 	bne.w	800d45a <__ieee754_powf+0x56a>
 800cf72:	f007 0701 	and.w	r7, r7, #1
 800cf76:	f1c7 0702 	rsb	r7, r7, #2
 800cf7a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800cf7e:	d11f      	bne.n	800cfc0 <__ieee754_powf+0xd0>
 800cf80:	2c00      	cmp	r4, #0
 800cf82:	f280 8267 	bge.w	800d454 <__ieee754_powf+0x564>
 800cf86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cf8a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cf8e:	e7c7      	b.n	800cf20 <__ieee754_powf+0x30>
 800cf90:	2700      	movs	r7, #0
 800cf92:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800cf96:	d1f0      	bne.n	800cf7a <__ieee754_powf+0x8a>
 800cf98:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800cf9c:	f000 8254 	beq.w	800d448 <__ieee754_powf+0x558>
 800cfa0:	dd08      	ble.n	800cfb4 <__ieee754_powf+0xc4>
 800cfa2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800d2ac <__ieee754_powf+0x3bc>
 800cfa6:	2c00      	cmp	r4, #0
 800cfa8:	bfa8      	it	ge
 800cfaa:	eeb0 0a68 	vmovge.f32	s0, s17
 800cfae:	e7b7      	b.n	800cf20 <__ieee754_powf+0x30>
 800cfb0:	2702      	movs	r7, #2
 800cfb2:	e7ee      	b.n	800cf92 <__ieee754_powf+0xa2>
 800cfb4:	2c00      	cmp	r4, #0
 800cfb6:	f280 824a 	bge.w	800d44e <__ieee754_powf+0x55e>
 800cfba:	eeb1 0a68 	vneg.f32	s0, s17
 800cfbe:	e7af      	b.n	800cf20 <__ieee754_powf+0x30>
 800cfc0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800cfc4:	d102      	bne.n	800cfcc <__ieee754_powf+0xdc>
 800cfc6:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cfca:	e7a9      	b.n	800cf20 <__ieee754_powf+0x30>
 800cfcc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800cfd0:	eeb0 0a48 	vmov.f32	s0, s16
 800cfd4:	d107      	bne.n	800cfe6 <__ieee754_powf+0xf6>
 800cfd6:	2e00      	cmp	r6, #0
 800cfd8:	db05      	blt.n	800cfe6 <__ieee754_powf+0xf6>
 800cfda:	ecbd 8b02 	vpop	{d8}
 800cfde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe2:	f000 bb8f 	b.w	800d704 <__ieee754_sqrtf>
 800cfe6:	f000 ffa5 	bl	800df34 <fabsf>
 800cfea:	b125      	cbz	r5, 800cff6 <__ieee754_powf+0x106>
 800cfec:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800cff0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cff4:	d116      	bne.n	800d024 <__ieee754_powf+0x134>
 800cff6:	2c00      	cmp	r4, #0
 800cff8:	bfbc      	itt	lt
 800cffa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800cffe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d002:	2e00      	cmp	r6, #0
 800d004:	da8c      	bge.n	800cf20 <__ieee754_powf+0x30>
 800d006:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800d00a:	ea55 0307 	orrs.w	r3, r5, r7
 800d00e:	d104      	bne.n	800d01a <__ieee754_powf+0x12a>
 800d010:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d014:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d018:	e782      	b.n	800cf20 <__ieee754_powf+0x30>
 800d01a:	2f01      	cmp	r7, #1
 800d01c:	d180      	bne.n	800cf20 <__ieee754_powf+0x30>
 800d01e:	eeb1 0a40 	vneg.f32	s0, s0
 800d022:	e77d      	b.n	800cf20 <__ieee754_powf+0x30>
 800d024:	0ff0      	lsrs	r0, r6, #31
 800d026:	3801      	subs	r0, #1
 800d028:	ea57 0300 	orrs.w	r3, r7, r0
 800d02c:	d104      	bne.n	800d038 <__ieee754_powf+0x148>
 800d02e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d032:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d036:	e773      	b.n	800cf20 <__ieee754_powf+0x30>
 800d038:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800d03c:	dd74      	ble.n	800d128 <__ieee754_powf+0x238>
 800d03e:	4b9c      	ldr	r3, [pc, #624]	; (800d2b0 <__ieee754_powf+0x3c0>)
 800d040:	429d      	cmp	r5, r3
 800d042:	dc08      	bgt.n	800d056 <__ieee754_powf+0x166>
 800d044:	2c00      	cmp	r4, #0
 800d046:	da0b      	bge.n	800d060 <__ieee754_powf+0x170>
 800d048:	2000      	movs	r0, #0
 800d04a:	ecbd 8b02 	vpop	{d8}
 800d04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d052:	f000 be95 	b.w	800dd80 <__math_oflowf>
 800d056:	4b97      	ldr	r3, [pc, #604]	; (800d2b4 <__ieee754_powf+0x3c4>)
 800d058:	429d      	cmp	r5, r3
 800d05a:	dd08      	ble.n	800d06e <__ieee754_powf+0x17e>
 800d05c:	2c00      	cmp	r4, #0
 800d05e:	dcf3      	bgt.n	800d048 <__ieee754_powf+0x158>
 800d060:	2000      	movs	r0, #0
 800d062:	ecbd 8b02 	vpop	{d8}
 800d066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d06a:	f000 be83 	b.w	800dd74 <__math_uflowf>
 800d06e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d072:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d076:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d2b8 <__ieee754_powf+0x3c8>
 800d07a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d07e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d082:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d086:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d08a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d092:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d2bc <__ieee754_powf+0x3cc>
 800d096:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800d09a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800d2c0 <__ieee754_powf+0x3d0>
 800d09e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d0a2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d2c4 <__ieee754_powf+0x3d4>
 800d0a6:	eef0 6a67 	vmov.f32	s13, s15
 800d0aa:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d0ae:	ee16 3a90 	vmov	r3, s13
 800d0b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d0b6:	f023 030f 	bic.w	r3, r3, #15
 800d0ba:	ee00 3a90 	vmov	s1, r3
 800d0be:	eee0 0a47 	vfms.f32	s1, s0, s14
 800d0c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d0c6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800d0ca:	f024 040f 	bic.w	r4, r4, #15
 800d0ce:	ee07 4a10 	vmov	s14, r4
 800d0d2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d0d6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d0da:	ee07 3a90 	vmov	s15, r3
 800d0de:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d0e2:	3f01      	subs	r7, #1
 800d0e4:	ea57 0200 	orrs.w	r2, r7, r0
 800d0e8:	ee07 4a10 	vmov	s14, r4
 800d0ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0f0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d0f4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d0f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d0fc:	ee17 4a10 	vmov	r4, s14
 800d100:	bf08      	it	eq
 800d102:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d106:	2c00      	cmp	r4, #0
 800d108:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d10c:	f340 817e 	ble.w	800d40c <__ieee754_powf+0x51c>
 800d110:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d114:	f340 80f8 	ble.w	800d308 <__ieee754_powf+0x418>
 800d118:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d120:	bf4c      	ite	mi
 800d122:	2001      	movmi	r0, #1
 800d124:	2000      	movpl	r0, #0
 800d126:	e790      	b.n	800d04a <__ieee754_powf+0x15a>
 800d128:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800d12c:	bf01      	itttt	eq
 800d12e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800d2c8 <__ieee754_powf+0x3d8>
 800d132:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d136:	f06f 0217 	mvneq.w	r2, #23
 800d13a:	ee17 5a90 	vmoveq	r5, s15
 800d13e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d142:	bf18      	it	ne
 800d144:	2200      	movne	r2, #0
 800d146:	3b7f      	subs	r3, #127	; 0x7f
 800d148:	4413      	add	r3, r2
 800d14a:	4a60      	ldr	r2, [pc, #384]	; (800d2cc <__ieee754_powf+0x3dc>)
 800d14c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800d150:	4295      	cmp	r5, r2
 800d152:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800d156:	dd06      	ble.n	800d166 <__ieee754_powf+0x276>
 800d158:	4a5d      	ldr	r2, [pc, #372]	; (800d2d0 <__ieee754_powf+0x3e0>)
 800d15a:	4295      	cmp	r5, r2
 800d15c:	f340 80a4 	ble.w	800d2a8 <__ieee754_powf+0x3b8>
 800d160:	3301      	adds	r3, #1
 800d162:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d166:	2500      	movs	r5, #0
 800d168:	4a5a      	ldr	r2, [pc, #360]	; (800d2d4 <__ieee754_powf+0x3e4>)
 800d16a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800d16e:	ee07 1a90 	vmov	s15, r1
 800d172:	ed92 7a00 	vldr	s14, [r2]
 800d176:	4a58      	ldr	r2, [pc, #352]	; (800d2d8 <__ieee754_powf+0x3e8>)
 800d178:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d17c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d180:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d184:	1049      	asrs	r1, r1, #1
 800d186:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d18a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d18e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800d192:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800d196:	ee06 1a10 	vmov	s12, r1
 800d19a:	ee65 4a26 	vmul.f32	s9, s10, s13
 800d19e:	ee36 7a47 	vsub.f32	s14, s12, s14
 800d1a2:	ee14 6a90 	vmov	r6, s9
 800d1a6:	4016      	ands	r6, r2
 800d1a8:	ee05 6a90 	vmov	s11, r6
 800d1ac:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800d1b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1b4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d2dc <__ieee754_powf+0x3ec>
 800d1b8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800d1bc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d1c0:	ee25 6a26 	vmul.f32	s12, s10, s13
 800d1c4:	eddf 6a46 	vldr	s13, [pc, #280]	; 800d2e0 <__ieee754_powf+0x3f0>
 800d1c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d1cc:	eddf 6a45 	vldr	s13, [pc, #276]	; 800d2e4 <__ieee754_powf+0x3f4>
 800d1d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d1d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d2b8 <__ieee754_powf+0x3c8>
 800d1d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d1dc:	eddf 6a42 	vldr	s13, [pc, #264]	; 800d2e8 <__ieee754_powf+0x3f8>
 800d1e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d1e4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800d2ec <__ieee754_powf+0x3fc>
 800d1e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d1ec:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d1f0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d1f4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d1f8:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d1fc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d200:	eef0 7a45 	vmov.f32	s15, s10
 800d204:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d20c:	ee17 1a90 	vmov	r1, s15
 800d210:	4011      	ands	r1, r2
 800d212:	ee07 1a90 	vmov	s15, r1
 800d216:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d21a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d21e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d222:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d226:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d22a:	eeb0 6a47 	vmov.f32	s12, s14
 800d22e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d232:	ee16 1a10 	vmov	r1, s12
 800d236:	4011      	ands	r1, r2
 800d238:	ee06 1a90 	vmov	s13, r1
 800d23c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d240:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d2f0 <__ieee754_powf+0x400>
 800d244:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800d2f4 <__ieee754_powf+0x404>
 800d248:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d24c:	ee06 1a10 	vmov	s12, r1
 800d250:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d254:	eddf 7a28 	vldr	s15, [pc, #160]	; 800d2f8 <__ieee754_powf+0x408>
 800d258:	4928      	ldr	r1, [pc, #160]	; (800d2fc <__ieee754_powf+0x40c>)
 800d25a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d25e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800d262:	edd1 7a00 	vldr	s15, [r1]
 800d266:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d26a:	ee07 3a90 	vmov	s15, r3
 800d26e:	4b24      	ldr	r3, [pc, #144]	; (800d300 <__ieee754_powf+0x410>)
 800d270:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d274:	eef0 7a47 	vmov.f32	s15, s14
 800d278:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d27c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d280:	edd5 0a00 	vldr	s1, [r5]
 800d284:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d28c:	ee17 3a90 	vmov	r3, s15
 800d290:	4013      	ands	r3, r2
 800d292:	ee07 3a90 	vmov	s15, r3
 800d296:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d29a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d29e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d2a2:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d2a6:	e70e      	b.n	800d0c6 <__ieee754_powf+0x1d6>
 800d2a8:	2501      	movs	r5, #1
 800d2aa:	e75d      	b.n	800d168 <__ieee754_powf+0x278>
 800d2ac:	00000000 	.word	0x00000000
 800d2b0:	3f7ffff3 	.word	0x3f7ffff3
 800d2b4:	3f800007 	.word	0x3f800007
 800d2b8:	3eaaaaab 	.word	0x3eaaaaab
 800d2bc:	3fb8aa3b 	.word	0x3fb8aa3b
 800d2c0:	36eca570 	.word	0x36eca570
 800d2c4:	3fb8aa00 	.word	0x3fb8aa00
 800d2c8:	4b800000 	.word	0x4b800000
 800d2cc:	001cc471 	.word	0x001cc471
 800d2d0:	005db3d6 	.word	0x005db3d6
 800d2d4:	0800e83c 	.word	0x0800e83c
 800d2d8:	fffff000 	.word	0xfffff000
 800d2dc:	3e6c3255 	.word	0x3e6c3255
 800d2e0:	3e53f142 	.word	0x3e53f142
 800d2e4:	3e8ba305 	.word	0x3e8ba305
 800d2e8:	3edb6db7 	.word	0x3edb6db7
 800d2ec:	3f19999a 	.word	0x3f19999a
 800d2f0:	3f76384f 	.word	0x3f76384f
 800d2f4:	3f763800 	.word	0x3f763800
 800d2f8:	369dc3a0 	.word	0x369dc3a0
 800d2fc:	0800e84c 	.word	0x0800e84c
 800d300:	0800e844 	.word	0x0800e844
 800d304:	3338aa3c 	.word	0x3338aa3c
 800d308:	f040 8095 	bne.w	800d436 <__ieee754_powf+0x546>
 800d30c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d304 <__ieee754_powf+0x414>
 800d310:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d314:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d318:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d320:	f73f aefa 	bgt.w	800d118 <__ieee754_powf+0x228>
 800d324:	15db      	asrs	r3, r3, #23
 800d326:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d32a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d32e:	4103      	asrs	r3, r0
 800d330:	4423      	add	r3, r4
 800d332:	494b      	ldr	r1, [pc, #300]	; (800d460 <__ieee754_powf+0x570>)
 800d334:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d338:	3a7f      	subs	r2, #127	; 0x7f
 800d33a:	4111      	asrs	r1, r2
 800d33c:	ea23 0101 	bic.w	r1, r3, r1
 800d340:	ee07 1a10 	vmov	s14, r1
 800d344:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d348:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d34c:	f1c2 0217 	rsb	r2, r2, #23
 800d350:	4110      	asrs	r0, r2
 800d352:	2c00      	cmp	r4, #0
 800d354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d358:	bfb8      	it	lt
 800d35a:	4240      	neglt	r0, r0
 800d35c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d360:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800d464 <__ieee754_powf+0x574>
 800d364:	eddf 6a40 	vldr	s13, [pc, #256]	; 800d468 <__ieee754_powf+0x578>
 800d368:	ee17 3a10 	vmov	r3, s14
 800d36c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d370:	f023 030f 	bic.w	r3, r3, #15
 800d374:	ee07 3a10 	vmov	s14, r3
 800d378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d37c:	ee27 0a00 	vmul.f32	s0, s14, s0
 800d380:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d384:	eddf 7a39 	vldr	s15, [pc, #228]	; 800d46c <__ieee754_powf+0x57c>
 800d388:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800d38c:	eef0 7a40 	vmov.f32	s15, s0
 800d390:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d394:	eeb0 6a67 	vmov.f32	s12, s15
 800d398:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d39c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d3a0:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d3a4:	eddf 6a32 	vldr	s13, [pc, #200]	; 800d470 <__ieee754_powf+0x580>
 800d3a8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800d474 <__ieee754_powf+0x584>
 800d3ac:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d3b0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800d478 <__ieee754_powf+0x588>
 800d3b4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d3b8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d47c <__ieee754_powf+0x58c>
 800d3bc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d3c0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d480 <__ieee754_powf+0x590>
 800d3c4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d3c8:	eef0 6a67 	vmov.f32	s13, s15
 800d3cc:	eee6 6a47 	vfms.f32	s13, s12, s14
 800d3d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d3d4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800d3d8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d3dc:	eea7 0a80 	vfma.f32	s0, s15, s0
 800d3e0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d3e4:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d3e8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d3ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d3f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d3f4:	ee10 3a10 	vmov	r3, s0
 800d3f8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d3fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d400:	da1f      	bge.n	800d442 <__ieee754_powf+0x552>
 800d402:	f000 fdf3 	bl	800dfec <scalbnf>
 800d406:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d40a:	e589      	b.n	800cf20 <__ieee754_powf+0x30>
 800d40c:	4a1d      	ldr	r2, [pc, #116]	; (800d484 <__ieee754_powf+0x594>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	dd07      	ble.n	800d422 <__ieee754_powf+0x532>
 800d412:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d41a:	bf4c      	ite	mi
 800d41c:	2001      	movmi	r0, #1
 800d41e:	2000      	movpl	r0, #0
 800d420:	e61f      	b.n	800d062 <__ieee754_powf+0x172>
 800d422:	d108      	bne.n	800d436 <__ieee754_powf+0x546>
 800d424:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d428:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d430:	f6ff af78 	blt.w	800d324 <__ieee754_powf+0x434>
 800d434:	e7ed      	b.n	800d412 <__ieee754_powf+0x522>
 800d436:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d43a:	f73f af73 	bgt.w	800d324 <__ieee754_powf+0x434>
 800d43e:	2000      	movs	r0, #0
 800d440:	e78c      	b.n	800d35c <__ieee754_powf+0x46c>
 800d442:	ee00 3a10 	vmov	s0, r3
 800d446:	e7de      	b.n	800d406 <__ieee754_powf+0x516>
 800d448:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d44c:	e568      	b.n	800cf20 <__ieee754_powf+0x30>
 800d44e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d488 <__ieee754_powf+0x598>
 800d452:	e565      	b.n	800cf20 <__ieee754_powf+0x30>
 800d454:	eeb0 0a48 	vmov.f32	s0, s16
 800d458:	e562      	b.n	800cf20 <__ieee754_powf+0x30>
 800d45a:	2700      	movs	r7, #0
 800d45c:	e58d      	b.n	800cf7a <__ieee754_powf+0x8a>
 800d45e:	bf00      	nop
 800d460:	007fffff 	.word	0x007fffff
 800d464:	35bfbe8c 	.word	0x35bfbe8c
 800d468:	3f317200 	.word	0x3f317200
 800d46c:	3f317218 	.word	0x3f317218
 800d470:	b5ddea0e 	.word	0xb5ddea0e
 800d474:	3331bb4c 	.word	0x3331bb4c
 800d478:	388ab355 	.word	0x388ab355
 800d47c:	bb360b61 	.word	0xbb360b61
 800d480:	3e2aaaab 	.word	0x3e2aaaab
 800d484:	43160000 	.word	0x43160000
 800d488:	00000000 	.word	0x00000000

0800d48c <__ieee754_rem_pio2f>:
 800d48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d48e:	ee10 6a10 	vmov	r6, s0
 800d492:	4b8e      	ldr	r3, [pc, #568]	; (800d6cc <__ieee754_rem_pio2f+0x240>)
 800d494:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d498:	429d      	cmp	r5, r3
 800d49a:	b087      	sub	sp, #28
 800d49c:	eef0 7a40 	vmov.f32	s15, s0
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	dc05      	bgt.n	800d4b0 <__ieee754_rem_pio2f+0x24>
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	ed80 0a00 	vstr	s0, [r0]
 800d4aa:	6043      	str	r3, [r0, #4]
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e01a      	b.n	800d4e6 <__ieee754_rem_pio2f+0x5a>
 800d4b0:	4b87      	ldr	r3, [pc, #540]	; (800d6d0 <__ieee754_rem_pio2f+0x244>)
 800d4b2:	429d      	cmp	r5, r3
 800d4b4:	dc46      	bgt.n	800d544 <__ieee754_rem_pio2f+0xb8>
 800d4b6:	2e00      	cmp	r6, #0
 800d4b8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800d6d4 <__ieee754_rem_pio2f+0x248>
 800d4bc:	4b86      	ldr	r3, [pc, #536]	; (800d6d8 <__ieee754_rem_pio2f+0x24c>)
 800d4be:	f025 050f 	bic.w	r5, r5, #15
 800d4c2:	dd1f      	ble.n	800d504 <__ieee754_rem_pio2f+0x78>
 800d4c4:	429d      	cmp	r5, r3
 800d4c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d4ca:	d00e      	beq.n	800d4ea <__ieee754_rem_pio2f+0x5e>
 800d4cc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800d6dc <__ieee754_rem_pio2f+0x250>
 800d4d0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d4d4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d4d8:	ed80 0a00 	vstr	s0, [r0]
 800d4dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4e0:	2001      	movs	r0, #1
 800d4e2:	edc4 7a01 	vstr	s15, [r4, #4]
 800d4e6:	b007      	add	sp, #28
 800d4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ea:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d6e0 <__ieee754_rem_pio2f+0x254>
 800d4ee:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800d6e4 <__ieee754_rem_pio2f+0x258>
 800d4f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d4f6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d4fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d4fe:	edc0 6a00 	vstr	s13, [r0]
 800d502:	e7eb      	b.n	800d4dc <__ieee754_rem_pio2f+0x50>
 800d504:	429d      	cmp	r5, r3
 800d506:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d50a:	d00e      	beq.n	800d52a <__ieee754_rem_pio2f+0x9e>
 800d50c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d6dc <__ieee754_rem_pio2f+0x250>
 800d510:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d514:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d518:	ed80 0a00 	vstr	s0, [r0]
 800d51c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d524:	edc4 7a01 	vstr	s15, [r4, #4]
 800d528:	e7dd      	b.n	800d4e6 <__ieee754_rem_pio2f+0x5a>
 800d52a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800d6e0 <__ieee754_rem_pio2f+0x254>
 800d52e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800d6e4 <__ieee754_rem_pio2f+0x258>
 800d532:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d536:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d53a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d53e:	edc0 6a00 	vstr	s13, [r0]
 800d542:	e7eb      	b.n	800d51c <__ieee754_rem_pio2f+0x90>
 800d544:	4b68      	ldr	r3, [pc, #416]	; (800d6e8 <__ieee754_rem_pio2f+0x25c>)
 800d546:	429d      	cmp	r5, r3
 800d548:	dc72      	bgt.n	800d630 <__ieee754_rem_pio2f+0x1a4>
 800d54a:	f000 fcf3 	bl	800df34 <fabsf>
 800d54e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d6ec <__ieee754_rem_pio2f+0x260>
 800d552:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d556:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d55a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d55e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d562:	ee17 0a90 	vmov	r0, s15
 800d566:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d6d4 <__ieee754_rem_pio2f+0x248>
 800d56a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d56e:	281f      	cmp	r0, #31
 800d570:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d6dc <__ieee754_rem_pio2f+0x250>
 800d574:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d578:	eeb1 6a47 	vneg.f32	s12, s14
 800d57c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d580:	ee16 2a90 	vmov	r2, s13
 800d584:	dc1c      	bgt.n	800d5c0 <__ieee754_rem_pio2f+0x134>
 800d586:	495a      	ldr	r1, [pc, #360]	; (800d6f0 <__ieee754_rem_pio2f+0x264>)
 800d588:	1e47      	subs	r7, r0, #1
 800d58a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d58e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d592:	428b      	cmp	r3, r1
 800d594:	d014      	beq.n	800d5c0 <__ieee754_rem_pio2f+0x134>
 800d596:	6022      	str	r2, [r4, #0]
 800d598:	ed94 7a00 	vldr	s14, [r4]
 800d59c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d5a0:	2e00      	cmp	r6, #0
 800d5a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d5a6:	ed84 0a01 	vstr	s0, [r4, #4]
 800d5aa:	da9c      	bge.n	800d4e6 <__ieee754_rem_pio2f+0x5a>
 800d5ac:	eeb1 7a47 	vneg.f32	s14, s14
 800d5b0:	eeb1 0a40 	vneg.f32	s0, s0
 800d5b4:	ed84 7a00 	vstr	s14, [r4]
 800d5b8:	ed84 0a01 	vstr	s0, [r4, #4]
 800d5bc:	4240      	negs	r0, r0
 800d5be:	e792      	b.n	800d4e6 <__ieee754_rem_pio2f+0x5a>
 800d5c0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d5c4:	15eb      	asrs	r3, r5, #23
 800d5c6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800d5ca:	2d08      	cmp	r5, #8
 800d5cc:	dde3      	ble.n	800d596 <__ieee754_rem_pio2f+0x10a>
 800d5ce:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d6e0 <__ieee754_rem_pio2f+0x254>
 800d5d2:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d6e4 <__ieee754_rem_pio2f+0x258>
 800d5d6:	eef0 6a40 	vmov.f32	s13, s0
 800d5da:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d5de:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d5e2:	eea6 0a27 	vfma.f32	s0, s12, s15
 800d5e6:	eef0 7a40 	vmov.f32	s15, s0
 800d5ea:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d5ee:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d5f2:	ee15 2a90 	vmov	r2, s11
 800d5f6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d5fa:	1a5b      	subs	r3, r3, r1
 800d5fc:	2b19      	cmp	r3, #25
 800d5fe:	dc04      	bgt.n	800d60a <__ieee754_rem_pio2f+0x17e>
 800d600:	edc4 5a00 	vstr	s11, [r4]
 800d604:	eeb0 0a66 	vmov.f32	s0, s13
 800d608:	e7c6      	b.n	800d598 <__ieee754_rem_pio2f+0x10c>
 800d60a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d6f4 <__ieee754_rem_pio2f+0x268>
 800d60e:	eeb0 0a66 	vmov.f32	s0, s13
 800d612:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d616:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d61a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800d6f8 <__ieee754_rem_pio2f+0x26c>
 800d61e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d622:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d626:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d62a:	ed84 7a00 	vstr	s14, [r4]
 800d62e:	e7b3      	b.n	800d598 <__ieee754_rem_pio2f+0x10c>
 800d630:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d634:	db06      	blt.n	800d644 <__ieee754_rem_pio2f+0x1b8>
 800d636:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d63a:	edc0 7a01 	vstr	s15, [r0, #4]
 800d63e:	edc0 7a00 	vstr	s15, [r0]
 800d642:	e733      	b.n	800d4ac <__ieee754_rem_pio2f+0x20>
 800d644:	15ea      	asrs	r2, r5, #23
 800d646:	3a86      	subs	r2, #134	; 0x86
 800d648:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d64c:	ee07 3a90 	vmov	s15, r3
 800d650:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d654:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d6fc <__ieee754_rem_pio2f+0x270>
 800d658:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d65c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d660:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d664:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d668:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d66c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d670:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d674:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d678:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d67c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d684:	edcd 7a05 	vstr	s15, [sp, #20]
 800d688:	d11e      	bne.n	800d6c8 <__ieee754_rem_pio2f+0x23c>
 800d68a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d692:	bf14      	ite	ne
 800d694:	2302      	movne	r3, #2
 800d696:	2301      	moveq	r3, #1
 800d698:	4919      	ldr	r1, [pc, #100]	; (800d700 <__ieee754_rem_pio2f+0x274>)
 800d69a:	9101      	str	r1, [sp, #4]
 800d69c:	2102      	movs	r1, #2
 800d69e:	9100      	str	r1, [sp, #0]
 800d6a0:	a803      	add	r0, sp, #12
 800d6a2:	4621      	mov	r1, r4
 800d6a4:	f000 f892 	bl	800d7cc <__kernel_rem_pio2f>
 800d6a8:	2e00      	cmp	r6, #0
 800d6aa:	f6bf af1c 	bge.w	800d4e6 <__ieee754_rem_pio2f+0x5a>
 800d6ae:	edd4 7a00 	vldr	s15, [r4]
 800d6b2:	eef1 7a67 	vneg.f32	s15, s15
 800d6b6:	edc4 7a00 	vstr	s15, [r4]
 800d6ba:	edd4 7a01 	vldr	s15, [r4, #4]
 800d6be:	eef1 7a67 	vneg.f32	s15, s15
 800d6c2:	edc4 7a01 	vstr	s15, [r4, #4]
 800d6c6:	e779      	b.n	800d5bc <__ieee754_rem_pio2f+0x130>
 800d6c8:	2303      	movs	r3, #3
 800d6ca:	e7e5      	b.n	800d698 <__ieee754_rem_pio2f+0x20c>
 800d6cc:	3f490fd8 	.word	0x3f490fd8
 800d6d0:	4016cbe3 	.word	0x4016cbe3
 800d6d4:	3fc90f80 	.word	0x3fc90f80
 800d6d8:	3fc90fd0 	.word	0x3fc90fd0
 800d6dc:	37354443 	.word	0x37354443
 800d6e0:	37354400 	.word	0x37354400
 800d6e4:	2e85a308 	.word	0x2e85a308
 800d6e8:	43490f80 	.word	0x43490f80
 800d6ec:	3f22f984 	.word	0x3f22f984
 800d6f0:	0800e854 	.word	0x0800e854
 800d6f4:	2e85a300 	.word	0x2e85a300
 800d6f8:	248d3132 	.word	0x248d3132
 800d6fc:	43800000 	.word	0x43800000
 800d700:	0800e8d4 	.word	0x0800e8d4

0800d704 <__ieee754_sqrtf>:
 800d704:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d708:	4770      	bx	lr
	...

0800d70c <__kernel_cosf>:
 800d70c:	ee10 3a10 	vmov	r3, s0
 800d710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d714:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d718:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d71c:	da05      	bge.n	800d72a <__kernel_cosf+0x1e>
 800d71e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d722:	ee17 2a90 	vmov	r2, s15
 800d726:	2a00      	cmp	r2, #0
 800d728:	d03d      	beq.n	800d7a6 <__kernel_cosf+0x9a>
 800d72a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800d72e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d7ac <__kernel_cosf+0xa0>
 800d732:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d7b0 <__kernel_cosf+0xa4>
 800d736:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800d7b4 <__kernel_cosf+0xa8>
 800d73a:	4a1f      	ldr	r2, [pc, #124]	; (800d7b8 <__kernel_cosf+0xac>)
 800d73c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d740:	4293      	cmp	r3, r2
 800d742:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d7bc <__kernel_cosf+0xb0>
 800d746:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d74a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800d7c0 <__kernel_cosf+0xb4>
 800d74e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d752:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d7c4 <__kernel_cosf+0xb8>
 800d756:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d75a:	eeb0 7a66 	vmov.f32	s14, s13
 800d75e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d762:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d766:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800d76a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800d76e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800d772:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d776:	dc04      	bgt.n	800d782 <__kernel_cosf+0x76>
 800d778:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d77c:	ee36 0a47 	vsub.f32	s0, s12, s14
 800d780:	4770      	bx	lr
 800d782:	4a11      	ldr	r2, [pc, #68]	; (800d7c8 <__kernel_cosf+0xbc>)
 800d784:	4293      	cmp	r3, r2
 800d786:	bfda      	itte	le
 800d788:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d78c:	ee06 3a90 	vmovle	s13, r3
 800d790:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800d794:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d798:	ee36 0a66 	vsub.f32	s0, s12, s13
 800d79c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d7a4:	4770      	bx	lr
 800d7a6:	eeb0 0a46 	vmov.f32	s0, s12
 800d7aa:	4770      	bx	lr
 800d7ac:	ad47d74e 	.word	0xad47d74e
 800d7b0:	310f74f6 	.word	0x310f74f6
 800d7b4:	3d2aaaab 	.word	0x3d2aaaab
 800d7b8:	3e999999 	.word	0x3e999999
 800d7bc:	b493f27c 	.word	0xb493f27c
 800d7c0:	37d00d01 	.word	0x37d00d01
 800d7c4:	bab60b61 	.word	0xbab60b61
 800d7c8:	3f480000 	.word	0x3f480000

0800d7cc <__kernel_rem_pio2f>:
 800d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	ed2d 8b04 	vpush	{d8-d9}
 800d7d4:	b0d9      	sub	sp, #356	; 0x164
 800d7d6:	4688      	mov	r8, r1
 800d7d8:	9002      	str	r0, [sp, #8]
 800d7da:	49bb      	ldr	r1, [pc, #748]	; (800dac8 <__kernel_rem_pio2f+0x2fc>)
 800d7dc:	9866      	ldr	r0, [sp, #408]	; 0x198
 800d7de:	9301      	str	r3, [sp, #4]
 800d7e0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800d7e4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800d7e8:	1e59      	subs	r1, r3, #1
 800d7ea:	1d13      	adds	r3, r2, #4
 800d7ec:	db27      	blt.n	800d83e <__kernel_rem_pio2f+0x72>
 800d7ee:	f1b2 0b03 	subs.w	fp, r2, #3
 800d7f2:	bf48      	it	mi
 800d7f4:	f102 0b04 	addmi.w	fp, r2, #4
 800d7f8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800d7fc:	1c45      	adds	r5, r0, #1
 800d7fe:	00ec      	lsls	r4, r5, #3
 800d800:	1a47      	subs	r7, r0, r1
 800d802:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800dad8 <__kernel_rem_pio2f+0x30c>
 800d806:	9403      	str	r4, [sp, #12]
 800d808:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800d80c:	eb0a 0c01 	add.w	ip, sl, r1
 800d810:	ae1c      	add	r6, sp, #112	; 0x70
 800d812:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800d816:	2400      	movs	r4, #0
 800d818:	4564      	cmp	r4, ip
 800d81a:	dd12      	ble.n	800d842 <__kernel_rem_pio2f+0x76>
 800d81c:	9b01      	ldr	r3, [sp, #4]
 800d81e:	ac1c      	add	r4, sp, #112	; 0x70
 800d820:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d824:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800d828:	f04f 0c00 	mov.w	ip, #0
 800d82c:	45d4      	cmp	ip, sl
 800d82e:	dc27      	bgt.n	800d880 <__kernel_rem_pio2f+0xb4>
 800d830:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d834:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800dad8 <__kernel_rem_pio2f+0x30c>
 800d838:	4627      	mov	r7, r4
 800d83a:	2600      	movs	r6, #0
 800d83c:	e016      	b.n	800d86c <__kernel_rem_pio2f+0xa0>
 800d83e:	2000      	movs	r0, #0
 800d840:	e7dc      	b.n	800d7fc <__kernel_rem_pio2f+0x30>
 800d842:	42e7      	cmn	r7, r4
 800d844:	bf5d      	ittte	pl
 800d846:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800d84a:	ee07 3a90 	vmovpl	s15, r3
 800d84e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d852:	eef0 7a47 	vmovmi.f32	s15, s14
 800d856:	ece6 7a01 	vstmia	r6!, {s15}
 800d85a:	3401      	adds	r4, #1
 800d85c:	e7dc      	b.n	800d818 <__kernel_rem_pio2f+0x4c>
 800d85e:	ecf9 6a01 	vldmia	r9!, {s13}
 800d862:	ed97 7a00 	vldr	s14, [r7]
 800d866:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d86a:	3601      	adds	r6, #1
 800d86c:	428e      	cmp	r6, r1
 800d86e:	f1a7 0704 	sub.w	r7, r7, #4
 800d872:	ddf4      	ble.n	800d85e <__kernel_rem_pio2f+0x92>
 800d874:	eceb 7a01 	vstmia	fp!, {s15}
 800d878:	f10c 0c01 	add.w	ip, ip, #1
 800d87c:	3404      	adds	r4, #4
 800d87e:	e7d5      	b.n	800d82c <__kernel_rem_pio2f+0x60>
 800d880:	ab08      	add	r3, sp, #32
 800d882:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d886:	eddf 8a93 	vldr	s17, [pc, #588]	; 800dad4 <__kernel_rem_pio2f+0x308>
 800d88a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800dad0 <__kernel_rem_pio2f+0x304>
 800d88e:	9304      	str	r3, [sp, #16]
 800d890:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800d894:	4656      	mov	r6, sl
 800d896:	00b3      	lsls	r3, r6, #2
 800d898:	9305      	str	r3, [sp, #20]
 800d89a:	ab58      	add	r3, sp, #352	; 0x160
 800d89c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d8a0:	ac08      	add	r4, sp, #32
 800d8a2:	ab44      	add	r3, sp, #272	; 0x110
 800d8a4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800d8a8:	46a4      	mov	ip, r4
 800d8aa:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d8ae:	4637      	mov	r7, r6
 800d8b0:	2f00      	cmp	r7, #0
 800d8b2:	f1a0 0004 	sub.w	r0, r0, #4
 800d8b6:	dc4f      	bgt.n	800d958 <__kernel_rem_pio2f+0x18c>
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d8be:	f000 fb95 	bl	800dfec <scalbnf>
 800d8c2:	eeb0 8a40 	vmov.f32	s16, s0
 800d8c6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d8ca:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d8ce:	f000 fb45 	bl	800df5c <floorf>
 800d8d2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d8d6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d8da:	2d00      	cmp	r5, #0
 800d8dc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d8e0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d8e4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800d8e8:	ee17 9a90 	vmov	r9, s15
 800d8ec:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d8f0:	dd44      	ble.n	800d97c <__kernel_rem_pio2f+0x1b0>
 800d8f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800d8f6:	ab08      	add	r3, sp, #32
 800d8f8:	f1c5 0e08 	rsb	lr, r5, #8
 800d8fc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800d900:	fa47 f00e 	asr.w	r0, r7, lr
 800d904:	4481      	add	r9, r0
 800d906:	fa00 f00e 	lsl.w	r0, r0, lr
 800d90a:	1a3f      	subs	r7, r7, r0
 800d90c:	f1c5 0007 	rsb	r0, r5, #7
 800d910:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800d914:	4107      	asrs	r7, r0
 800d916:	2f00      	cmp	r7, #0
 800d918:	dd3f      	ble.n	800d99a <__kernel_rem_pio2f+0x1ce>
 800d91a:	f04f 0e00 	mov.w	lr, #0
 800d91e:	f109 0901 	add.w	r9, r9, #1
 800d922:	4673      	mov	r3, lr
 800d924:	4576      	cmp	r6, lr
 800d926:	dc6b      	bgt.n	800da00 <__kernel_rem_pio2f+0x234>
 800d928:	2d00      	cmp	r5, #0
 800d92a:	dd04      	ble.n	800d936 <__kernel_rem_pio2f+0x16a>
 800d92c:	2d01      	cmp	r5, #1
 800d92e:	d078      	beq.n	800da22 <__kernel_rem_pio2f+0x256>
 800d930:	2d02      	cmp	r5, #2
 800d932:	f000 8081 	beq.w	800da38 <__kernel_rem_pio2f+0x26c>
 800d936:	2f02      	cmp	r7, #2
 800d938:	d12f      	bne.n	800d99a <__kernel_rem_pio2f+0x1ce>
 800d93a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d93e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d942:	b353      	cbz	r3, 800d99a <__kernel_rem_pio2f+0x1ce>
 800d944:	4628      	mov	r0, r5
 800d946:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d94a:	f000 fb4f 	bl	800dfec <scalbnf>
 800d94e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d952:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d956:	e020      	b.n	800d99a <__kernel_rem_pio2f+0x1ce>
 800d958:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d95c:	3f01      	subs	r7, #1
 800d95e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d966:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d96a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d96e:	ecac 0a01 	vstmia	ip!, {s0}
 800d972:	ed90 0a00 	vldr	s0, [r0]
 800d976:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d97a:	e799      	b.n	800d8b0 <__kernel_rem_pio2f+0xe4>
 800d97c:	d105      	bne.n	800d98a <__kernel_rem_pio2f+0x1be>
 800d97e:	1e70      	subs	r0, r6, #1
 800d980:	ab08      	add	r3, sp, #32
 800d982:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800d986:	11ff      	asrs	r7, r7, #7
 800d988:	e7c5      	b.n	800d916 <__kernel_rem_pio2f+0x14a>
 800d98a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d98e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d996:	da31      	bge.n	800d9fc <__kernel_rem_pio2f+0x230>
 800d998:	2700      	movs	r7, #0
 800d99a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a2:	f040 809b 	bne.w	800dadc <__kernel_rem_pio2f+0x310>
 800d9a6:	1e74      	subs	r4, r6, #1
 800d9a8:	46a4      	mov	ip, r4
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	45d4      	cmp	ip, sl
 800d9ae:	da4a      	bge.n	800da46 <__kernel_rem_pio2f+0x27a>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d07a      	beq.n	800daaa <__kernel_rem_pio2f+0x2de>
 800d9b4:	ab08      	add	r3, sp, #32
 800d9b6:	3d08      	subs	r5, #8
 800d9b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f000 8081 	beq.w	800dac4 <__kernel_rem_pio2f+0x2f8>
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d9c8:	00a5      	lsls	r5, r4, #2
 800d9ca:	f000 fb0f 	bl	800dfec <scalbnf>
 800d9ce:	aa44      	add	r2, sp, #272	; 0x110
 800d9d0:	1d2b      	adds	r3, r5, #4
 800d9d2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800dad4 <__kernel_rem_pio2f+0x308>
 800d9d6:	18d1      	adds	r1, r2, r3
 800d9d8:	4622      	mov	r2, r4
 800d9da:	2a00      	cmp	r2, #0
 800d9dc:	f280 80ae 	bge.w	800db3c <__kernel_rem_pio2f+0x370>
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	2a00      	cmp	r2, #0
 800d9e4:	f2c0 80cc 	blt.w	800db80 <__kernel_rem_pio2f+0x3b4>
 800d9e8:	a944      	add	r1, sp, #272	; 0x110
 800d9ea:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800d9ee:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800dacc <__kernel_rem_pio2f+0x300>
 800d9f2:	eddf 7a39 	vldr	s15, [pc, #228]	; 800dad8 <__kernel_rem_pio2f+0x30c>
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	1aa1      	subs	r1, r4, r2
 800d9fa:	e0b6      	b.n	800db6a <__kernel_rem_pio2f+0x39e>
 800d9fc:	2702      	movs	r7, #2
 800d9fe:	e78c      	b.n	800d91a <__kernel_rem_pio2f+0x14e>
 800da00:	6820      	ldr	r0, [r4, #0]
 800da02:	b94b      	cbnz	r3, 800da18 <__kernel_rem_pio2f+0x24c>
 800da04:	b118      	cbz	r0, 800da0e <__kernel_rem_pio2f+0x242>
 800da06:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800da0a:	6020      	str	r0, [r4, #0]
 800da0c:	2001      	movs	r0, #1
 800da0e:	f10e 0e01 	add.w	lr, lr, #1
 800da12:	3404      	adds	r4, #4
 800da14:	4603      	mov	r3, r0
 800da16:	e785      	b.n	800d924 <__kernel_rem_pio2f+0x158>
 800da18:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800da1c:	6020      	str	r0, [r4, #0]
 800da1e:	4618      	mov	r0, r3
 800da20:	e7f5      	b.n	800da0e <__kernel_rem_pio2f+0x242>
 800da22:	1e74      	subs	r4, r6, #1
 800da24:	a808      	add	r0, sp, #32
 800da26:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800da2a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800da2e:	f10d 0c20 	add.w	ip, sp, #32
 800da32:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800da36:	e77e      	b.n	800d936 <__kernel_rem_pio2f+0x16a>
 800da38:	1e74      	subs	r4, r6, #1
 800da3a:	a808      	add	r0, sp, #32
 800da3c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800da40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800da44:	e7f3      	b.n	800da2e <__kernel_rem_pio2f+0x262>
 800da46:	ab08      	add	r3, sp, #32
 800da48:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800da4c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800da50:	4318      	orrs	r0, r3
 800da52:	e7ab      	b.n	800d9ac <__kernel_rem_pio2f+0x1e0>
 800da54:	f10c 0c01 	add.w	ip, ip, #1
 800da58:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800da5c:	2c00      	cmp	r4, #0
 800da5e:	d0f9      	beq.n	800da54 <__kernel_rem_pio2f+0x288>
 800da60:	9b05      	ldr	r3, [sp, #20]
 800da62:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800da66:	eb0d 0003 	add.w	r0, sp, r3
 800da6a:	9b01      	ldr	r3, [sp, #4]
 800da6c:	18f4      	adds	r4, r6, r3
 800da6e:	ab1c      	add	r3, sp, #112	; 0x70
 800da70:	1c77      	adds	r7, r6, #1
 800da72:	384c      	subs	r0, #76	; 0x4c
 800da74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da78:	4466      	add	r6, ip
 800da7a:	42be      	cmp	r6, r7
 800da7c:	f6ff af0b 	blt.w	800d896 <__kernel_rem_pio2f+0xca>
 800da80:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800da84:	f8dd e008 	ldr.w	lr, [sp, #8]
 800da88:	ee07 3a90 	vmov	s15, r3
 800da8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da90:	f04f 0c00 	mov.w	ip, #0
 800da94:	ece4 7a01 	vstmia	r4!, {s15}
 800da98:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800dad8 <__kernel_rem_pio2f+0x30c>
 800da9c:	46a1      	mov	r9, r4
 800da9e:	458c      	cmp	ip, r1
 800daa0:	dd07      	ble.n	800dab2 <__kernel_rem_pio2f+0x2e6>
 800daa2:	ece0 7a01 	vstmia	r0!, {s15}
 800daa6:	3701      	adds	r7, #1
 800daa8:	e7e7      	b.n	800da7a <__kernel_rem_pio2f+0x2ae>
 800daaa:	9804      	ldr	r0, [sp, #16]
 800daac:	f04f 0c01 	mov.w	ip, #1
 800dab0:	e7d2      	b.n	800da58 <__kernel_rem_pio2f+0x28c>
 800dab2:	ecfe 6a01 	vldmia	lr!, {s13}
 800dab6:	ed39 7a01 	vldmdb	r9!, {s14}
 800daba:	f10c 0c01 	add.w	ip, ip, #1
 800dabe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dac2:	e7ec      	b.n	800da9e <__kernel_rem_pio2f+0x2d2>
 800dac4:	3c01      	subs	r4, #1
 800dac6:	e775      	b.n	800d9b4 <__kernel_rem_pio2f+0x1e8>
 800dac8:	0800ec18 	.word	0x0800ec18
 800dacc:	0800ebec 	.word	0x0800ebec
 800dad0:	43800000 	.word	0x43800000
 800dad4:	3b800000 	.word	0x3b800000
 800dad8:	00000000 	.word	0x00000000
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	eeb0 0a48 	vmov.f32	s0, s16
 800dae2:	1a98      	subs	r0, r3, r2
 800dae4:	f000 fa82 	bl	800dfec <scalbnf>
 800dae8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800dad0 <__kernel_rem_pio2f+0x304>
 800daec:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800daf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf4:	db19      	blt.n	800db2a <__kernel_rem_pio2f+0x35e>
 800daf6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800dad4 <__kernel_rem_pio2f+0x308>
 800dafa:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dafe:	aa08      	add	r2, sp, #32
 800db00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db04:	1c74      	adds	r4, r6, #1
 800db06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db0a:	3508      	adds	r5, #8
 800db0c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800db10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db14:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800db18:	ee10 3a10 	vmov	r3, s0
 800db1c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800db20:	ee17 3a90 	vmov	r3, s15
 800db24:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800db28:	e74b      	b.n	800d9c2 <__kernel_rem_pio2f+0x1f6>
 800db2a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800db2e:	aa08      	add	r2, sp, #32
 800db30:	ee10 3a10 	vmov	r3, s0
 800db34:	4634      	mov	r4, r6
 800db36:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800db3a:	e742      	b.n	800d9c2 <__kernel_rem_pio2f+0x1f6>
 800db3c:	a808      	add	r0, sp, #32
 800db3e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800db42:	9001      	str	r0, [sp, #4]
 800db44:	ee07 0a90 	vmov	s15, r0
 800db48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db4c:	3a01      	subs	r2, #1
 800db4e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800db52:	ee20 0a07 	vmul.f32	s0, s0, s14
 800db56:	ed61 7a01 	vstmdb	r1!, {s15}
 800db5a:	e73e      	b.n	800d9da <__kernel_rem_pio2f+0x20e>
 800db5c:	ecfc 6a01 	vldmia	ip!, {s13}
 800db60:	ecb6 7a01 	vldmia	r6!, {s14}
 800db64:	eee6 7a87 	vfma.f32	s15, s13, s14
 800db68:	3001      	adds	r0, #1
 800db6a:	4550      	cmp	r0, sl
 800db6c:	dc01      	bgt.n	800db72 <__kernel_rem_pio2f+0x3a6>
 800db6e:	4288      	cmp	r0, r1
 800db70:	ddf4      	ble.n	800db5c <__kernel_rem_pio2f+0x390>
 800db72:	a858      	add	r0, sp, #352	; 0x160
 800db74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db78:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800db7c:	3a01      	subs	r2, #1
 800db7e:	e730      	b.n	800d9e2 <__kernel_rem_pio2f+0x216>
 800db80:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800db82:	2a02      	cmp	r2, #2
 800db84:	dc09      	bgt.n	800db9a <__kernel_rem_pio2f+0x3ce>
 800db86:	2a00      	cmp	r2, #0
 800db88:	dc2a      	bgt.n	800dbe0 <__kernel_rem_pio2f+0x414>
 800db8a:	d043      	beq.n	800dc14 <__kernel_rem_pio2f+0x448>
 800db8c:	f009 0007 	and.w	r0, r9, #7
 800db90:	b059      	add	sp, #356	; 0x164
 800db92:	ecbd 8b04 	vpop	{d8-d9}
 800db96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db9a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800db9c:	2b03      	cmp	r3, #3
 800db9e:	d1f5      	bne.n	800db8c <__kernel_rem_pio2f+0x3c0>
 800dba0:	ab30      	add	r3, sp, #192	; 0xc0
 800dba2:	442b      	add	r3, r5
 800dba4:	461a      	mov	r2, r3
 800dba6:	4619      	mov	r1, r3
 800dba8:	4620      	mov	r0, r4
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	f1a1 0104 	sub.w	r1, r1, #4
 800dbb0:	dc51      	bgt.n	800dc56 <__kernel_rem_pio2f+0x48a>
 800dbb2:	4621      	mov	r1, r4
 800dbb4:	2901      	cmp	r1, #1
 800dbb6:	f1a2 0204 	sub.w	r2, r2, #4
 800dbba:	dc5c      	bgt.n	800dc76 <__kernel_rem_pio2f+0x4aa>
 800dbbc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800dad8 <__kernel_rem_pio2f+0x30c>
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	2c01      	cmp	r4, #1
 800dbc4:	dc67      	bgt.n	800dc96 <__kernel_rem_pio2f+0x4ca>
 800dbc6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800dbca:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800dbce:	2f00      	cmp	r7, #0
 800dbd0:	d167      	bne.n	800dca2 <__kernel_rem_pio2f+0x4d6>
 800dbd2:	edc8 6a00 	vstr	s13, [r8]
 800dbd6:	ed88 7a01 	vstr	s14, [r8, #4]
 800dbda:	edc8 7a02 	vstr	s15, [r8, #8]
 800dbde:	e7d5      	b.n	800db8c <__kernel_rem_pio2f+0x3c0>
 800dbe0:	aa30      	add	r2, sp, #192	; 0xc0
 800dbe2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800dad8 <__kernel_rem_pio2f+0x30c>
 800dbe6:	4413      	add	r3, r2
 800dbe8:	4622      	mov	r2, r4
 800dbea:	2a00      	cmp	r2, #0
 800dbec:	da24      	bge.n	800dc38 <__kernel_rem_pio2f+0x46c>
 800dbee:	b34f      	cbz	r7, 800dc44 <__kernel_rem_pio2f+0x478>
 800dbf0:	eef1 7a47 	vneg.f32	s15, s14
 800dbf4:	edc8 7a00 	vstr	s15, [r8]
 800dbf8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800dbfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc00:	aa31      	add	r2, sp, #196	; 0xc4
 800dc02:	2301      	movs	r3, #1
 800dc04:	429c      	cmp	r4, r3
 800dc06:	da20      	bge.n	800dc4a <__kernel_rem_pio2f+0x47e>
 800dc08:	b10f      	cbz	r7, 800dc0e <__kernel_rem_pio2f+0x442>
 800dc0a:	eef1 7a67 	vneg.f32	s15, s15
 800dc0e:	edc8 7a01 	vstr	s15, [r8, #4]
 800dc12:	e7bb      	b.n	800db8c <__kernel_rem_pio2f+0x3c0>
 800dc14:	aa30      	add	r2, sp, #192	; 0xc0
 800dc16:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800dad8 <__kernel_rem_pio2f+0x30c>
 800dc1a:	4413      	add	r3, r2
 800dc1c:	2c00      	cmp	r4, #0
 800dc1e:	da05      	bge.n	800dc2c <__kernel_rem_pio2f+0x460>
 800dc20:	b10f      	cbz	r7, 800dc26 <__kernel_rem_pio2f+0x45a>
 800dc22:	eef1 7a67 	vneg.f32	s15, s15
 800dc26:	edc8 7a00 	vstr	s15, [r8]
 800dc2a:	e7af      	b.n	800db8c <__kernel_rem_pio2f+0x3c0>
 800dc2c:	ed33 7a01 	vldmdb	r3!, {s14}
 800dc30:	3c01      	subs	r4, #1
 800dc32:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc36:	e7f1      	b.n	800dc1c <__kernel_rem_pio2f+0x450>
 800dc38:	ed73 7a01 	vldmdb	r3!, {s15}
 800dc3c:	3a01      	subs	r2, #1
 800dc3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc42:	e7d2      	b.n	800dbea <__kernel_rem_pio2f+0x41e>
 800dc44:	eef0 7a47 	vmov.f32	s15, s14
 800dc48:	e7d4      	b.n	800dbf4 <__kernel_rem_pio2f+0x428>
 800dc4a:	ecb2 7a01 	vldmia	r2!, {s14}
 800dc4e:	3301      	adds	r3, #1
 800dc50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc54:	e7d6      	b.n	800dc04 <__kernel_rem_pio2f+0x438>
 800dc56:	edd1 7a00 	vldr	s15, [r1]
 800dc5a:	edd1 6a01 	vldr	s13, [r1, #4]
 800dc5e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dc62:	3801      	subs	r0, #1
 800dc64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc68:	ed81 7a00 	vstr	s14, [r1]
 800dc6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc70:	edc1 7a01 	vstr	s15, [r1, #4]
 800dc74:	e799      	b.n	800dbaa <__kernel_rem_pio2f+0x3de>
 800dc76:	edd2 7a00 	vldr	s15, [r2]
 800dc7a:	edd2 6a01 	vldr	s13, [r2, #4]
 800dc7e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dc82:	3901      	subs	r1, #1
 800dc84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc88:	ed82 7a00 	vstr	s14, [r2]
 800dc8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc90:	edc2 7a01 	vstr	s15, [r2, #4]
 800dc94:	e78e      	b.n	800dbb4 <__kernel_rem_pio2f+0x3e8>
 800dc96:	ed33 7a01 	vldmdb	r3!, {s14}
 800dc9a:	3c01      	subs	r4, #1
 800dc9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dca0:	e78f      	b.n	800dbc2 <__kernel_rem_pio2f+0x3f6>
 800dca2:	eef1 6a66 	vneg.f32	s13, s13
 800dca6:	eeb1 7a47 	vneg.f32	s14, s14
 800dcaa:	edc8 6a00 	vstr	s13, [r8]
 800dcae:	ed88 7a01 	vstr	s14, [r8, #4]
 800dcb2:	eef1 7a67 	vneg.f32	s15, s15
 800dcb6:	e790      	b.n	800dbda <__kernel_rem_pio2f+0x40e>

0800dcb8 <__kernel_sinf>:
 800dcb8:	ee10 3a10 	vmov	r3, s0
 800dcbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcc0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800dcc4:	da04      	bge.n	800dcd0 <__kernel_sinf+0x18>
 800dcc6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800dcca:	ee17 3a90 	vmov	r3, s15
 800dcce:	b35b      	cbz	r3, 800dd28 <__kernel_sinf+0x70>
 800dcd0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dcd4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800dd2c <__kernel_sinf+0x74>
 800dcd8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800dd30 <__kernel_sinf+0x78>
 800dcdc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dce0:	eddf 7a14 	vldr	s15, [pc, #80]	; 800dd34 <__kernel_sinf+0x7c>
 800dce4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dce8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800dd38 <__kernel_sinf+0x80>
 800dcec:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dcf0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800dd3c <__kernel_sinf+0x84>
 800dcf4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800dcf8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dcfc:	b930      	cbnz	r0, 800dd0c <__kernel_sinf+0x54>
 800dcfe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800dd40 <__kernel_sinf+0x88>
 800dd02:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dd06:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dd0a:	4770      	bx	lr
 800dd0c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dd10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dd14:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dd18:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dd1c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800dd44 <__kernel_sinf+0x8c>
 800dd20:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dd24:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	2f2ec9d3 	.word	0x2f2ec9d3
 800dd30:	b2d72f34 	.word	0xb2d72f34
 800dd34:	3638ef1b 	.word	0x3638ef1b
 800dd38:	b9500d01 	.word	0xb9500d01
 800dd3c:	3c088889 	.word	0x3c088889
 800dd40:	be2aaaab 	.word	0xbe2aaaab
 800dd44:	3e2aaaab 	.word	0x3e2aaaab

0800dd48 <with_errnof>:
 800dd48:	b513      	push	{r0, r1, r4, lr}
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dd50:	f7fb ff24 	bl	8009b9c <__errno>
 800dd54:	ed9d 0a01 	vldr	s0, [sp, #4]
 800dd58:	6004      	str	r4, [r0, #0]
 800dd5a:	b002      	add	sp, #8
 800dd5c:	bd10      	pop	{r4, pc}

0800dd5e <xflowf>:
 800dd5e:	b130      	cbz	r0, 800dd6e <xflowf+0x10>
 800dd60:	eef1 7a40 	vneg.f32	s15, s0
 800dd64:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dd68:	2022      	movs	r0, #34	; 0x22
 800dd6a:	f7ff bfed 	b.w	800dd48 <with_errnof>
 800dd6e:	eef0 7a40 	vmov.f32	s15, s0
 800dd72:	e7f7      	b.n	800dd64 <xflowf+0x6>

0800dd74 <__math_uflowf>:
 800dd74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dd7c <__math_uflowf+0x8>
 800dd78:	f7ff bff1 	b.w	800dd5e <xflowf>
 800dd7c:	10000000 	.word	0x10000000

0800dd80 <__math_oflowf>:
 800dd80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dd88 <__math_oflowf+0x8>
 800dd84:	f7ff bfeb 	b.w	800dd5e <xflowf>
 800dd88:	70000000 	.word	0x70000000

0800dd8c <atanf>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	ee10 5a10 	vmov	r5, s0
 800dd92:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dd96:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800dd9a:	eef0 7a40 	vmov.f32	s15, s0
 800dd9e:	db10      	blt.n	800ddc2 <atanf+0x36>
 800dda0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800dda4:	dd04      	ble.n	800ddb0 <atanf+0x24>
 800dda6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ddaa:	eeb0 0a67 	vmov.f32	s0, s15
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800dee8 <atanf+0x15c>
 800ddb4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800deec <atanf+0x160>
 800ddb8:	2d00      	cmp	r5, #0
 800ddba:	bfd8      	it	le
 800ddbc:	eef0 7a40 	vmovle.f32	s15, s0
 800ddc0:	e7f3      	b.n	800ddaa <atanf+0x1e>
 800ddc2:	4b4b      	ldr	r3, [pc, #300]	; (800def0 <atanf+0x164>)
 800ddc4:	429c      	cmp	r4, r3
 800ddc6:	dc10      	bgt.n	800ddea <atanf+0x5e>
 800ddc8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ddcc:	da0a      	bge.n	800dde4 <atanf+0x58>
 800ddce:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800def4 <atanf+0x168>
 800ddd2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ddd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ddda:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ddde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde2:	dce2      	bgt.n	800ddaa <atanf+0x1e>
 800dde4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dde8:	e013      	b.n	800de12 <atanf+0x86>
 800ddea:	f000 f8a3 	bl	800df34 <fabsf>
 800ddee:	4b42      	ldr	r3, [pc, #264]	; (800def8 <atanf+0x16c>)
 800ddf0:	429c      	cmp	r4, r3
 800ddf2:	dc4f      	bgt.n	800de94 <atanf+0x108>
 800ddf4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ddf8:	429c      	cmp	r4, r3
 800ddfa:	dc41      	bgt.n	800de80 <atanf+0xf4>
 800ddfc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800de00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800de04:	eea0 7a27 	vfma.f32	s14, s0, s15
 800de08:	2300      	movs	r3, #0
 800de0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800de0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800de18:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800defc <atanf+0x170>
 800de1c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800df00 <atanf+0x174>
 800de20:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800df04 <atanf+0x178>
 800de24:	ee66 6a06 	vmul.f32	s13, s12, s12
 800de28:	eee6 5a87 	vfma.f32	s11, s13, s14
 800de2c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800df08 <atanf+0x17c>
 800de30:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800de34:	eddf 5a35 	vldr	s11, [pc, #212]	; 800df0c <atanf+0x180>
 800de38:	eee7 5a26 	vfma.f32	s11, s14, s13
 800de3c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800df10 <atanf+0x184>
 800de40:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800de44:	eddf 5a33 	vldr	s11, [pc, #204]	; 800df14 <atanf+0x188>
 800de48:	eee7 5a26 	vfma.f32	s11, s14, s13
 800de4c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800df18 <atanf+0x18c>
 800de50:	eea6 5a87 	vfma.f32	s10, s13, s14
 800de54:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800df1c <atanf+0x190>
 800de58:	eea5 7a26 	vfma.f32	s14, s10, s13
 800de5c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800df20 <atanf+0x194>
 800de60:	eea7 5a26 	vfma.f32	s10, s14, s13
 800de64:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800df24 <atanf+0x198>
 800de68:	eea5 7a26 	vfma.f32	s14, s10, s13
 800de6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800de70:	eea5 7a86 	vfma.f32	s14, s11, s12
 800de74:	ee27 7a87 	vmul.f32	s14, s15, s14
 800de78:	d121      	bne.n	800debe <atanf+0x132>
 800de7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de7e:	e794      	b.n	800ddaa <atanf+0x1e>
 800de80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de84:	ee30 7a67 	vsub.f32	s14, s0, s15
 800de88:	ee30 0a27 	vadd.f32	s0, s0, s15
 800de8c:	2301      	movs	r3, #1
 800de8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800de92:	e7be      	b.n	800de12 <atanf+0x86>
 800de94:	4b24      	ldr	r3, [pc, #144]	; (800df28 <atanf+0x19c>)
 800de96:	429c      	cmp	r4, r3
 800de98:	dc0b      	bgt.n	800deb2 <atanf+0x126>
 800de9a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800de9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dea2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dea6:	2302      	movs	r3, #2
 800dea8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800deac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800deb0:	e7af      	b.n	800de12 <atanf+0x86>
 800deb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800deb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800deba:	2303      	movs	r3, #3
 800debc:	e7a9      	b.n	800de12 <atanf+0x86>
 800debe:	4a1b      	ldr	r2, [pc, #108]	; (800df2c <atanf+0x1a0>)
 800dec0:	491b      	ldr	r1, [pc, #108]	; (800df30 <atanf+0x1a4>)
 800dec2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dec6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800deca:	ed93 0a00 	vldr	s0, [r3]
 800dece:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ded2:	ed92 0a00 	vldr	s0, [r2]
 800ded6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800deda:	2d00      	cmp	r5, #0
 800dedc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800dee0:	bfb8      	it	lt
 800dee2:	eef1 7a67 	vneglt.f32	s15, s15
 800dee6:	e760      	b.n	800ddaa <atanf+0x1e>
 800dee8:	3fc90fdb 	.word	0x3fc90fdb
 800deec:	bfc90fdb 	.word	0xbfc90fdb
 800def0:	3edfffff 	.word	0x3edfffff
 800def4:	7149f2ca 	.word	0x7149f2ca
 800def8:	3f97ffff 	.word	0x3f97ffff
 800defc:	3c8569d7 	.word	0x3c8569d7
 800df00:	3d4bda59 	.word	0x3d4bda59
 800df04:	bd6ef16b 	.word	0xbd6ef16b
 800df08:	3d886b35 	.word	0x3d886b35
 800df0c:	3dba2e6e 	.word	0x3dba2e6e
 800df10:	3e124925 	.word	0x3e124925
 800df14:	3eaaaaab 	.word	0x3eaaaaab
 800df18:	bd15a221 	.word	0xbd15a221
 800df1c:	bd9d8795 	.word	0xbd9d8795
 800df20:	bde38e38 	.word	0xbde38e38
 800df24:	be4ccccd 	.word	0xbe4ccccd
 800df28:	401bffff 	.word	0x401bffff
 800df2c:	0800ec24 	.word	0x0800ec24
 800df30:	0800ec34 	.word	0x0800ec34

0800df34 <fabsf>:
 800df34:	ee10 3a10 	vmov	r3, s0
 800df38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df3c:	ee00 3a10 	vmov	s0, r3
 800df40:	4770      	bx	lr

0800df42 <finitef>:
 800df42:	b082      	sub	sp, #8
 800df44:	ed8d 0a01 	vstr	s0, [sp, #4]
 800df48:	9801      	ldr	r0, [sp, #4]
 800df4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800df4e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800df52:	bfac      	ite	ge
 800df54:	2000      	movge	r0, #0
 800df56:	2001      	movlt	r0, #1
 800df58:	b002      	add	sp, #8
 800df5a:	4770      	bx	lr

0800df5c <floorf>:
 800df5c:	ee10 3a10 	vmov	r3, s0
 800df60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800df64:	3a7f      	subs	r2, #127	; 0x7f
 800df66:	2a16      	cmp	r2, #22
 800df68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800df6c:	dc2a      	bgt.n	800dfc4 <floorf+0x68>
 800df6e:	2a00      	cmp	r2, #0
 800df70:	da11      	bge.n	800df96 <floorf+0x3a>
 800df72:	eddf 7a18 	vldr	s15, [pc, #96]	; 800dfd4 <floorf+0x78>
 800df76:	ee30 0a27 	vadd.f32	s0, s0, s15
 800df7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800df7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df82:	dd05      	ble.n	800df90 <floorf+0x34>
 800df84:	2b00      	cmp	r3, #0
 800df86:	da23      	bge.n	800dfd0 <floorf+0x74>
 800df88:	4a13      	ldr	r2, [pc, #76]	; (800dfd8 <floorf+0x7c>)
 800df8a:	2900      	cmp	r1, #0
 800df8c:	bf18      	it	ne
 800df8e:	4613      	movne	r3, r2
 800df90:	ee00 3a10 	vmov	s0, r3
 800df94:	4770      	bx	lr
 800df96:	4911      	ldr	r1, [pc, #68]	; (800dfdc <floorf+0x80>)
 800df98:	4111      	asrs	r1, r2
 800df9a:	420b      	tst	r3, r1
 800df9c:	d0fa      	beq.n	800df94 <floorf+0x38>
 800df9e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800dfd4 <floorf+0x78>
 800dfa2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dfa6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfae:	ddef      	ble.n	800df90 <floorf+0x34>
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	bfbe      	ittt	lt
 800dfb4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800dfb8:	fa40 f202 	asrlt.w	r2, r0, r2
 800dfbc:	189b      	addlt	r3, r3, r2
 800dfbe:	ea23 0301 	bic.w	r3, r3, r1
 800dfc2:	e7e5      	b.n	800df90 <floorf+0x34>
 800dfc4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dfc8:	d3e4      	bcc.n	800df94 <floorf+0x38>
 800dfca:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dfce:	4770      	bx	lr
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	e7dd      	b.n	800df90 <floorf+0x34>
 800dfd4:	7149f2ca 	.word	0x7149f2ca
 800dfd8:	bf800000 	.word	0xbf800000
 800dfdc:	007fffff 	.word	0x007fffff

0800dfe0 <nanf>:
 800dfe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dfe8 <nanf+0x8>
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	7fc00000 	.word	0x7fc00000

0800dfec <scalbnf>:
 800dfec:	ee10 3a10 	vmov	r3, s0
 800dff0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800dff4:	d025      	beq.n	800e042 <scalbnf+0x56>
 800dff6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dffa:	d302      	bcc.n	800e002 <scalbnf+0x16>
 800dffc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e000:	4770      	bx	lr
 800e002:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e006:	d122      	bne.n	800e04e <scalbnf+0x62>
 800e008:	4b2a      	ldr	r3, [pc, #168]	; (800e0b4 <scalbnf+0xc8>)
 800e00a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e0b8 <scalbnf+0xcc>
 800e00e:	4298      	cmp	r0, r3
 800e010:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e014:	db16      	blt.n	800e044 <scalbnf+0x58>
 800e016:	ee10 3a10 	vmov	r3, s0
 800e01a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e01e:	3a19      	subs	r2, #25
 800e020:	4402      	add	r2, r0
 800e022:	2afe      	cmp	r2, #254	; 0xfe
 800e024:	dd15      	ble.n	800e052 <scalbnf+0x66>
 800e026:	ee10 3a10 	vmov	r3, s0
 800e02a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e0bc <scalbnf+0xd0>
 800e02e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e0c0 <scalbnf+0xd4>
 800e032:	2b00      	cmp	r3, #0
 800e034:	eeb0 7a67 	vmov.f32	s14, s15
 800e038:	bfb8      	it	lt
 800e03a:	eef0 7a66 	vmovlt.f32	s15, s13
 800e03e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e042:	4770      	bx	lr
 800e044:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e0c4 <scalbnf+0xd8>
 800e048:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e04c:	4770      	bx	lr
 800e04e:	0dd2      	lsrs	r2, r2, #23
 800e050:	e7e6      	b.n	800e020 <scalbnf+0x34>
 800e052:	2a00      	cmp	r2, #0
 800e054:	dd06      	ble.n	800e064 <scalbnf+0x78>
 800e056:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e05a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e05e:	ee00 3a10 	vmov	s0, r3
 800e062:	4770      	bx	lr
 800e064:	f112 0f16 	cmn.w	r2, #22
 800e068:	da1a      	bge.n	800e0a0 <scalbnf+0xb4>
 800e06a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e06e:	4298      	cmp	r0, r3
 800e070:	ee10 3a10 	vmov	r3, s0
 800e074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e078:	dd0a      	ble.n	800e090 <scalbnf+0xa4>
 800e07a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e0bc <scalbnf+0xd0>
 800e07e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e0c0 <scalbnf+0xd4>
 800e082:	eef0 7a40 	vmov.f32	s15, s0
 800e086:	2b00      	cmp	r3, #0
 800e088:	bf18      	it	ne
 800e08a:	eeb0 0a47 	vmovne.f32	s0, s14
 800e08e:	e7db      	b.n	800e048 <scalbnf+0x5c>
 800e090:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e0c4 <scalbnf+0xd8>
 800e094:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e0c8 <scalbnf+0xdc>
 800e098:	eef0 7a40 	vmov.f32	s15, s0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	e7f3      	b.n	800e088 <scalbnf+0x9c>
 800e0a0:	3219      	adds	r2, #25
 800e0a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e0aa:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e0cc <scalbnf+0xe0>
 800e0ae:	ee07 3a10 	vmov	s14, r3
 800e0b2:	e7c4      	b.n	800e03e <scalbnf+0x52>
 800e0b4:	ffff3cb0 	.word	0xffff3cb0
 800e0b8:	4c000000 	.word	0x4c000000
 800e0bc:	7149f2ca 	.word	0x7149f2ca
 800e0c0:	f149f2ca 	.word	0xf149f2ca
 800e0c4:	0da24260 	.word	0x0da24260
 800e0c8:	8da24260 	.word	0x8da24260
 800e0cc:	33000000 	.word	0x33000000

0800e0d0 <_init>:
 800e0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d2:	bf00      	nop
 800e0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0d6:	bc08      	pop	{r3}
 800e0d8:	469e      	mov	lr, r3
 800e0da:	4770      	bx	lr

0800e0dc <_fini>:
 800e0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0de:	bf00      	nop
 800e0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0e2:	bc08      	pop	{r3}
 800e0e4:	469e      	mov	lr, r3
 800e0e6:	4770      	bx	lr
